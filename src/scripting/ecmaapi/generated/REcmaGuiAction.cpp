// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is not copyable.
        
        #include "REcmaGuiAction.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
                #include <QToolBar>
            
                #include "RDocument.h"
            
                #include "RDocumentInterface.h"
            
            
        // includes for base ecma wrapper classes
        
                  #include "REcmaFocusListener.h"
                
                  #include "REcmaTransactionListener.h"
                
                  #include "REcmaSelectionListener.h"
                 void REcmaGuiAction::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RGuiAction*) 0)));
        protoCreated = true;
    }

    
        // primary base class QAction:
        
            QScriptValue dpt = engine.defaultPrototype(
                qMetaTypeId<QAction*>());

            if (dpt.isValid()) {
                proto->setPrototype(dpt);
            }
          
        /*
        REcmaFocusListener::initEcma(engine, proto);
          REcmaTransactionListener::initEcma(engine, proto);
          REcmaSelectionListener::initEcma(engine, proto);
          
        */
    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    
        // conversion for base class QAction
        REcmaHelper::registerFunction(&engine, proto, getQAction, "getQAction");
        
        // conversion for base class RFocusListener
        REcmaHelper::registerFunction(&engine, proto, getRFocusListener, "getRFocusListener");
        
        // conversion for base class RTransactionListener
        REcmaHelper::registerFunction(&engine, proto, getRTransactionListener, "getRTransactionListener");
        
        // conversion for base class RSelectionListener
        REcmaHelper::registerFunction(&engine, proto, getRSelectionListener, "getRSelectionListener");
        

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

        // properties of secondary base class RFocusListener:
        

        // methods of secondary base class RFocusListener:
        

        // properties of secondary base class RTransactionListener:
        

        // methods of secondary base class RTransactionListener:
        

        // properties of secondary base class RSelectionListener:
        

        // methods of secondary base class RSelectionListener:
        

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, setText, "setText");
            
            REcmaHelper::registerFunction(&engine, proto, initTexts, "initTexts");
            
            REcmaHelper::registerFunction(&engine, proto, init, "init");
            
            REcmaHelper::registerFunction(&engine, proto, getToolTip, "getToolTip");
            
            REcmaHelper::registerFunction(&engine, proto, addShortcut, "addShortcut");
            
            REcmaHelper::registerFunction(&engine, proto, setShortcut, "setShortcut");
            
            REcmaHelper::registerFunction(&engine, proto, setDefaultShortcut, "setDefaultShortcut");
            
            REcmaHelper::registerFunction(&engine, proto, setShortcuts, "setShortcuts");
            
            REcmaHelper::registerFunction(&engine, proto, setShortcutsFromStrings, "setShortcutsFromStrings");
            
            REcmaHelper::registerFunction(&engine, proto, getShortcuts, "getShortcuts");
            
            REcmaHelper::registerFunction(&engine, proto, setDefaultShortcuts, "setDefaultShortcuts");
            
            REcmaHelper::registerFunction(&engine, proto, getDefaultShortcuts, "getDefaultShortcuts");
            
            REcmaHelper::registerFunction(&engine, proto, setShortcutText, "setShortcutText");
            
            REcmaHelper::registerFunction(&engine, proto, getShortcutText, "getShortcutText");
            
            REcmaHelper::registerFunction(&engine, proto, getShortcutsString, "getShortcutsString");
            
            REcmaHelper::registerFunction(&engine, proto, setGroupSortOrder, "setGroupSortOrder");
            
            REcmaHelper::registerFunction(&engine, proto, setGroupSortOrderOverride, "setGroupSortOrderOverride");
            
            REcmaHelper::registerFunction(&engine, proto, getGroupSortOrder, "getGroupSortOrder");
            
            REcmaHelper::registerFunction(&engine, proto, setSortOrder, "setSortOrder");
            
            REcmaHelper::registerFunction(&engine, proto, setSortOrderOverride, "setSortOrderOverride");
            
            REcmaHelper::registerFunction(&engine, proto, getSortOrder, "getSortOrder");
            
            REcmaHelper::registerFunction(&engine, proto, addToMenu, "addToMenu");
            
            REcmaHelper::registerFunction(&engine, proto, addToToolBar, "addToToolBar");
            
            REcmaHelper::registerFunction(&engine, proto, updateIcon, "updateIcon");
            
            REcmaHelper::registerFunction(&engine, proto, setIcon, "setIcon");
            
            REcmaHelper::registerFunction(&engine, proto, disableIcon, "disableIcon");
            
            REcmaHelper::registerFunction(&engine, proto, isIconDisabled, "isIconDisabled");
            
            REcmaHelper::registerFunction(&engine, proto, setToolTip, "setToolTip");
            
            REcmaHelper::registerFunction(&engine, proto, setStatusTip, "setStatusTip");
            
            REcmaHelper::registerFunction(&engine, proto, setEnabled, "setEnabled");
            
            REcmaHelper::registerFunction(&engine, proto, setEnabledOverride, "setEnabledOverride");
            
            REcmaHelper::registerFunction(&engine, proto, setChecked, "setChecked");
            
            REcmaHelper::registerFunction(&engine, proto, isChecked, "isChecked");
            
            REcmaHelper::registerFunction(&engine, proto, setForceGlobal, "setForceGlobal");
            
            REcmaHelper::registerFunction(&engine, proto, getForceGlobal, "getForceGlobal");
            
            REcmaHelper::registerFunction(&engine, proto, setRequiresDocument, "setRequiresDocument");
            
            REcmaHelper::registerFunction(&engine, proto, getRequiresDocument, "getRequiresDocument");
            
            REcmaHelper::registerFunction(&engine, proto, setRequiresSelection, "setRequiresSelection");
            
            REcmaHelper::registerFunction(&engine, proto, getRequiresSelection, "getRequiresSelection");
            
            REcmaHelper::registerFunction(&engine, proto, setRequiresUndoableTransaction, "setRequiresUndoableTransaction");
            
            REcmaHelper::registerFunction(&engine, proto, getRequiresUndoableTransaction, "getRequiresUndoableTransaction");
            
            REcmaHelper::registerFunction(&engine, proto, setRequiresRedoableTransaction, "setRequiresRedoableTransaction");
            
            REcmaHelper::registerFunction(&engine, proto, getRequiresRedoableTransaction, "getRequiresRedoableTransaction");
            
            REcmaHelper::registerFunction(&engine, proto, setOverride, "setOverride");
            
            REcmaHelper::registerFunction(&engine, proto, isOverride, "isOverride");
            
            REcmaHelper::registerFunction(&engine, proto, setAllowInterrupt, "setAllowInterrupt");
            
            REcmaHelper::registerFunction(&engine, proto, getAllowInterrupt, "getAllowInterrupt");
            
            REcmaHelper::registerFunction(&engine, proto, setNoState, "setNoState");
            
            REcmaHelper::registerFunction(&engine, proto, hasNoState, "hasNoState");
            
            REcmaHelper::registerFunction(&engine, proto, setToggleable, "setToggleable");
            
            REcmaHelper::registerFunction(&engine, proto, isToggleable, "isToggleable");
            
            REcmaHelper::registerFunction(&engine, proto, setUniqueGroup, "setUniqueGroup");
            
            REcmaHelper::registerFunction(&engine, proto, getUniqueGroup, "getUniqueGroup");
            
            REcmaHelper::registerFunction(&engine, proto, getMainCommand, "getMainCommand");
            
            REcmaHelper::registerFunction(&engine, proto, getCommands, "getCommands");
            
            REcmaHelper::registerFunction(&engine, proto, getDefaultCommands, "getDefaultCommands");
            
            REcmaHelper::registerFunction(&engine, proto, setDefaultCommands, "setDefaultCommands");
            
            REcmaHelper::registerFunction(&engine, proto, setCommands, "setCommands");
            
            REcmaHelper::registerFunction(&engine, proto, setScriptFile, "setScriptFile");
            
            REcmaHelper::registerFunction(&engine, proto, getScriptFile, "getScriptFile");
            
            REcmaHelper::registerFunction(&engine, proto, getScriptClass, "getScriptClass");
            
            REcmaHelper::registerFunction(&engine, proto, setGroup, "setGroup");
            
            REcmaHelper::registerFunction(&engine, proto, getGroup, "getGroup");
            
            REcmaHelper::registerFunction(&engine, proto, setGroupDefault, "setGroupDefault");
            
            REcmaHelper::registerFunction(&engine, proto, isGroupDefault, "isGroupDefault");
            
            REcmaHelper::registerFunction(&engine, proto, updateTransactionListener, "updateTransactionListener");
            
            REcmaHelper::registerFunction(&engine, proto, updateSelectionListener, "updateSelectionListener");
            
            REcmaHelper::registerFunction(&engine, proto, updateFocus, "updateFocus");
            
            REcmaHelper::registerFunction(&engine, proto, addArgument, "addArgument");
            
            REcmaHelper::registerFunction(&engine, proto, getArguments, "getArguments");
            
            REcmaHelper::registerFunction(&engine, proto, clearArguments, "clearArguments");
            
            REcmaHelper::registerFunction(&engine, proto, setWidgetNames, "setWidgetNames");
            
            REcmaHelper::registerFunction(&engine, proto, getWidgetNames, "getWidgetNames");
            
            REcmaHelper::registerFunction(&engine, proto, slotTrigger, "slotTrigger");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RGuiAction*>(), *proto);

        
                        qScriptRegisterMetaType<
                        RGuiAction*>(
                        &engine, toScriptValue, fromScriptValue, *proto);
                    
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    
            REcmaHelper::registerFunction(&engine, &ctor, formatToolTip, "formatToolTip");
            
            REcmaHelper::registerFunction(&engine, &ctor, setGroupSortOrderStatic, "setGroupSortOrderStatic");
            
            REcmaHelper::registerFunction(&engine, &ctor, setGroupSortOrderOverrideStatic, "setGroupSortOrderOverrideStatic");
            
            REcmaHelper::registerFunction(&engine, &ctor, getGroupSortOrderStatic, "getGroupSortOrderStatic");
            
            REcmaHelper::registerFunction(&engine, &ctor, setSortOrderStatic, "setSortOrderStatic");
            
            REcmaHelper::registerFunction(&engine, &ctor, setSortOrderOverrideStatic, "setSortOrderOverrideStatic");
            
            REcmaHelper::registerFunction(&engine, &ctor, getSortOrderStatic, "getSortOrderStatic");
            
            REcmaHelper::registerFunction(&engine, &ctor, fixSeparators, "fixSeparators");
            
            REcmaHelper::registerFunction(&engine, &ctor, addSeparatorToWidget, "addSeparatorToWidget");
            
            REcmaHelper::registerFunction(&engine, &ctor, addToWidget, "addToWidget");
            
            REcmaHelper::registerFunction(&engine, &ctor, removeFromWidget, "removeFromWidget");
            
            REcmaHelper::registerFunction(&engine, &ctor, updateIcons, "updateIcons");
            
            REcmaHelper::registerFunction(&engine, &ctor, triggerGroupDefault, "triggerGroupDefault");
            
            REcmaHelper::registerFunction(&engine, &ctor, triggerGroupDefaults, "triggerGroupDefaults");
            
            REcmaHelper::registerFunction(&engine, &ctor, getActions, "getActions");
            
            REcmaHelper::registerFunction(&engine, &ctor, triggerByCommand, "triggerByCommand");
            
            REcmaHelper::registerFunction(&engine, &ctor, triggerByShortcut, "triggerByShortcut");
            
            REcmaHelper::registerFunction(&engine, &ctor, getByScriptFile, "getByScriptFile");
            
            REcmaHelper::registerFunction(&engine, &ctor, getByClassName, "getByClassName");
            
            REcmaHelper::registerFunction(&engine, &ctor, getByCommand, "getByCommand");
            
            REcmaHelper::registerFunction(&engine, &ctor, triggerByScriptFile, "triggerByScriptFile");
            
            REcmaHelper::registerFunction(&engine, &ctor, getAvailableCommands, "getAvailableCommands");
            
            REcmaHelper::registerFunction(&engine, &ctor, clear, "clear");
            
            REcmaHelper::registerFunction(&engine, &ctor, setWidgetNamesStatic, "setWidgetNamesStatic");
            
            REcmaHelper::registerFunction(&engine, &ctor, getWidgetNamesStatic, "getWidgetNamesStatic");
            

    // static properties:
    

    // enum values:
    

    // enum conversions:
    
        
    // init class:
    engine.globalObject().setProperty("RGuiAction",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaGuiAction::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
    if (context->thisObject().strictlyEquals(
       engine->globalObject())) {
       return REcmaHelper::throwError(
       QString::fromLatin1("RGuiAction(): Did you forget to construct with 'new'?"),
           context);
    }

    QScriptValue result;
        
            // generate constructor variants:
            
    if( context->argumentCount() ==
        1
                && (
                
                        context->argument(
                        0
                        ).isString()
                ) /* type: QString */
            
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ constructor:
    
            // non-copyable class:
            RGuiAction
                    * cppResult =
                    new
                    RGuiAction
                    (
                    a0
                    );
                
                    result = engine->newQObject(context->thisObject(), cppResult, QScriptEngine::QtOwnership);
                
    } else 

    if( context->argumentCount() ==
        2
                && (
                
                        context->argument(
                        0
                        ).isString()
                ) /* type: QString */
            
                && (
                
                        context->argument(
                        1
                        ).isQObject()
                ) /* type: QObject * */
            
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
            // argument isQObject
            QObject *
            a1 =
            qobject_cast<
            QObject *>
            ( context->argument(
            1
            ).
            toQObject()
            );
        
    // end of arguments

    // call C++ constructor:
    
            // non-copyable class:
            RGuiAction
                    * cppResult =
                    new
                    RGuiAction
                    (
                    a0
        ,
    a1
                    );
                
                    result = engine->newQObject(context->thisObject(), cppResult, QScriptEngine::QtOwnership);
                
    } else 

    {
       return REcmaHelper::throwError(
       QString::fromLatin1("RGuiAction(): no matching constructor found."),
           context);
    }
    
    return result;
    }
    

    // conversion functions for base classes:
     QScriptValue REcmaGuiAction::getQAction(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                QAction* cppResult =
                    qscriptvalue_cast<RGuiAction*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
             QScriptValue REcmaGuiAction::getRFocusListener(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RFocusListener* cppResult =
                    qscriptvalue_cast<RGuiAction*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
             QScriptValue REcmaGuiAction::getRTransactionListener(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RTransactionListener* cppResult =
                    qscriptvalue_cast<RGuiAction*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
             QScriptValue REcmaGuiAction::getRSelectionListener(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RSelectionListener* cppResult =
                    qscriptvalue_cast<RGuiAction*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
            

    // returns class name:
     QScriptValue REcmaGuiAction::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RGuiAction"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaGuiAction::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        
        list.append("QAction");
    
        list.append("RFocusListener");
    
        list.append("RTransactionListener");
    
        list.append("RSelectionListener");
    

        return qScriptValueFromSequence(engine, list);
    }
    
        // properties of secondary base class RFocusListener:
        

        // methods of secondary base class RFocusListener:
        
        // properties of secondary base class RTransactionListener:
        

        // methods of secondary base class RTransactionListener:
        
        // properties of secondary base class RSelectionListener:
        

        // methods of secondary base class RSelectionListener:
        

    // properties:
    

    // public methods:
     QScriptValue
        REcmaGuiAction::setText
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setText", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setText";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setText", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setText(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setText().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setText", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::initTexts
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::initTexts", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::initTexts";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("initTexts", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->initTexts();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.initTexts().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::initTexts", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::init
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::init", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::init";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("init", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->init();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.init().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::init", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::formatToolTip
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::formatToolTip", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::formatToolTip";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    QString
                    a1 =
                    (QString)
                    
                    context->argument( 1 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        RGuiAction::
       formatToolTip(a0
        ,
    a1);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.formatToolTip().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::formatToolTip", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getToolTip
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getToolTip", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getToolTip";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("getToolTip", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    QString
                    a1 =
                    (QString)
                    
                    context->argument( 1 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getToolTip(a0
        ,
    a1);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getToolTip().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getToolTip", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::addShortcut
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::addShortcut", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::addShortcut";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("addShortcut", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QKeySequence */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QKeySequence*
                    ap0 =
                    qscriptvalue_cast<
                    QKeySequence*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGuiAction: Argument 0 is not of type QKeySequence*.",
                               context);                    
                    }
                    QKeySequence& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addShortcut(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.addShortcut().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::addShortcut", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setShortcut
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setShortcut", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setShortcut";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setShortcut", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QKeySequence */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QKeySequence*
                    ap0 =
                    qscriptvalue_cast<
                    QKeySequence*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGuiAction: Argument 0 is not of type QKeySequence*.",
                               context);                    
                    }
                    QKeySequence& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setShortcut(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setShortcut().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setShortcut", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setDefaultShortcut
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setDefaultShortcut", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setDefaultShortcut";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setDefaultShortcut", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QKeySequence */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QKeySequence*
                    ap0 =
                    qscriptvalue_cast<
                    QKeySequence*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGuiAction: Argument 0 is not of type QKeySequence*.",
                               context);                    
                    }
                    QKeySequence& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setDefaultShortcut(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setDefaultShortcut().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setDefaultShortcut", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setShortcuts
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setShortcuts", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setShortcuts";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setShortcuts", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QList < QKeySequence > */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QList < QKeySequence >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setShortcuts(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setShortcuts().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setShortcuts", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setShortcutsFromStrings
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setShortcutsFromStrings", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setShortcutsFromStrings";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setShortcutsFromStrings", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QStringList */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QStringList
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setShortcutsFromStrings(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setShortcutsFromStrings().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setShortcutsFromStrings", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getShortcuts
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getShortcuts", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getShortcuts";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("getShortcuts", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QList < QKeySequence >'
    QList < QKeySequence > cppResult =
        
               self->getShortcuts();
        // return type: QList < QKeySequence >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getShortcuts().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getShortcuts", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setDefaultShortcuts
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setDefaultShortcuts", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setDefaultShortcuts";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setDefaultShortcuts", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QList < QKeySequence > */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QList < QKeySequence >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setDefaultShortcuts(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setDefaultShortcuts().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setDefaultShortcuts", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getDefaultShortcuts
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getDefaultShortcuts", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getDefaultShortcuts";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("getDefaultShortcuts", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QList < QKeySequence >'
    QList < QKeySequence > cppResult =
        
               self->getDefaultShortcuts();
        // return type: QList < QKeySequence >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getDefaultShortcuts().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getDefaultShortcuts", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setShortcutText
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setShortcutText", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setShortcutText";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setShortcutText", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setShortcutText(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setShortcutText().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setShortcutText", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getShortcutText
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getShortcutText", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getShortcutText";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("getShortcutText", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getShortcutText();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getShortcutText().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getShortcutText", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getShortcutsString
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getShortcutsString", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getShortcutsString";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("getShortcutsString", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getShortcutsString();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getShortcutsString(a0);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: QKeySequence::SequenceFormat */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument is reference
                    QKeySequence::SequenceFormat*
                    ap1 =
                    qscriptvalue_cast<
                    QKeySequence::SequenceFormat*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if( ap1 == NULL ){
                           return REcmaHelper::throwError("RGuiAction: Argument 1 is not of type QKeySequence::SequenceFormat*.",
                               context);                    
                    }
                    QKeySequence::SequenceFormat& a1 = *ap1;
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getShortcutsString(a0
        ,
    a1);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getShortcutsString().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getShortcutsString", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setGroupSortOrderStatic
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setGroupSortOrderStatic", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setGroupSortOrderStatic";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isQObject()
        ) /* type: QAction * */
     && (
            context->argument(1).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
            // argument isQObject
            QAction *
            a0 =
            qobject_cast<
            QAction *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RGuiAction::
       setGroupSortOrderStatic(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setGroupSortOrderStatic().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setGroupSortOrderStatic", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setGroupSortOrderOverrideStatic
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setGroupSortOrderOverrideStatic", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setGroupSortOrderOverrideStatic";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isQObject()
        ) /* type: QAction * */
     && (
            context->argument(1).isString()
        ) /* type: QString */
     && (
            context->argument(2).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
            // argument isQObject
            QAction *
            a0 =
            qobject_cast<
            QAction *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
                    // argument isStandardType
                    QString
                    a1 =
                    (QString)
                    
                    context->argument( 1 ).
                    toString();
                
                    // argument isStandardType
                    int
                    a2 =
                    (int)
                    
                    context->argument( 2 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RGuiAction::
       setGroupSortOrderOverrideStatic(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setGroupSortOrderOverrideStatic().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setGroupSortOrderOverrideStatic", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getGroupSortOrderStatic
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getGroupSortOrderStatic", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getGroupSortOrderStatic";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isQObject()
        ) /* type: QAction * */
    
    ){
    // prepare arguments:
    
            // argument isQObject
            QAction *
            a0 =
            qobject_cast<
            QAction *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        RGuiAction::
       getGroupSortOrderStatic(a0);
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isQObject()
        ) /* type: QAction * */
     && (
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: QWidget * */
    
    ){
    // prepare arguments:
    
            // argument isQObject
            QAction *
            a0 =
            qobject_cast<
            QAction *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
            // argument isQObject
            QWidget *
            a1 =
            qobject_cast<
            QWidget *>
            ( context->argument(
            1
            ).
            toQObject()
            );
        
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        RGuiAction::
       getGroupSortOrderStatic(a0
        ,
    a1);
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getGroupSortOrderStatic().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getGroupSortOrderStatic", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setSortOrderStatic
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setSortOrderStatic", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setSortOrderStatic";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isQObject()
        ) /* type: QAction * */
     && (
            context->argument(1).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
            // argument isQObject
            QAction *
            a0 =
            qobject_cast<
            QAction *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RGuiAction::
       setSortOrderStatic(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setSortOrderStatic().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setSortOrderStatic", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setSortOrderOverrideStatic
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setSortOrderOverrideStatic", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setSortOrderOverrideStatic";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isQObject()
        ) /* type: QAction * */
     && (
            context->argument(1).isString()
        ) /* type: QString */
     && (
            context->argument(2).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
            // argument isQObject
            QAction *
            a0 =
            qobject_cast<
            QAction *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
                    // argument isStandardType
                    QString
                    a1 =
                    (QString)
                    
                    context->argument( 1 ).
                    toString();
                
                    // argument isStandardType
                    int
                    a2 =
                    (int)
                    
                    context->argument( 2 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RGuiAction::
       setSortOrderOverrideStatic(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setSortOrderOverrideStatic().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setSortOrderOverrideStatic", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getSortOrderStatic
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getSortOrderStatic", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getSortOrderStatic";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isQObject()
        ) /* type: QAction * */
    
    ){
    // prepare arguments:
    
            // argument isQObject
            QAction *
            a0 =
            qobject_cast<
            QAction *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        RGuiAction::
       getSortOrderStatic(a0);
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isQObject()
        ) /* type: QAction * */
     && (
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: QWidget * */
    
    ){
    // prepare arguments:
    
            // argument isQObject
            QAction *
            a0 =
            qobject_cast<
            QAction *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
            // argument isQObject
            QWidget *
            a1 =
            qobject_cast<
            QWidget *>
            ( context->argument(
            1
            ).
            toQObject()
            );
        
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        RGuiAction::
       getSortOrderStatic(a0
        ,
    a1);
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getSortOrderStatic().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getSortOrderStatic", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setGroupSortOrder
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setGroupSortOrder", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setGroupSortOrder";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setGroupSortOrder", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setGroupSortOrder(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setGroupSortOrder().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setGroupSortOrder", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setGroupSortOrderOverride
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setGroupSortOrderOverride", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setGroupSortOrderOverride";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setGroupSortOrderOverride", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setGroupSortOrderOverride(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setGroupSortOrderOverride().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setGroupSortOrderOverride", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getGroupSortOrder
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getGroupSortOrder", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getGroupSortOrder";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("getGroupSortOrder", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getGroupSortOrder();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QWidget * */
    
    ){
    // prepare arguments:
    
            // argument isQObject
            QWidget *
            a0 =
            qobject_cast<
            QWidget *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getGroupSortOrder(a0);
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getGroupSortOrder().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getGroupSortOrder", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setSortOrder
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setSortOrder", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setSortOrder";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setSortOrder", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setSortOrder(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setSortOrder().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setSortOrder", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setSortOrderOverride
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setSortOrderOverride", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setSortOrderOverride";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setSortOrderOverride", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setSortOrderOverride(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setSortOrderOverride().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setSortOrderOverride", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getSortOrder
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getSortOrder", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getSortOrder";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("getSortOrder", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getSortOrder();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QWidget * */
    
    ){
    // prepare arguments:
    
            // argument isQObject
            QWidget *
            a0 =
            qobject_cast<
            QWidget *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getSortOrder(a0);
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getSortOrder().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getSortOrder", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::addToMenu
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::addToMenu", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::addToMenu";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("addToMenu", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isQObject()
        ) /* type: QMenu * */
    
    ){
    // prepare arguments:
    
            // argument isQObject
            QMenu *
            a0 =
            qobject_cast<
            QMenu *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addToMenu(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.addToMenu().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::addToMenu", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::addToToolBar
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::addToToolBar", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::addToToolBar";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("addToToolBar", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isQObject()
        ) /* type: QToolBar * */
    
    ){
    // prepare arguments:
    
            // argument isQObject
            QToolBar *
            a0 =
            qobject_cast<
            QToolBar *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addToToolBar(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.addToToolBar().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::addToToolBar", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::fixSeparators
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::fixSeparators", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::fixSeparators";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QWidget * */
    
    ){
    // prepare arguments:
    
            // argument isQObject
            QWidget *
            a0 =
            qobject_cast<
            QWidget *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
    // end of arguments

    // call C++ function:
    // return type 'void'
    RGuiAction::
       fixSeparators(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.fixSeparators().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::fixSeparators", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::addSeparatorToWidget
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::addSeparatorToWidget", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::addSeparatorToWidget";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isQObject()
        ) /* type: QAction * */
     && (
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: QWidget * */
    
    ){
    // prepare arguments:
    
            // argument isQObject
            QAction *
            a0 =
            qobject_cast<
            QAction *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
            // argument isQObject
            QWidget *
            a1 =
            qobject_cast<
            QWidget *>
            ( context->argument(
            1
            ).
            toQObject()
            );
        
    // end of arguments

    // call C++ function:
    // return type 'void'
    RGuiAction::
       addSeparatorToWidget(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.addSeparatorToWidget().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::addSeparatorToWidget", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::addToWidget
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::addToWidget", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::addToWidget";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isQObject()
        ) /* type: QAction * */
     && (
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: QWidget * */
    
    ){
    // prepare arguments:
    
            // argument isQObject
            QAction *
            a0 =
            qobject_cast<
            QAction *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
            // argument isQObject
            QWidget *
            a1 =
            qobject_cast<
            QWidget *>
            ( context->argument(
            1
            ).
            toQObject()
            );
        
    // end of arguments

    // call C++ function:
    // return type 'void'
    RGuiAction::
       addToWidget(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.addToWidget().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::addToWidget", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::removeFromWidget
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::removeFromWidget", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::removeFromWidget";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isQObject()
        ) /* type: QAction * */
     && (
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: QWidget * */
    
    ){
    // prepare arguments:
    
            // argument isQObject
            QAction *
            a0 =
            qobject_cast<
            QAction *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
            // argument isQObject
            QWidget *
            a1 =
            qobject_cast<
            QWidget *>
            ( context->argument(
            1
            ).
            toQObject()
            );
        
    // end of arguments

    // call C++ function:
    // return type 'void'
    RGuiAction::
       removeFromWidget(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.removeFromWidget().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::removeFromWidget", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::updateIcons
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::updateIcons", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::updateIcons";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    RGuiAction::
       updateIcons();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.updateIcons().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::updateIcons", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::updateIcon
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::updateIcon", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::updateIcon";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("updateIcon", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->updateIcon();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.updateIcon().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::updateIcon", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setIcon
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setIcon", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setIcon";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setIcon", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setIcon(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setIcon().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setIcon", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::disableIcon
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::disableIcon", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::disableIcon";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("disableIcon", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->disableIcon();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.disableIcon().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::disableIcon", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::isIconDisabled
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::isIconDisabled", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::isIconDisabled";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("isIconDisabled", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isIconDisabled();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.isIconDisabled().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::isIconDisabled", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setToolTip
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setToolTip", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setToolTip";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setToolTip", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setToolTip(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setToolTip().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setToolTip", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setStatusTip
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setStatusTip", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setStatusTip";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setStatusTip", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setStatusTip(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setStatusTip().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setStatusTip", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setEnabled
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setEnabled", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setEnabled";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setEnabled", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setEnabled(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setEnabled().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setEnabled", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setEnabledOverride
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setEnabledOverride", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setEnabledOverride";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setEnabledOverride", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isBool()
        ) /* type: bool */
     && (
            context->argument(1).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setEnabledOverride(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setEnabledOverride().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setEnabledOverride", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setChecked
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setChecked", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setChecked";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setChecked", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setChecked(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setChecked().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setChecked", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::triggerGroupDefault
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::triggerGroupDefault", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::triggerGroupDefault";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RGuiAction::
       triggerGroupDefault(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.triggerGroupDefault().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::triggerGroupDefault", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::triggerGroupDefaults
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::triggerGroupDefaults", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::triggerGroupDefaults";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    RGuiAction::
       triggerGroupDefaults();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.triggerGroupDefaults().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::triggerGroupDefaults", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::isChecked
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::isChecked", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::isChecked";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("isChecked", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isChecked();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.isChecked().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::isChecked", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setForceGlobal
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setForceGlobal", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setForceGlobal";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setForceGlobal", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setForceGlobal(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setForceGlobal().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setForceGlobal", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getForceGlobal
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getForceGlobal", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getForceGlobal";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("getForceGlobal", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getForceGlobal();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getForceGlobal().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getForceGlobal", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setRequiresDocument
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setRequiresDocument", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setRequiresDocument";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setRequiresDocument", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setRequiresDocument(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setRequiresDocument().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setRequiresDocument", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getRequiresDocument
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getRequiresDocument", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getRequiresDocument";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("getRequiresDocument", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getRequiresDocument();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getRequiresDocument().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getRequiresDocument", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setRequiresSelection
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setRequiresSelection", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setRequiresSelection";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setRequiresSelection", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setRequiresSelection(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setRequiresSelection().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setRequiresSelection", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getRequiresSelection
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getRequiresSelection", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getRequiresSelection";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("getRequiresSelection", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getRequiresSelection();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getRequiresSelection().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getRequiresSelection", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setRequiresUndoableTransaction
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setRequiresUndoableTransaction", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setRequiresUndoableTransaction";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setRequiresUndoableTransaction", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setRequiresUndoableTransaction(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setRequiresUndoableTransaction().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setRequiresUndoableTransaction", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getRequiresUndoableTransaction
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getRequiresUndoableTransaction", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getRequiresUndoableTransaction";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("getRequiresUndoableTransaction", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getRequiresUndoableTransaction();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getRequiresUndoableTransaction().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getRequiresUndoableTransaction", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setRequiresRedoableTransaction
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setRequiresRedoableTransaction", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setRequiresRedoableTransaction";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setRequiresRedoableTransaction", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setRequiresRedoableTransaction(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setRequiresRedoableTransaction().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setRequiresRedoableTransaction", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getRequiresRedoableTransaction
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getRequiresRedoableTransaction", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getRequiresRedoableTransaction";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("getRequiresRedoableTransaction", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getRequiresRedoableTransaction();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getRequiresRedoableTransaction().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getRequiresRedoableTransaction", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setOverride
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setOverride", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setOverride";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setOverride", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setOverride();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setOverride().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setOverride", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::isOverride
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::isOverride", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::isOverride";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("isOverride", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isOverride();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.isOverride().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::isOverride", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setAllowInterrupt
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setAllowInterrupt", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setAllowInterrupt";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setAllowInterrupt", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setAllowInterrupt();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setAllowInterrupt().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setAllowInterrupt", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getAllowInterrupt
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getAllowInterrupt", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getAllowInterrupt";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("getAllowInterrupt", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getAllowInterrupt();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getAllowInterrupt().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getAllowInterrupt", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setNoState
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setNoState", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setNoState";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setNoState", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setNoState();
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setNoState(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setNoState().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setNoState", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::hasNoState
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::hasNoState", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::hasNoState";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("hasNoState", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->hasNoState();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.hasNoState().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::hasNoState", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setToggleable
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setToggleable", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setToggleable";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setToggleable", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setToggleable();
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setToggleable(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setToggleable().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setToggleable", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::isToggleable
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::isToggleable", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::isToggleable";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("isToggleable", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isToggleable();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.isToggleable().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::isToggleable", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setUniqueGroup
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setUniqueGroup", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setUniqueGroup";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setUniqueGroup", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setUniqueGroup(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setUniqueGroup().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setUniqueGroup", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getUniqueGroup
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getUniqueGroup", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getUniqueGroup";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("getUniqueGroup", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getUniqueGroup();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getUniqueGroup().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getUniqueGroup", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getMainCommand
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getMainCommand", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getMainCommand";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("getMainCommand", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getMainCommand();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getMainCommand().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getMainCommand", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getCommands
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getCommands", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getCommands";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("getCommands", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QStringList'
    QStringList cppResult =
        
               self->getCommands();
        // return type: QStringList
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getCommands().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getCommands", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getDefaultCommands
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getDefaultCommands", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getDefaultCommands";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("getDefaultCommands", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QStringList'
    QStringList cppResult =
        
               self->getDefaultCommands();
        // return type: QStringList
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getDefaultCommands().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getDefaultCommands", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setDefaultCommands
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setDefaultCommands", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setDefaultCommands";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setDefaultCommands", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QStringList */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QStringList
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setDefaultCommands(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setDefaultCommands().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setDefaultCommands", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setCommands
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setCommands", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setCommands";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setCommands", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QStringList */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QStringList
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setCommands(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setCommands().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setCommands", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setScriptFile
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setScriptFile", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setScriptFile";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setScriptFile", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setScriptFile(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setScriptFile(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setScriptFile().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setScriptFile", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getScriptFile
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getScriptFile", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getScriptFile";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("getScriptFile", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getScriptFile();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getScriptFile().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getScriptFile", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getScriptClass
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getScriptClass", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getScriptClass";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("getScriptClass", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getScriptClass();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getScriptClass().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getScriptClass", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setGroup
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setGroup", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setGroup";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setGroup", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setGroup(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setGroup().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setGroup", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getGroup
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getGroup", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getGroup";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("getGroup", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getGroup();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getGroup().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getGroup", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setGroupDefault
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setGroupDefault", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setGroupDefault";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setGroupDefault", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setGroupDefault(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setGroupDefault().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setGroupDefault", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::isGroupDefault
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::isGroupDefault", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::isGroupDefault";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("isGroupDefault", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isGroupDefault();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.isGroupDefault().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::isGroupDefault", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getActions
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getActions", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getActions";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QList < RGuiAction * >'
    QList < RGuiAction * > cppResult =
        RGuiAction::
       getActions();
        // return type: QList < RGuiAction * >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getActions().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getActions", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::triggerByCommand
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::triggerByCommand", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::triggerByCommand";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RGuiAction::
       triggerByCommand(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.triggerByCommand().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::triggerByCommand", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::triggerByShortcut
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::triggerByShortcut", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::triggerByShortcut";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RGuiAction::
       triggerByShortcut(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.triggerByShortcut().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::triggerByShortcut", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getByScriptFile
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getByScriptFile", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getByScriptFile";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'RGuiAction *'
    RGuiAction * cppResult =
        RGuiAction::
       getByScriptFile(a0);
        // return type: RGuiAction *
                // QObject
                result = engine->newQObject(cppResult, QScriptEngine::QtOwnership);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getByScriptFile().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getByScriptFile", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getByClassName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getByClassName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getByClassName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'RGuiAction *'
    RGuiAction * cppResult =
        RGuiAction::
       getByClassName(a0);
        // return type: RGuiAction *
                // QObject
                result = engine->newQObject(cppResult, QScriptEngine::QtOwnership);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getByClassName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getByClassName", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getByCommand
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getByCommand", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getByCommand";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'RGuiAction *'
    RGuiAction * cppResult =
        RGuiAction::
       getByCommand(a0);
        // return type: RGuiAction *
                // QObject
                result = engine->newQObject(cppResult, QScriptEngine::QtOwnership);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getByCommand().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getByCommand", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::triggerByScriptFile
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::triggerByScriptFile", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::triggerByScriptFile";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RGuiAction::
       triggerByScriptFile(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.triggerByScriptFile().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::triggerByScriptFile", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getAvailableCommands
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getAvailableCommands", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getAvailableCommands";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QStringList'
    QStringList cppResult =
        RGuiAction::
       getAvailableCommands();
        // return type: QStringList
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'QStringList'
    QStringList cppResult =
        RGuiAction::
       getAvailableCommands(a0);
        // return type: QStringList
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QStringList'
    QStringList cppResult =
        RGuiAction::
       getAvailableCommands(a0);
        // return type: QStringList
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'QStringList'
    QStringList cppResult =
        RGuiAction::
       getAvailableCommands(a0
        ,
    a1);
        // return type: QStringList
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getAvailableCommands().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getAvailableCommands", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::clear
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::clear", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::clear";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    RGuiAction::
       clear();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.clear().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::clear", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::updateTransactionListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::updateTransactionListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::updateTransactionListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("updateTransactionListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocument * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGuiAction: Argument 0 is not of type RDocument *RDocument *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->updateTransactionListener(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument * */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RTransaction * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocument * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGuiAction: Argument 0 is not of type RDocument *RDocument *.", context);                    
                    }
                
                    // argument is pointer
                    RTransaction * a1 = NULL;

                    a1 = 
                        REcmaHelper::scriptValueTo<RTransaction >(
                            context->argument(1)
                        );
                    
                    if (a1==NULL && 
                        !context->argument(1).isNull()) {
                        return REcmaHelper::throwError("RGuiAction: Argument 1 is not of type RTransaction *RTransaction *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->updateTransactionListener(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.updateTransactionListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::updateTransactionListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::updateSelectionListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::updateSelectionListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::updateSelectionListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("updateSelectionListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGuiAction: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->updateSelectionListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.updateSelectionListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::updateSelectionListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::updateFocus
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::updateFocus", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::updateFocus";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("updateFocus", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGuiAction: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->updateFocus(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.updateFocus().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::updateFocus", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::addArgument
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::addArgument", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::addArgument";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("addArgument", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addArgument(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.addArgument().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::addArgument", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getArguments
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getArguments", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getArguments";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("getArguments", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QStringList'
    QStringList cppResult =
        
               self->getArguments();
        // return type: QStringList
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getArguments().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getArguments", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::clearArguments
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::clearArguments", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::clearArguments";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("clearArguments", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->clearArguments();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.clearArguments().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::clearArguments", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setWidgetNamesStatic
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setWidgetNamesStatic", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setWidgetNamesStatic";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isQObject()
        ) /* type: QAction * */
     && (
            context->argument(1).isArray()
        ) /* type: QStringList */
    
    ){
    // prepare arguments:
    
            // argument isQObject
            QAction *
            a0 =
            qobject_cast<
            QAction *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
                    // argument isArray
                    QStringList
                    a1;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(1),
                        a1
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    RGuiAction::
       setWidgetNamesStatic(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setWidgetNamesStatic().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setWidgetNamesStatic", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getWidgetNamesStatic
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getWidgetNamesStatic", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getWidgetNamesStatic";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isQObject()
        ) /* type: QAction * */
    
    ){
    // prepare arguments:
    
            // argument isQObject
            QAction *
            a0 =
            qobject_cast<
            QAction *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
    // end of arguments

    // call C++ function:
    // return type 'QStringList'
    QStringList cppResult =
        RGuiAction::
       getWidgetNamesStatic(a0);
        // return type: QStringList
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getWidgetNamesStatic().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getWidgetNamesStatic", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::setWidgetNames
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::setWidgetNames", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::setWidgetNames";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("setWidgetNames", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isArray()
        ) /* type: QStringList */
    
    ){
    // prepare arguments:
    
                    // argument isArray
                    QStringList
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setWidgetNames(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.setWidgetNames().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::setWidgetNames", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::getWidgetNames
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::getWidgetNames", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::getWidgetNames";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("getWidgetNames", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QStringList'
    QStringList cppResult =
        
               self->getWidgetNames();
        // return type: QStringList
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.getWidgetNames().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::getWidgetNames", context, engine);
            return result;
        }
         QScriptValue
        REcmaGuiAction::slotTrigger
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGuiAction::slotTrigger", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGuiAction::slotTrigger";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGuiAction* self = 
                        getSelf("slotTrigger", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->slotTrigger();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->slotTrigger(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGuiAction.slotTrigger().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGuiAction::slotTrigger", context, engine);
            return result;
        }
         QScriptValue REcmaGuiAction::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RGuiAction* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RGuiAction(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaGuiAction::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RGuiAction* self = getSelf("RGuiAction", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RGuiAction* REcmaGuiAction::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RGuiAction* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RGuiAction >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RGuiAction.%1(): "
                        "This object is not a RGuiAction").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RGuiAction* REcmaGuiAction::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RGuiAction* selfBase = getSelf(fName, context);
                RGuiAction* self = dynamic_cast<RGuiAction*>(selfBase);
                //return REcmaHelper::scriptValueTo<RGuiAction >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RGuiAction.%1(): "
                    "This object is not a RGuiAction").arg(fName),
                    context);
            }

            return self;
            


        }
         void fromScriptValue(const QScriptValue& value,
        RGuiAction*
        &out) {
            QObject* o = value.toQObject();
            out = qobject_cast<
            RGuiAction*>(o);
        }
     QScriptValue toScriptValue(QScriptEngine *engine,
        RGuiAction*
        const &in){
            QScriptValue s = engine->newQObject(in, QScriptEngine::QtOwnership,
            QScriptEngine::PreferExistingWrapperObject);
            /*
            if(s.isNull()){
               REcmaHelper::throwError("This object is null.", engine->currentContext());
            }
            */
            return s;
        }
    