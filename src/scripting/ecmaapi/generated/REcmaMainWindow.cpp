// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is not copyable.
        
        #include "REcmaMainWindow.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
                #include <QKeyEvent>
            
                #include "RBlockListener.h"
            
                #include "RCoordinateListener.h"
            
                #include "RDocument.h"
            
                #include "RDocumentInterface.h"
            
                #include "REntity.h"
            
                #include "RFocusListener.h"
            
                #include "RGraphicsView.h"
            
                #include "RKeyListener.h"
            
                #include "RLayerListener.h"
            
                #include "RNewDocumentListener.h"
            
                #include "RPaletteListener.h"
            
                #include "RPenListener.h"
            
                #include "RPropertyListener.h"
            
                #include "RPreferencesListener.h"
            
                #include "RSelectionListener.h"
            
                #include "RSnapListener.h"
            
                #include "RTransaction.h"
            
                #include "RUcsListener.h"
            
                #include "RVector.h"
            
                #include "RViewFocusListener.h"
            
                #include "RViewListener.h"
            
            
        // includes for base ecma wrapper classes
        
                  #include "REcmaProgressHandler.h"
                
                  #include "REcmaMessageHandler.h"
                 void REcmaMainWindow::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RMainWindow*) 0)));
        protoCreated = true;
    }

    
        // primary base class RProgressHandler:
        
            QScriptValue dpt = engine.defaultPrototype(
                qMetaTypeId<RProgressHandler*>());

            if (dpt.isValid()) {
                proto->setPrototype(dpt);
            }
          
        /*
        REcmaMessageHandler::initEcma(engine, proto);
          
        */
    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    
        // conversion for base class RProgressHandler
        REcmaHelper::registerFunction(&engine, proto, getRProgressHandler, "getRProgressHandler");
        
        // conversion for base class RMessageHandler
        REcmaHelper::registerFunction(&engine, proto, getRMessageHandler, "getRMessageHandler");
        

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

        // properties of secondary base class RMessageHandler:
        

        // methods of secondary base class RMessageHandler:
        

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, getDocument, "getDocument");
            
            REcmaHelper::registerFunction(&engine, proto, disable, "disable");
            
            REcmaHelper::registerFunction(&engine, proto, enable, "enable");
            
            REcmaHelper::registerFunction(&engine, proto, getDocumentInterface, "getDocumentInterface");
            
            REcmaHelper::registerFunction(&engine, proto, notifyListeners, "notifyListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addCoordinateListener, "addCoordinateListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeCoordinateListener, "removeCoordinateListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyCoordinateListeners, "notifyCoordinateListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addSelectionListener, "addSelectionListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeSelectionListener, "removeSelectionListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifySelectionListeners, "notifySelectionListeners");
            
            REcmaHelper::registerFunction(&engine, proto, postSelectionChangedEvent, "postSelectionChangedEvent");
            
            REcmaHelper::registerFunction(&engine, proto, postTransactionEvent, "postTransactionEvent");
            
            REcmaHelper::registerFunction(&engine, proto, postCloseEvent, "postCloseEvent");
            
            REcmaHelper::registerFunction(&engine, proto, postPropertyEvent, "postPropertyEvent");
            
            REcmaHelper::registerFunction(&engine, proto, addPropertyListener, "addPropertyListener");
            
            REcmaHelper::registerFunction(&engine, proto, removePropertyListener, "removePropertyListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyPropertyListeners, "notifyPropertyListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addExportListener, "addExportListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeExportListener, "removeExportListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyExportListenersPre, "notifyExportListenersPre");
            
            REcmaHelper::registerFunction(&engine, proto, notifyExportListenersPost, "notifyExportListenersPost");
            
            REcmaHelper::registerFunction(&engine, proto, notifyExportListenersEnd, "notifyExportListenersEnd");
            
            REcmaHelper::registerFunction(&engine, proto, addEntityExportListener, "addEntityExportListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeEntityExportListener, "removeEntityExportListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyEntityExportListeners, "notifyEntityExportListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addImportListener, "addImportListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeImportListener, "removeImportListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyImportListenersPre, "notifyImportListenersPre");
            
            REcmaHelper::registerFunction(&engine, proto, notifyImportListenersPost, "notifyImportListenersPost");
            
            REcmaHelper::registerFunction(&engine, proto, addTransactionListener, "addTransactionListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeTransactionListener, "removeTransactionListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyTransactionListeners, "notifyTransactionListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addInterTransactionListener, "addInterTransactionListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeInterTransactionListener, "removeInterTransactionListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyInterTransactionListeners, "notifyInterTransactionListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addNewDocumentListener, "addNewDocumentListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeNewDocumentListener, "removeNewDocumentListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyNewDocumentListeners, "notifyNewDocumentListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addSnapListener, "addSnapListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeSnapListener, "removeSnapListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifySnapListeners, "notifySnapListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addFocusListener, "addFocusListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeFocusListener, "removeFocusListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyFocusListeners, "notifyFocusListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addKeyListener, "addKeyListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeKeyListener, "removeKeyListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyKeyListeners, "notifyKeyListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addViewFocusListener, "addViewFocusListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeViewFocusListener, "removeViewFocusListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyViewFocusListeners, "notifyViewFocusListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addPreferencesListener, "addPreferencesListener");
            
            REcmaHelper::registerFunction(&engine, proto, removePreferencesListener, "removePreferencesListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyPreferencesListeners, "notifyPreferencesListeners");
            
            REcmaHelper::registerFunction(&engine, proto, propertyChangeEvent, "propertyChangeEvent");
            
            REcmaHelper::registerFunction(&engine, proto, addUcsListener, "addUcsListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeUcsListener, "removeUcsListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyUcsListeners, "notifyUcsListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addLayerListener, "addLayerListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeLayerListener, "removeLayerListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyLayerListeners, "notifyLayerListeners");
            
            REcmaHelper::registerFunction(&engine, proto, notifyLayerListenersCurrentLayer, "notifyLayerListenersCurrentLayer");
            
            REcmaHelper::registerFunction(&engine, proto, addBlockListener, "addBlockListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeBlockListener, "removeBlockListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyBlockListeners, "notifyBlockListeners");
            
            REcmaHelper::registerFunction(&engine, proto, notifyBlockListenersCurrentBlock, "notifyBlockListenersCurrentBlock");
            
            REcmaHelper::registerFunction(&engine, proto, addViewListener, "addViewListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeViewListener, "removeViewListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyViewListeners, "notifyViewListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addPenListener, "addPenListener");
            
            REcmaHelper::registerFunction(&engine, proto, removePenListener, "removePenListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyPenListeners, "notifyPenListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addPaletteListener, "addPaletteListener");
            
            REcmaHelper::registerFunction(&engine, proto, removePaletteListener, "removePaletteListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyPaletteListeners, "notifyPaletteListeners");
            
            REcmaHelper::registerFunction(&engine, proto, ucsSetEvent, "ucsSetEvent");
            
            REcmaHelper::registerFunction(&engine, proto, escapeEvent, "escapeEvent");
            
            REcmaHelper::registerFunction(&engine, proto, setGraphicsViewCursor, "setGraphicsViewCursor");
            
            REcmaHelper::registerFunction(&engine, proto, getWidth, "getWidth");
            
            REcmaHelper::registerFunction(&engine, proto, getHeight, "getHeight");
            
            REcmaHelper::registerFunction(&engine, proto, getPositionX, "getPositionX");
            
            REcmaHelper::registerFunction(&engine, proto, getPositionY, "getPositionY");
            
            REcmaHelper::registerFunction(&engine, proto, resize, "resize");
            
            REcmaHelper::registerFunction(&engine, proto, move, "move");
            
            REcmaHelper::registerFunction(&engine, proto, quit, "quit");
            
            REcmaHelper::registerFunction(&engine, proto, getChildWidget, "getChildWidget");
            
            REcmaHelper::registerFunction(&engine, proto, handleUserMessage, "handleUserMessage");
            
            REcmaHelper::registerFunction(&engine, proto, handleUserInfo, "handleUserInfo");
            
            REcmaHelper::registerFunction(&engine, proto, handleUserWarning, "handleUserWarning");
            
            REcmaHelper::registerFunction(&engine, proto, handleUserCommand, "handleUserCommand");
            
            REcmaHelper::registerFunction(&engine, proto, setCommandPrompt, "setCommandPrompt");
            
            REcmaHelper::registerFunction(&engine, proto, setLeftMouseTip, "setLeftMouseTip");
            
            REcmaHelper::registerFunction(&engine, proto, setRightMouseTip, "setRightMouseTip");
            
            REcmaHelper::registerFunction(&engine, proto, eval, "eval");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RMainWindow*>(), *proto);

        
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    
            REcmaHelper::registerFunction(&engine, &ctor, getMainWindow, "getMainWindow");
            
            REcmaHelper::registerFunction(&engine, &ctor, hasMainWindow, "hasMainWindow");
            
            REcmaHelper::registerFunction(&engine, &ctor, installMessageHandler, "installMessageHandler");
            
            REcmaHelper::registerFunction(&engine, &ctor, getDocumentInterfaceStatic, "getDocumentInterfaceStatic");
            

    // static properties:
    

    // enum values:
    

    // enum conversions:
    
        
    // init class:
    engine.globalObject().setProperty("RMainWindow",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaMainWindow::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
           return REcmaHelper::throwError("Abstract class RMainWindow: Cannot be constructed.",
               context); 
    }
    

    // conversion functions for base classes:
     QScriptValue REcmaMainWindow::getRProgressHandler(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RProgressHandler* cppResult =
                    qscriptvalue_cast<RMainWindow*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
             QScriptValue REcmaMainWindow::getRMessageHandler(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RMessageHandler* cppResult =
                    qscriptvalue_cast<RMainWindow*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
            

    // returns class name:
     QScriptValue REcmaMainWindow::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RMainWindow"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaMainWindow::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        
        list.append("RProgressHandler");
    
        list.append("RMessageHandler");
    

        return qScriptValueFromSequence(engine, list);
    }
    
        // properties of secondary base class RMessageHandler:
        

        // methods of secondary base class RMessageHandler:
        

    // properties:
    

    // public methods:
     QScriptValue
        REcmaMainWindow::getMainWindow
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::getMainWindow", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::getMainWindow";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RMainWindow *'
    RMainWindow * cppResult =
        RMainWindow::
       getMainWindow();
        // return type: RMainWindow *
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.getMainWindow().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::getMainWindow", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::hasMainWindow
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::hasMainWindow", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::hasMainWindow";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RMainWindow::
       hasMainWindow();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.hasMainWindow().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::hasMainWindow", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::installMessageHandler
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::installMessageHandler", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::installMessageHandler";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    RMainWindow::
       installMessageHandler();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.installMessageHandler().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::installMessageHandler", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::getDocument
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::getDocument", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::getDocument";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("getDocument", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RDocument *'
    RDocument * cppResult =
        
               self->getDocument();
        // return type: RDocument *
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.getDocument().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::getDocument", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::disable
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::disable", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::disable";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("disable", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->disable();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.disable().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::disable", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::enable
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::enable", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::enable";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("enable", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->enable();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.enable().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::enable", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::getDocumentInterface
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::getDocumentInterface", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::getDocumentInterface";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("getDocumentInterface", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RDocumentInterface *'
    RDocumentInterface * cppResult =
        
               self->getDocumentInterface();
        // return type: RDocumentInterface *
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.getDocumentInterface().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::getDocumentInterface", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::getDocumentInterfaceStatic
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::getDocumentInterfaceStatic", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::getDocumentInterfaceStatic";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RDocumentInterface *'
    RDocumentInterface * cppResult =
        RMainWindow::
       getDocumentInterfaceStatic();
        // return type: RDocumentInterface *
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.getDocumentInterfaceStatic().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::getDocumentInterfaceStatic", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyListeners();
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::addCoordinateListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::addCoordinateListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::addCoordinateListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("addCoordinateListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RCoordinateListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RCoordinateListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RCoordinateListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RCoordinateListener *RCoordinateListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addCoordinateListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.addCoordinateListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::addCoordinateListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::removeCoordinateListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::removeCoordinateListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::removeCoordinateListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("removeCoordinateListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RCoordinateListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RCoordinateListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RCoordinateListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RCoordinateListener *RCoordinateListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeCoordinateListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.removeCoordinateListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::removeCoordinateListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyCoordinateListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyCoordinateListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyCoordinateListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyCoordinateListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyCoordinateListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyCoordinateListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyCoordinateListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::addSelectionListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::addSelectionListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::addSelectionListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("addSelectionListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RSelectionListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RSelectionListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RSelectionListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RSelectionListener *RSelectionListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addSelectionListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.addSelectionListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::addSelectionListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::removeSelectionListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::removeSelectionListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::removeSelectionListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("removeSelectionListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RSelectionListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RSelectionListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RSelectionListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RSelectionListener *RSelectionListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeSelectionListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.removeSelectionListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::removeSelectionListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifySelectionListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifySelectionListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifySelectionListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifySelectionListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifySelectionListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifySelectionListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifySelectionListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::postSelectionChangedEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::postSelectionChangedEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::postSelectionChangedEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("postSelectionChangedEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->postSelectionChangedEvent();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.postSelectionChangedEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::postSelectionChangedEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::postTransactionEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::postTransactionEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::postTransactionEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("postTransactionEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RTransaction */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RTransaction*
                    ap0 =
                    qscriptvalue_cast<
                    RTransaction*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RTransaction.",
                               context);                    
                    }
                    RTransaction 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->postTransactionEvent(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RTransaction */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RTransaction*
                    ap0 =
                    qscriptvalue_cast<
                    RTransaction*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RTransaction.",
                               context);                    
                    }
                    RTransaction 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->postTransactionEvent(a0
        ,
    a1);
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RTransaction */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
     && (
            context->argument(2).isNumber()
        ) /* type: RS::EntityType */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RTransaction*
                    ap0 =
                    qscriptvalue_cast<
                    RTransaction*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RTransaction.",
                               context);                    
                    }
                    RTransaction 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
                    // argument isStandardType
                    RS::EntityType
                    a2 =
                    (RS::EntityType)
                    (int)
                    context->argument( 2 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->postTransactionEvent(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.postTransactionEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::postTransactionEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::postCloseEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::postCloseEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::postCloseEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("postCloseEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->postCloseEvent();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.postCloseEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::postCloseEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::postPropertyEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::postPropertyEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::postPropertyEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("postPropertyEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyTypeId */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNumber() || 
            context->argument(1).isString() || 
            context->argument(1).isBool() || 
            context->argument(1).isArray() || 
            context->argument(1).isNull() || 
            context->argument(1).isUndefined()
        ) /* type: QVariant */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyTypeId*
                    ap0 =
                    qscriptvalue_cast<
                    RPropertyTypeId*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RPropertyTypeId.",
                               context);                    
                    }
                    RPropertyTypeId 
                    a0 = 
                    *ap0;
                
                    // argument isCopyable or pointer
                    QVariant
                    a1 =
                    qscriptvalue_cast<
                    QVariant
                        >(
                        context->argument(
                        1
                        )
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->postPropertyEvent(a0
        ,
    a1);
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyTypeId */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNumber() || 
            context->argument(1).isString() || 
            context->argument(1).isBool() || 
            context->argument(1).isArray() || 
            context->argument(1).isNull() || 
            context->argument(1).isUndefined()
        ) /* type: QVariant */
     && (
            context->argument(2).isNumber()
        ) /* type: RS::EntityType */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyTypeId*
                    ap0 =
                    qscriptvalue_cast<
                    RPropertyTypeId*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RPropertyTypeId.",
                               context);                    
                    }
                    RPropertyTypeId 
                    a0 = 
                    *ap0;
                
                    // argument isCopyable or pointer
                    QVariant
                    a1 =
                    qscriptvalue_cast<
                    QVariant
                        >(
                        context->argument(
                        1
                        )
                    );
                
                    // argument isStandardType
                    RS::EntityType
                    a2 =
                    (RS::EntityType)
                    (int)
                    context->argument( 2 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->postPropertyEvent(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.postPropertyEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::postPropertyEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::addPropertyListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::addPropertyListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::addPropertyListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("addPropertyListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RPropertyListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RPropertyListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RPropertyListener *RPropertyListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addPropertyListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.addPropertyListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::addPropertyListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::removePropertyListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::removePropertyListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::removePropertyListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("removePropertyListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RPropertyListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RPropertyListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RPropertyListener *RPropertyListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removePropertyListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.removePropertyListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::removePropertyListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyPropertyListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyPropertyListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyPropertyListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyPropertyListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocument * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocument *RDocument *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyPropertyListeners(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument * */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocument * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocument *RDocument *.", context);                    
                    }
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyPropertyListeners(a0
        ,
    a1);
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument * */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
     && (
            context->argument(2).isNumber()
        ) /* type: RS::EntityType */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocument * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocument *RDocument *.", context);                    
                    }
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
                    // argument isStandardType
                    RS::EntityType
                    a2 =
                    (RS::EntityType)
                    (int)
                    context->argument( 2 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyPropertyListeners(a0
        ,
    a1
        ,
    a2);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: REntity */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RDocument*
                    ap0 =
                    qscriptvalue_cast<
                    RDocument*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocument*.",
                               context);                    
                    }
                    RDocument& a0 = *ap0;
                
                    // argument is reference
                    REntity*
                    ap1 =
                    qscriptvalue_cast<
                    REntity*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if( ap1 == NULL ){
                           return REcmaHelper::throwError("RMainWindow: Argument 1 is not of type REntity*.",
                               context);                    
                    }
                    REntity& a1 = *ap1;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyPropertyListeners(a0
        ,
    a1);
    } else


        
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyPropertyListeners();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyPropertyListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyPropertyListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::addExportListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::addExportListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::addExportListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("addExportListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RExportListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RExportListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RExportListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RExportListener *RExportListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addExportListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.addExportListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::addExportListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::removeExportListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::removeExportListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::removeExportListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("removeExportListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RExportListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RExportListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RExportListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RExportListener *RExportListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeExportListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.removeExportListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::removeExportListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyExportListenersPre
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyExportListenersPre", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyExportListenersPre";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyExportListenersPre", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyExportListenersPre(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyExportListenersPre().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyExportListenersPre", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyExportListenersPost
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyExportListenersPost", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyExportListenersPost";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyExportListenersPost", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyExportListenersPost(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyExportListenersPost().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyExportListenersPost", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyExportListenersEnd
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyExportListenersEnd", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyExportListenersEnd";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyExportListenersEnd", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RExporter * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RExporter * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RExporter >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RExporter *RExporter *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyExportListenersEnd(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyExportListenersEnd().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyExportListenersEnd", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::addEntityExportListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::addEntityExportListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::addEntityExportListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("addEntityExportListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: REntityExportListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    REntityExportListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<REntityExportListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type REntityExportListener *REntityExportListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addEntityExportListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.addEntityExportListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::addEntityExportListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::removeEntityExportListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::removeEntityExportListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::removeEntityExportListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("removeEntityExportListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: REntityExportListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    REntityExportListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<REntityExportListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type REntityExportListener *REntityExportListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeEntityExportListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.removeEntityExportListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::removeEntityExportListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyEntityExportListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyEntityExportListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyEntityExportListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyEntityExportListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RExporter * */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: REntity * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RExporter * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RExporter >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RExporter *RExporter *.", context);                    
                    }
                
                    // argument is pointer
                    REntity * a1 = NULL;

                    a1 = 
                        REcmaHelper::scriptValueTo<REntity >(
                            context->argument(1)
                        );
                    
                    if (a1==NULL && 
                        !context->argument(1).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 1 is not of type REntity *REntity *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyEntityExportListeners(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyEntityExportListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyEntityExportListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::addImportListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::addImportListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::addImportListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("addImportListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RImportListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RImportListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RImportListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RImportListener *RImportListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addImportListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.addImportListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::addImportListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::removeImportListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::removeImportListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::removeImportListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("removeImportListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RImportListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RImportListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RImportListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RImportListener *RImportListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeImportListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.removeImportListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::removeImportListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyImportListenersPre
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyImportListenersPre", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyImportListenersPre";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyImportListenersPre", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyImportListenersPre(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyImportListenersPre().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyImportListenersPre", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyImportListenersPost
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyImportListenersPost", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyImportListenersPost";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyImportListenersPost", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyImportListenersPost(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyImportListenersPost().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyImportListenersPost", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::addTransactionListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::addTransactionListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::addTransactionListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("addTransactionListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RTransactionListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RTransactionListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RTransactionListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RTransactionListener *RTransactionListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addTransactionListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.addTransactionListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::addTransactionListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::removeTransactionListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::removeTransactionListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::removeTransactionListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("removeTransactionListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RTransactionListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RTransactionListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RTransactionListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RTransactionListener *RTransactionListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeTransactionListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.removeTransactionListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::removeTransactionListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyTransactionListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyTransactionListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyTransactionListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyTransactionListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocument * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocument *RDocument *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyTransactionListeners(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument * */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RTransaction * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocument * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocument *RDocument *.", context);                    
                    }
                
                    // argument is pointer
                    RTransaction * a1 = NULL;

                    a1 = 
                        REcmaHelper::scriptValueTo<RTransaction >(
                            context->argument(1)
                        );
                    
                    if (a1==NULL && 
                        !context->argument(1).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 1 is not of type RTransaction *RTransaction *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyTransactionListeners(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyTransactionListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyTransactionListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::addInterTransactionListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::addInterTransactionListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::addInterTransactionListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("addInterTransactionListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RInterTransactionListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RInterTransactionListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RInterTransactionListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RInterTransactionListener *RInterTransactionListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addInterTransactionListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.addInterTransactionListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::addInterTransactionListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::removeInterTransactionListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::removeInterTransactionListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::removeInterTransactionListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("removeInterTransactionListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RInterTransactionListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RInterTransactionListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RInterTransactionListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RInterTransactionListener *RInterTransactionListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeInterTransactionListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.removeInterTransactionListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::removeInterTransactionListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyInterTransactionListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyInterTransactionListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyInterTransactionListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyInterTransactionListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocument * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocument *RDocument *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyInterTransactionListeners(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument * */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RTransaction * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocument * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocument *RDocument *.", context);                    
                    }
                
                    // argument is pointer
                    RTransaction * a1 = NULL;

                    a1 = 
                        REcmaHelper::scriptValueTo<RTransaction >(
                            context->argument(1)
                        );
                    
                    if (a1==NULL && 
                        !context->argument(1).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 1 is not of type RTransaction *RTransaction *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyInterTransactionListeners(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyInterTransactionListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyInterTransactionListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::addNewDocumentListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::addNewDocumentListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::addNewDocumentListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("addNewDocumentListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RNewDocumentListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RNewDocumentListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RNewDocumentListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RNewDocumentListener *RNewDocumentListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addNewDocumentListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.addNewDocumentListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::addNewDocumentListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::removeNewDocumentListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::removeNewDocumentListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::removeNewDocumentListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("removeNewDocumentListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RNewDocumentListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RNewDocumentListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RNewDocumentListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RNewDocumentListener *RNewDocumentListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeNewDocumentListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.removeNewDocumentListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::removeNewDocumentListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyNewDocumentListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyNewDocumentListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyNewDocumentListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyNewDocumentListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument * */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RTransaction * */
     && (
            context->argument(2).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocument * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocument *RDocument *.", context);                    
                    }
                
                    // argument is pointer
                    RTransaction * a1 = NULL;

                    a1 = 
                        REcmaHelper::scriptValueTo<RTransaction >(
                            context->argument(1)
                        );
                    
                    if (a1==NULL && 
                        !context->argument(1).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 1 is not of type RTransaction *RTransaction *.", context);                    
                    }
                
                    // argument isStandardType
                    bool
                    a2 =
                    (bool)
                    
                    context->argument( 2 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyNewDocumentListeners(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyNewDocumentListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyNewDocumentListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::addSnapListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::addSnapListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::addSnapListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("addSnapListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RSnapListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RSnapListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RSnapListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RSnapListener *RSnapListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addSnapListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.addSnapListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::addSnapListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::removeSnapListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::removeSnapListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::removeSnapListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("removeSnapListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RSnapListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RSnapListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RSnapListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RSnapListener *RSnapListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeSnapListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.removeSnapListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::removeSnapListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifySnapListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifySnapListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifySnapListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifySnapListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifySnapListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifySnapListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifySnapListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::addFocusListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::addFocusListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::addFocusListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("addFocusListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RFocusListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RFocusListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RFocusListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RFocusListener *RFocusListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addFocusListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.addFocusListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::addFocusListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::removeFocusListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::removeFocusListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::removeFocusListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("removeFocusListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RFocusListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RFocusListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RFocusListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RFocusListener *RFocusListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeFocusListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.removeFocusListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::removeFocusListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyFocusListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyFocusListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyFocusListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyFocusListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyFocusListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyFocusListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyFocusListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::addKeyListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::addKeyListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::addKeyListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("addKeyListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RKeyListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RKeyListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RKeyListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RKeyListener *RKeyListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addKeyListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.addKeyListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::addKeyListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::removeKeyListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::removeKeyListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::removeKeyListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("removeKeyListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RKeyListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RKeyListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RKeyListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RKeyListener *RKeyListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeKeyListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.removeKeyListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::removeKeyListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyKeyListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyKeyListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyKeyListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyKeyListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QKeyEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QKeyEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QKeyEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type QKeyEvent *QKeyEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyKeyListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyKeyListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyKeyListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::addViewFocusListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::addViewFocusListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::addViewFocusListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("addViewFocusListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RViewFocusListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RViewFocusListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RViewFocusListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RViewFocusListener *RViewFocusListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addViewFocusListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.addViewFocusListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::addViewFocusListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::removeViewFocusListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::removeViewFocusListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::removeViewFocusListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("removeViewFocusListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RViewFocusListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RViewFocusListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RViewFocusListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RViewFocusListener *RViewFocusListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeViewFocusListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.removeViewFocusListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::removeViewFocusListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyViewFocusListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyViewFocusListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyViewFocusListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyViewFocusListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RGraphicsView * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RGraphicsView * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RGraphicsView >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RGraphicsView *RGraphicsView *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyViewFocusListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyViewFocusListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyViewFocusListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::addPreferencesListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::addPreferencesListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::addPreferencesListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("addPreferencesListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPreferencesListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RPreferencesListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RPreferencesListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RPreferencesListener *RPreferencesListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addPreferencesListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.addPreferencesListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::addPreferencesListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::removePreferencesListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::removePreferencesListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::removePreferencesListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("removePreferencesListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPreferencesListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RPreferencesListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RPreferencesListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RPreferencesListener *RPreferencesListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removePreferencesListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.removePreferencesListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::removePreferencesListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyPreferencesListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyPreferencesListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyPreferencesListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyPreferencesListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyPreferencesListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyPreferencesListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyPreferencesListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::propertyChangeEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::propertyChangeEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::propertyChangeEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("propertyChangeEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyEvent */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RPropertyEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RPropertyEvent.",
                               context);                    
                    }
                    RPropertyEvent 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->propertyChangeEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.propertyChangeEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::propertyChangeEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::addUcsListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::addUcsListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::addUcsListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("addUcsListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RUcsListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RUcsListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RUcsListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RUcsListener *RUcsListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addUcsListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.addUcsListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::addUcsListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::removeUcsListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::removeUcsListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::removeUcsListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("removeUcsListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RUcsListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RUcsListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RUcsListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RUcsListener *RUcsListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeUcsListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.removeUcsListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::removeUcsListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyUcsListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyUcsListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyUcsListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyUcsListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyUcsListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyUcsListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyUcsListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::addLayerListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::addLayerListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::addLayerListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("addLayerListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RLayerListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RLayerListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RLayerListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RLayerListener *RLayerListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addLayerListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.addLayerListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::addLayerListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::removeLayerListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::removeLayerListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::removeLayerListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("removeLayerListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RLayerListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RLayerListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RLayerListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RLayerListener *RLayerListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeLayerListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.removeLayerListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::removeLayerListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyLayerListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyLayerListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyLayerListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyLayerListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
     && (
            context->argument(1).isArray()
        ) /* type: QList < RLayer::Id > */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
                    // argument isArray
                    QList < RLayer::Id >
                    a1;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(1),
                        a1
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyLayerListeners(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyLayerListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyLayerListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyLayerListenersCurrentLayer
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyLayerListenersCurrentLayer", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyLayerListenersCurrentLayer";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyLayerListenersCurrentLayer", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
     && (
            context->argument(1).isNumber()
        ) /* type: RLayer::Id */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
                    // argument isStandardType
                    RLayer::Id
                    a1 =
                    (RLayer::Id)
                    (int)
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyLayerListenersCurrentLayer(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyLayerListenersCurrentLayer().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyLayerListenersCurrentLayer", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::addBlockListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::addBlockListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::addBlockListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("addBlockListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RBlockListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RBlockListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RBlockListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RBlockListener *RBlockListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addBlockListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.addBlockListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::addBlockListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::removeBlockListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::removeBlockListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::removeBlockListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("removeBlockListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RBlockListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RBlockListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RBlockListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RBlockListener *RBlockListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeBlockListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.removeBlockListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::removeBlockListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyBlockListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyBlockListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyBlockListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyBlockListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyBlockListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyBlockListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyBlockListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyBlockListenersCurrentBlock
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyBlockListenersCurrentBlock", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyBlockListenersCurrentBlock";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyBlockListenersCurrentBlock", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyBlockListenersCurrentBlock(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyBlockListenersCurrentBlock().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyBlockListenersCurrentBlock", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::addViewListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::addViewListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::addViewListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("addViewListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RViewListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RViewListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RViewListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RViewListener *RViewListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addViewListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.addViewListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::addViewListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::removeViewListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::removeViewListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::removeViewListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("removeViewListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RViewListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RViewListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RViewListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RViewListener *RViewListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeViewListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.removeViewListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::removeViewListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyViewListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyViewListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyViewListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyViewListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyViewListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyViewListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyViewListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::addPenListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::addPenListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::addPenListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("addPenListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPenListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RPenListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RPenListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RPenListener *RPenListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addPenListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.addPenListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::addPenListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::removePenListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::removePenListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::removePenListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("removePenListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPenListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RPenListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RPenListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RPenListener *RPenListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removePenListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.removePenListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::removePenListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyPenListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyPenListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyPenListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyPenListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyPenListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyPenListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyPenListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::addPaletteListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::addPaletteListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::addPaletteListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("addPaletteListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPaletteListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RPaletteListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RPaletteListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RPaletteListener *RPaletteListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addPaletteListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.addPaletteListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::addPaletteListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::removePaletteListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::removePaletteListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::removePaletteListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("removePaletteListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPaletteListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RPaletteListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RPaletteListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RPaletteListener *RPaletteListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removePaletteListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.removePaletteListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::removePaletteListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::notifyPaletteListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::notifyPaletteListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::notifyPaletteListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("notifyPaletteListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyPaletteListeners();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.notifyPaletteListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::notifyPaletteListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::ucsSetEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::ucsSetEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::ucsSetEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("ucsSetEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->ucsSetEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.ucsSetEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::ucsSetEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::escapeEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::escapeEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::escapeEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("escapeEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->escapeEvent();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.escapeEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::escapeEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::setGraphicsViewCursor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::setGraphicsViewCursor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::setGraphicsViewCursor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("setGraphicsViewCursor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QCursor */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QCursor*
                    ap0 =
                    qscriptvalue_cast<
                    QCursor*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type QCursor*.",
                               context);                    
                    }
                    QCursor& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setGraphicsViewCursor(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.setGraphicsViewCursor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::setGraphicsViewCursor", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::getWidth
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::getWidth", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::getWidth";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("getWidth", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getWidth();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.getWidth().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::getWidth", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::getHeight
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::getHeight", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::getHeight";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("getHeight", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getHeight();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.getHeight().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::getHeight", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::getPositionX
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::getPositionX", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::getPositionX";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("getPositionX", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getPositionX();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.getPositionX().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::getPositionX", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::getPositionY
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::getPositionY", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::getPositionY";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("getPositionY", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getPositionY();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.getPositionY().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::getPositionY", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::resize
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::resize", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::resize";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("resize", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: int */
     && (
            context->argument(1).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->resize(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.resize().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::resize", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::move
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::move", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::move";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("move", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: int */
     && (
            context->argument(1).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->move(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.move().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::move", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::quit
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::quit", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::quit";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("quit", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->quit();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.quit().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::quit", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::getChildWidget
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::getChildWidget", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::getChildWidget";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("getChildWidget", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QWidget *'
    QWidget * cppResult =
        
               self->getChildWidget(a0);
        // return type: QWidget *
                // QObject
                result = engine->newQObject(cppResult, QScriptEngine::QtOwnership);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.getChildWidget().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::getChildWidget", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::handleUserMessage
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::handleUserMessage", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::handleUserMessage";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("handleUserMessage", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleUserMessage(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleUserMessage(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.handleUserMessage().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::handleUserMessage", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::handleUserInfo
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::handleUserInfo", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::handleUserInfo";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("handleUserInfo", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleUserInfo(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleUserInfo(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.handleUserInfo().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::handleUserInfo", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::handleUserWarning
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::handleUserWarning", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::handleUserWarning";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("handleUserWarning", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleUserWarning(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleUserWarning(a0
        ,
    a1);
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
     && (
            context->argument(2).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
                    // argument isStandardType
                    bool
                    a2 =
                    (bool)
                    
                    context->argument( 2 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleUserWarning(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.handleUserWarning().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::handleUserWarning", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::handleUserCommand
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::handleUserCommand", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::handleUserCommand";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("handleUserCommand", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleUserCommand(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleUserCommand(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.handleUserCommand().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::handleUserCommand", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::setCommandPrompt
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::setCommandPrompt", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::setCommandPrompt";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("setCommandPrompt", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setCommandPrompt();
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setCommandPrompt(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.setCommandPrompt().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::setCommandPrompt", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::setLeftMouseTip
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::setLeftMouseTip", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::setLeftMouseTip";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("setLeftMouseTip", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setLeftMouseTip();
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setLeftMouseTip(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.setLeftMouseTip().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::setLeftMouseTip", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::setRightMouseTip
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::setRightMouseTip", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::setRightMouseTip";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("setRightMouseTip", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setRightMouseTip();
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setRightMouseTip(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.setRightMouseTip().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::setRightMouseTip", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindow::eval
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindow::eval", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindow::eval";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindow* self = 
                        getSelf("eval", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    QString
                    a1 =
                    (QString)
                    
                    context->argument( 1 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QVariant'
    QVariant cppResult =
        
               self->eval(a0
        ,
    a1);
        // return type: QVariant
                // QVariant:
                result = REcmaHelper::toScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindow.eval().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindow::eval", context, engine);
            return result;
        }
         QScriptValue REcmaMainWindow::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RMainWindow* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RMainWindow(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaMainWindow::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RMainWindow* self = getSelf("RMainWindow", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RMainWindow* REcmaMainWindow::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RMainWindow* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RMainWindow >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RMainWindow.%1(): "
                        "This object is not a RMainWindow").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RMainWindow* REcmaMainWindow::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RMainWindow* selfBase = getSelf(fName, context);
                RMainWindow* self = dynamic_cast<RMainWindow*>(selfBase);
                //return REcmaHelper::scriptValueTo<RMainWindow >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RMainWindow.%1(): "
                    "This object is not a RMainWindow").arg(fName),
                    context);
            }

            return self;
            


        }
        