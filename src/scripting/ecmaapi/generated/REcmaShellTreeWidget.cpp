


	// ***** AUTOGENERATED CODE, DO NOT EDIT *****
    
        #include "REcmaShellTreeWidget.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
            
        // includes for base ecma wrapper classes
        

            #define QTSCRIPT_IS_GENERATED_FUNCTION(fun) ((fun.data().toUInt32() & 0xFFFF0000) == 0xBABE0000)
            #define QTSCRIPT_IS_FUNCTION_IN_CALL(fun) ((fun.data().toUInt32() & 0x0000F000) == 0x0000B000)

        
    // Destructor:
    REcmaShellTreeWidget::~REcmaShellTreeWidget() {}
        RTreeWidget* REcmaShellTreeWidget::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RTreeWidget* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RTreeWidget >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RTreeWidget.%1(): "
                        "This object is not a RTreeWidget").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        REcmaShellTreeWidget* REcmaShellTreeWidget::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RTreeWidget* selfBase = getSelf(fName, context);
                REcmaShellTreeWidget* self = dynamic_cast<REcmaShellTreeWidget*>(selfBase);
                //return REcmaHelper::scriptValueTo<REcmaShellTreeWidget >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RTreeWidget.%1(): "
                    "This object is not a RTreeWidget").arg(fName),
                    context);
            }

            return self;
            


        }
        
    
    
    // Constructors:
    
      REcmaShellTreeWidget::REcmaShellTreeWidget(
                QWidget * parent
            ) : RTreeWidget(
                parent
                ) {
            }
        
    
    
      void REcmaShellTreeWidget::setSelectableColumn(
                int c
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellTreeWidget::setSelectableColumn", engine);
                QScriptValue _q_function = __qtscript_self.property("setSelectableColumn");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RTreeWidget::setSelectableColumn";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RTreeWidget::setSelectableColumn(
                            c
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellTreeWidget::setSelectableColumn", engine);

                        
                } else {
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: int, copyable: true
        << qScriptValueFromValue(engine, 

        c
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellTreeWidget::setSelectableColumn", engine);

                    
                }
            }
        
    
    
      QModelIndex REcmaShellTreeWidget::getIndex(
                QTreeWidgetItem * item, int column
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellTreeWidget::getIndex", engine);
                QScriptValue _q_function = __qtscript_self.property("getIndex");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=2*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RTreeWidget::getIndex";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        QModelIndex ret =
                        RTreeWidget::getIndex(
                            item, column
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellTreeWidget::getIndex", engine);

                        
                          return ret;
                        
                } else {
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    QModelIndex res = qscriptvalue_cast< 
                        QModelIndex
                      >(
                    
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QTreeWidgetItem *, copyable: false
        << qScriptValueFromValue(engine, 

        item
        )
      



    // type: int, copyable: true
        << qScriptValueFromValue(engine, 

        column
        )
      
                            )
                        
                      )
                    
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellTreeWidget::getIndex", engine);

                    
                            return res;
                          
                }
            }
        
    
    
      void REcmaShellTreeWidget::contextMenuEvent(
                QContextMenuEvent * e
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellTreeWidget::contextMenuEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("contextMenuEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RTreeWidget::contextMenuEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RTreeWidget::contextMenuEvent(
                            e
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellTreeWidget::contextMenuEvent", engine);

                        
                } else {
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RTreeWidget*>());
                        REcmaHelper::registerFunction(engine, &proto, contextMenuEvent, "contextMenuEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QContextMenuEvent *, copyable: false
        << qScriptValueFromValue(engine, 

        e
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellTreeWidget::contextMenuEvent", engine);

                    
                }
            }
        
    
    
      void REcmaShellTreeWidget::mousePressEvent(
                QMouseEvent * e
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellTreeWidget::mousePressEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("mousePressEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RTreeWidget::mousePressEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RTreeWidget::mousePressEvent(
                            e
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellTreeWidget::mousePressEvent", engine);

                        
                } else {
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RTreeWidget*>());
                        REcmaHelper::registerFunction(engine, &proto, mousePressEvent, "mousePressEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QMouseEvent *, copyable: true
        << qScriptValueFromValue(engine, 

        e
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellTreeWidget::mousePressEvent", engine);

                    
                }
            }
        
    
    
      void REcmaShellTreeWidget::mouseReleaseEvent(
                QMouseEvent * e
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellTreeWidget::mouseReleaseEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("mouseReleaseEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RTreeWidget::mouseReleaseEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RTreeWidget::mouseReleaseEvent(
                            e
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellTreeWidget::mouseReleaseEvent", engine);

                        
                } else {
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RTreeWidget*>());
                        REcmaHelper::registerFunction(engine, &proto, mouseReleaseEvent, "mouseReleaseEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QMouseEvent *, copyable: true
        << qScriptValueFromValue(engine, 

        e
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellTreeWidget::mouseReleaseEvent", engine);

                    
                }
            }
        
    
    
      void REcmaShellTreeWidget::mouseMoveEvent(
                QMouseEvent * e
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellTreeWidget::mouseMoveEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("mouseMoveEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RTreeWidget::mouseMoveEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RTreeWidget::mouseMoveEvent(
                            e
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellTreeWidget::mouseMoveEvent", engine);

                        
                } else {
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RTreeWidget*>());
                        REcmaHelper::registerFunction(engine, &proto, mouseMoveEvent, "mouseMoveEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QMouseEvent *, copyable: true
        << qScriptValueFromValue(engine, 

        e
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellTreeWidget::mouseMoveEvent", engine);

                    
                }
            }
        
    
  

    // protected methods (only available for ECMA shell classes) (generated by xsl2xpp.xsl):
	 QScriptValue
        REcmaShellTreeWidget::contextMenuEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellTreeWidget::contextMenuEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellTreeWidget::contextMenuEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellTreeWidget* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QContextMenuEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QContextMenuEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QContextMenuEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RTreeWidget: Argument 0 is not of type QContextMenuEvent *QContextMenuEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RTreeWidget::contextMenuEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTreeWidget.contextMenuEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellTreeWidget::contextMenuEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellTreeWidget::mousePressEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellTreeWidget::mousePressEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellTreeWidget::mousePressEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellTreeWidget* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QMouseEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QMouseEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QMouseEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RTreeWidget: Argument 0 is not of type QMouseEvent *QMouseEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RTreeWidget::mousePressEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTreeWidget.mousePressEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellTreeWidget::mousePressEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellTreeWidget::mouseReleaseEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellTreeWidget::mouseReleaseEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellTreeWidget::mouseReleaseEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellTreeWidget* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QMouseEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QMouseEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QMouseEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RTreeWidget: Argument 0 is not of type QMouseEvent *QMouseEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RTreeWidget::mouseReleaseEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTreeWidget.mouseReleaseEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellTreeWidget::mouseReleaseEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellTreeWidget::mouseMoveEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellTreeWidget::mouseMoveEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellTreeWidget::mouseMoveEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellTreeWidget* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QMouseEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QMouseEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QMouseEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RTreeWidget: Argument 0 is not of type QMouseEvent *QMouseEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RTreeWidget::mouseMoveEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTreeWidget.mouseMoveEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellTreeWidget::mouseMoveEvent", context, engine);
            return result;
        }
        