// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is not copyable.
        
        #include "REcmaGraphicsViewQt.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
                #include "RAction.h"
            
                #include "RDocument.h"
            
                #include "RDocumentInterface.h"
            
                #include "RFocusFrame.h"
            
                #include "RGraphicsSceneQt.h"
            
                #include "RLine.h"
            
                #include "RSnap.h"
            
                #include "RSnapRestriction.h"
            
            
        // includes for base ecma wrapper classes
        
                  #include "REcmaGraphicsViewImage.h"
                 void REcmaGraphicsViewQt::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RGraphicsViewQt*) 0)));
        protoCreated = true;
    }

    
        // primary base class QWidget:
        
            QScriptValue dpt = engine.defaultPrototype(
                qMetaTypeId<QWidget*>());

            if (dpt.isValid()) {
                proto->setPrototype(dpt);
            }
          
        /*
        REcmaGraphicsViewImage::initEcma(engine, proto);
          
        */
    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    
        // conversion for base class QWidget
        REcmaHelper::registerFunction(&engine, proto, getQWidget, "getQWidget");
        
        // conversion for base class RGraphicsViewImage
        REcmaHelper::registerFunction(&engine, proto, getRGraphicsViewImage, "getRGraphicsViewImage");
        
        // conversion for base class RGraphicsView
        REcmaHelper::registerFunction(&engine, proto, getRGraphicsView, "getRGraphicsView");
        

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

        // properties of secondary base class RGraphicsViewImage:
        

        // methods of secondary base class RGraphicsViewImage:
        
            REcmaHelper::registerFunction(&engine, proto, getNumThreads, "getNumThreads");
            
            REcmaHelper::registerFunction(&engine, proto, setNumThreads, "setNumThreads");
            
            REcmaHelper::registerFunction(&engine, proto, clear, "clear");
            
            REcmaHelper::registerFunction(&engine, proto, setViewportNumber, "setViewportNumber");
            
            REcmaHelper::registerFunction(&engine, proto, getViewportNumber, "getViewportNumber");
            
            REcmaHelper::registerFunction(&engine, proto, setNavigationAction, "setNavigationAction");
            
            REcmaHelper::registerFunction(&engine, proto, getBox, "getBox");
            
            REcmaHelper::registerFunction(&engine, proto, autoZoom, "autoZoom");
            
            REcmaHelper::registerFunction(&engine, proto, zoomTo, "zoomTo");
            
            REcmaHelper::registerFunction(&engine, proto, zoom, "zoom");
            
            REcmaHelper::registerFunction(&engine, proto, pan, "pan");
            
            REcmaHelper::registerFunction(&engine, proto, centerToBox, "centerToBox");
            
            REcmaHelper::registerFunction(&engine, proto, centerToPoint, "centerToPoint");
            
            REcmaHelper::registerFunction(&engine, proto, setGrid, "setGrid");
            
            REcmaHelper::registerFunction(&engine, proto, getGrid, "getGrid");
            
            REcmaHelper::registerFunction(&engine, proto, getFactor, "getFactor");
            
            REcmaHelper::registerFunction(&engine, proto, setFactor, "setFactor");
            
            REcmaHelper::registerFunction(&engine, proto, getOffset, "getOffset");
            
            REcmaHelper::registerFunction(&engine, proto, setOffset, "setOffset");
            
            REcmaHelper::registerFunction(&engine, proto, getBackgroundColor, "getBackgroundColor");
            
            REcmaHelper::registerFunction(&engine, proto, setMargin, "setMargin");
            
            REcmaHelper::registerFunction(&engine, proto, setColorMode, "setColorMode");
            
            REcmaHelper::registerFunction(&engine, proto, setHairlineMode, "setHairlineMode");
            
            REcmaHelper::registerFunction(&engine, proto, getHairlineMode, "getHairlineMode");
            
            REcmaHelper::registerFunction(&engine, proto, setHairlineMinimumMode, "setHairlineMinimumMode");
            
            REcmaHelper::registerFunction(&engine, proto, getHairlineMinimumMode, "getHairlineMinimumMode");
            
            REcmaHelper::registerFunction(&engine, proto, setAntialiasing, "setAntialiasing");
            
            REcmaHelper::registerFunction(&engine, proto, getAntialiasing, "getAntialiasing");
            
            REcmaHelper::registerFunction(&engine, proto, getScene, "getScene");
            
            REcmaHelper::registerFunction(&engine, proto, getDocument, "getDocument");
            
            REcmaHelper::registerFunction(&engine, proto, getDocumentInterface, "getDocumentInterface");
            
            REcmaHelper::registerFunction(&engine, proto, setExporting, "setExporting");
            
            REcmaHelper::registerFunction(&engine, proto, isExporting, "isExporting");
            
            REcmaHelper::registerFunction(&engine, proto, isPrintingOrExporting, "isPrintingOrExporting");
            
            REcmaHelper::registerFunction(&engine, proto, setPrinting, "setPrinting");
            
            REcmaHelper::registerFunction(&engine, proto, isPrinting, "isPrinting");
            
            REcmaHelper::registerFunction(&engine, proto, setPrintPreview, "setPrintPreview");
            
            REcmaHelper::registerFunction(&engine, proto, isPrintPreview, "isPrintPreview");
            
            REcmaHelper::registerFunction(&engine, proto, setPrintPointSize, "setPrintPointSize");
            
            REcmaHelper::registerFunction(&engine, proto, setTextHeightThresholdOverride, "setTextHeightThresholdOverride");
            
            REcmaHelper::registerFunction(&engine, proto, getTextHeightThresholdOverride, "getTextHeightThresholdOverride");
            
            REcmaHelper::registerFunction(&engine, proto, isGridVisible, "isGridVisible");
            
            REcmaHelper::registerFunction(&engine, proto, setGridVisible, "setGridVisible");
            
            REcmaHelper::registerFunction(&engine, proto, setScene, "setScene");
            
            REcmaHelper::registerFunction(&engine, proto, setBackgroundColor, "setBackgroundColor");
            
            REcmaHelper::registerFunction(&engine, proto, regenerate, "regenerate");
            
            REcmaHelper::registerFunction(&engine, proto, updateImage, "updateImage");
            
            REcmaHelper::registerFunction(&engine, proto, saveViewport, "saveViewport");
            
            REcmaHelper::registerFunction(&engine, proto, restoreViewport, "restoreViewport");
            
            REcmaHelper::registerFunction(&engine, proto, mapFromView, "mapFromView");
            
            REcmaHelper::registerFunction(&engine, proto, mapToView, "mapToView");
            
            REcmaHelper::registerFunction(&engine, proto, mapDistanceFromView, "mapDistanceFromView");
            
            REcmaHelper::registerFunction(&engine, proto, mapDistanceToView, "mapDistanceToView");
            
            REcmaHelper::registerFunction(&engine, proto, resizeImage, "resizeImage");
            
            REcmaHelper::registerFunction(&engine, proto, paintGridPoint, "paintGridPoint");
            
            REcmaHelper::registerFunction(&engine, proto, paintGridLine, "paintGridLine");
            
            REcmaHelper::registerFunction(&engine, proto, setPaintOrigin, "setPaintOrigin");
            
            REcmaHelper::registerFunction(&engine, proto, setPanOptimization, "setPanOptimization");
            
            REcmaHelper::registerFunction(&engine, proto, getPanOptimization, "getPanOptimization");
            
            REcmaHelper::registerFunction(&engine, proto, paintEntities, "paintEntities");
            
            REcmaHelper::registerFunction(&engine, proto, paintEntitiesMulti, "paintEntitiesMulti");
            
            REcmaHelper::registerFunction(&engine, proto, paintEntitiesThread, "paintEntitiesThread");
            
            REcmaHelper::registerFunction(&engine, proto, paintEntityThread, "paintEntityThread");
            
            REcmaHelper::registerFunction(&engine, proto, paintOverlay, "paintOverlay");
            
            REcmaHelper::registerFunction(&engine, proto, getBuffer, "getBuffer");
            
            REcmaHelper::registerFunction(&engine, proto, getTransform, "getTransform");
            
            REcmaHelper::registerFunction(&engine, proto, clearBackground, "clearBackground");
            
            REcmaHelper::registerFunction(&engine, proto, addToBackground, "addToBackground");
            
            REcmaHelper::registerFunction(&engine, proto, setBackgroundTransform, "setBackgroundTransform");
            
            REcmaHelper::registerFunction(&engine, proto, clearOverlay, "clearOverlay");
            
            REcmaHelper::registerFunction(&engine, proto, addToOverlay, "addToOverlay");
            
            REcmaHelper::registerFunction(&engine, proto, setColorCorrectionOverride, "setColorCorrectionOverride");
            
            REcmaHelper::registerFunction(&engine, proto, getColorCorrectionOverride, "getColorCorrectionOverride");
            
            REcmaHelper::registerFunction(&engine, proto, setMinimumLineweight, "setMinimumLineweight");
            
            REcmaHelper::registerFunction(&engine, proto, getMinimumLineweight, "getMinimumLineweight");
            
            REcmaHelper::registerFunction(&engine, proto, setMaximumLineweight, "setMaximumLineweight");
            
            REcmaHelper::registerFunction(&engine, proto, getMaximumLineweight, "getMaximumLineweight");
            
            REcmaHelper::registerFunction(&engine, proto, setPaintOffset, "setPaintOffset");
            
            REcmaHelper::registerFunction(&engine, proto, getPaintOffset, "getPaintOffset");
            
            REcmaHelper::registerFunction(&engine, proto, isAlphaEnabled, "isAlphaEnabled");
            
            REcmaHelper::registerFunction(&engine, proto, setAlphaEnabled, "setAlphaEnabled");
            

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, disableGestures, "disableGestures");
            
            REcmaHelper::registerFunction(&engine, proto, repaintView, "repaintView");
            
            REcmaHelper::registerFunction(&engine, proto, repaintNow, "repaintNow");
            
            REcmaHelper::registerFunction(&engine, proto, giveFocus, "giveFocus");
            
            REcmaHelper::registerFunction(&engine, proto, hasFocus, "hasFocus");
            
            REcmaHelper::registerFunction(&engine, proto, removeFocus, "removeFocus");
            
            REcmaHelper::registerFunction(&engine, proto, getWidth, "getWidth");
            
            REcmaHelper::registerFunction(&engine, proto, getHeight, "getHeight");
            
            REcmaHelper::registerFunction(&engine, proto, getRect, "getRect");
            
            REcmaHelper::registerFunction(&engine, proto, getSignalsBlocked, "getSignalsBlocked");
            
            REcmaHelper::registerFunction(&engine, proto, setSignalsBlocked, "setSignalsBlocked");
            
            REcmaHelper::registerFunction(&engine, proto, getCursor, "getCursor");
            
            REcmaHelper::registerFunction(&engine, proto, setCursor, "setCursor");
            
            REcmaHelper::registerFunction(&engine, proto, setFocusFrameWidget, "setFocusFrameWidget");
            
            REcmaHelper::registerFunction(&engine, proto, viewportChangeEvent, "viewportChangeEvent");
            
            REcmaHelper::registerFunction(&engine, proto, emitUpdateSnapInfo, "emitUpdateSnapInfo");
            
            REcmaHelper::registerFunction(&engine, proto, emitUpdateTextLabel, "emitUpdateTextLabel");
            
            REcmaHelper::registerFunction(&engine, proto, simulateMouseMoveEvent, "simulateMouseMoveEvent");
            
            REcmaHelper::registerFunction(&engine, proto, getDevicePixelRatio, "getDevicePixelRatio");
            
            REcmaHelper::registerFunction(&engine, proto, registerForFocus, "registerForFocus");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RGraphicsViewQt*>(), *proto);

        
                        qScriptRegisterMetaType<
                        RGraphicsViewQt*>(
                        &engine, toScriptValue, fromScriptValue, *proto);
                    
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    

    // static properties:
    

    // enum values:
    

    // enum conversions:
    
        
    // init class:
    engine.globalObject().setProperty("RGraphicsViewQt",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaGraphicsViewQt::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
    if (context->thisObject().strictlyEquals(
       engine->globalObject())) {
       return REcmaHelper::throwError(
       QString::fromLatin1("RGraphicsViewQt(): Did you forget to construct with 'new'?"),
           context);
    }

    QScriptValue result;
        
            // generate constructor variants:
            
    if( context->argumentCount() ==
        0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ constructor:
    
            // non-copyable class:
            REcmaShellGraphicsViewQt
                    * cppResult =
                    new
                    REcmaShellGraphicsViewQt
                    ();
                
                    result = engine->newQObject(context->thisObject(), cppResult, QScriptEngine::QtOwnership);
                
        cppResult->__qtscript_self = result;
    
    } else 

    if( context->argumentCount() ==
        1
                && (
                
                        context->argument(
                        0
                        ).isQObject()
                        ||
                    
                        context->argument(
                        0
                        ).isNull()
                ) /* type: QWidget * */
            
    ){
    // prepare arguments:
    
            // argument isQObject
            QWidget *
            a0 =
            qobject_cast<
            QWidget *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
    // end of arguments

    // call C++ constructor:
    
            // non-copyable class:
            REcmaShellGraphicsViewQt
                    * cppResult =
                    new
                    REcmaShellGraphicsViewQt
                    (
                    a0
                    );
                
                    result = engine->newQObject(context->thisObject(), cppResult, QScriptEngine::QtOwnership);
                
        cppResult->__qtscript_self = result;
    
    } else 

    if( context->argumentCount() ==
        2
                && (
                
                        context->argument(
                        0
                        ).isQObject()
                        ||
                    
                        context->argument(
                        0
                        ).isNull()
                ) /* type: QWidget * */
            
                && (
                
                        context->argument(
                        1
                        ).isBool()
                ) /* type: bool */
            
    ){
    // prepare arguments:
    
            // argument isQObject
            QWidget *
            a0 =
            qobject_cast<
            QWidget *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ constructor:
    
            // non-copyable class:
            REcmaShellGraphicsViewQt
                    * cppResult =
                    new
                    REcmaShellGraphicsViewQt
                    (
                    a0
        ,
    a1
                    );
                
                    result = engine->newQObject(context->thisObject(), cppResult, QScriptEngine::QtOwnership);
                
        cppResult->__qtscript_self = result;
    
    } else 

    {
       return REcmaHelper::throwError(
       QString::fromLatin1("RGraphicsViewQt(): no matching constructor found."),
           context);
    }
    
    return result;
    }
    

    // conversion functions for base classes:
     QScriptValue REcmaGraphicsViewQt::getQWidget(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                QWidget* cppResult =
                    qscriptvalue_cast<RGraphicsViewQt*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
             QScriptValue REcmaGraphicsViewQt::getRGraphicsViewImage(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RGraphicsViewImage* cppResult =
                    qscriptvalue_cast<RGraphicsViewQt*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
             QScriptValue REcmaGraphicsViewQt::getRGraphicsView(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RGraphicsView* cppResult =
                    qscriptvalue_cast<RGraphicsViewQt*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
            

    // returns class name:
     QScriptValue REcmaGraphicsViewQt::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RGraphicsViewQt"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaGraphicsViewQt::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        
        list.append("QWidget");
    
        list.append("RGraphicsViewImage");
    
        list.append("RGraphicsView");
    

        return qScriptValueFromSequence(engine, list);
    }
    
        // properties of secondary base class RGraphicsViewImage:
        

        // methods of secondary base class RGraphicsViewImage:
         QScriptValue
        REcmaGraphicsViewQt::getNumThreads
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getNumThreads", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getNumThreads";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getNumThreads", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getNumThreads();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getNumThreads().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getNumThreads", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setNumThreads
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setNumThreads", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setNumThreads";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setNumThreads", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setNumThreads(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setNumThreads().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setNumThreads", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::clear
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::clear", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::clear";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("clear", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->clear();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.clear().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::clear", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setViewportNumber
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setViewportNumber", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setViewportNumber";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setViewportNumber", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setViewportNumber(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setViewportNumber().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setViewportNumber", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getViewportNumber
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getViewportNumber", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getViewportNumber";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getViewportNumber", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getViewportNumber();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getViewportNumber().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getViewportNumber", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setNavigationAction
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setNavigationAction", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setNavigationAction";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setNavigationAction", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RAction * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RAction * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RAction >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type RAction *RAction *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setNavigationAction(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setNavigationAction().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setNavigationAction", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getBox
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getBox", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getBox";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getBox", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RBox'
    RBox cppResult =
        
               self->getBox();
        // return type: RBox
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getBox().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getBox", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::autoZoom
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::autoZoom", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::autoZoom";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("autoZoom", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->autoZoom();
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->autoZoom(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: int */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->autoZoom(a0
        ,
    a1);
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isNumber()
        ) /* type: int */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
     && (
            context->argument(2).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
                    // argument isStandardType
                    bool
                    a2 =
                    (bool)
                    
                    context->argument( 2 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->autoZoom(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.autoZoom().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::autoZoom", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::zoomTo
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::zoomTo", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::zoomTo";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("zoomTo", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RBox */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RBox*
                    ap0 =
                    qscriptvalue_cast<
                    RBox*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type RBox.",
                               context);                    
                    }
                    RBox 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->zoomTo(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RBox */
     && (
            context->argument(1).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RBox*
                    ap0 =
                    qscriptvalue_cast<
                    RBox*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type RBox.",
                               context);                    
                    }
                    RBox 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->zoomTo(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.zoomTo().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::zoomTo", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::zoom
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::zoom", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::zoom";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("zoom", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->zoom(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.zoom().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::zoom", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::pan
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::pan", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::pan";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("pan", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->pan(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->pan(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.pan().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::pan", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::centerToBox
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::centerToBox", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::centerToBox";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("centerToBox", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RBox */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RBox*
                    ap0 =
                    qscriptvalue_cast<
                    RBox*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type RBox.",
                               context);                    
                    }
                    RBox 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->centerToBox(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.centerToBox().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::centerToBox", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::centerToPoint
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::centerToPoint", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::centerToPoint";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("centerToPoint", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->centerToPoint(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.centerToPoint().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::centerToPoint", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setGrid
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setGrid", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setGrid";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setGrid", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RGrid * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RGrid * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RGrid >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type RGrid *RGrid *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setGrid(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setGrid().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setGrid", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getGrid
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getGrid", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getGrid";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getGrid", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RGrid *'
    RGrid * cppResult =
        
               self->getGrid();
        // return type: RGrid *
                // RGrid:
                result = REcmaHelper::toScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getGrid().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getGrid", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getFactor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getFactor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getFactor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getFactor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getFactor();
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getFactor(a0);
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getFactor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getFactor", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setFactor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setFactor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setFactor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setFactor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setFactor(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: double */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setFactor(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setFactor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setFactor", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getOffset
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getOffset", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getOffset";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getOffset", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->getOffset();
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->getOffset(a0);
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getOffset().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getOffset", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setOffset
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setOffset", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setOffset";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setOffset", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setOffset(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setOffset(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setOffset().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setOffset", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getBackgroundColor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getBackgroundColor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getBackgroundColor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getBackgroundColor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QColor'
    QColor cppResult =
        
               self->getBackgroundColor();
        // return type: QColor
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getBackgroundColor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getBackgroundColor", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setMargin
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setMargin", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setMargin";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setMargin", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setMargin(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setMargin().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setMargin", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setColorMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setColorMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setColorMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setColorMode", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RGraphicsView::ColorMode */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RGraphicsView::ColorMode
                    a0 =
                    (RGraphicsView::ColorMode)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setColorMode(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setColorMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setColorMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setHairlineMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setHairlineMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setHairlineMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setHairlineMode", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setHairlineMode(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setHairlineMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setHairlineMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getHairlineMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getHairlineMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getHairlineMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getHairlineMode", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getHairlineMode();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getHairlineMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getHairlineMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setHairlineMinimumMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setHairlineMinimumMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setHairlineMinimumMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setHairlineMinimumMode", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setHairlineMinimumMode(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setHairlineMinimumMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setHairlineMinimumMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getHairlineMinimumMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getHairlineMinimumMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getHairlineMinimumMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getHairlineMinimumMode", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getHairlineMinimumMode();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getHairlineMinimumMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getHairlineMinimumMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setAntialiasing
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setAntialiasing", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setAntialiasing";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setAntialiasing", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setAntialiasing(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setAntialiasing().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setAntialiasing", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getAntialiasing
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getAntialiasing", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getAntialiasing";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getAntialiasing", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getAntialiasing();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getAntialiasing().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getAntialiasing", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getScene
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getScene", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getScene";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getScene", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RGraphicsScene *'
    RGraphicsScene * cppResult =
        
               self->getScene();
        // return type: RGraphicsScene *
                // RGraphicsScene:
                result = REcmaHelper::toScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getScene().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getScene", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getDocument
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getDocument", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getDocument";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getDocument", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RDocument *'
    RDocument * cppResult =
        
               self->getDocument();
        // return type: RDocument *
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getDocument().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getDocument", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getDocumentInterface
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getDocumentInterface", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getDocumentInterface";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getDocumentInterface", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RDocumentInterface *'
    RDocumentInterface * cppResult =
        
               self->getDocumentInterface();
        // return type: RDocumentInterface *
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getDocumentInterface().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getDocumentInterface", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setExporting
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setExporting", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setExporting";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setExporting", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setExporting(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setExporting().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setExporting", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::isExporting
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::isExporting", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::isExporting";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("isExporting", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isExporting();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.isExporting().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::isExporting", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::isPrintingOrExporting
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::isPrintingOrExporting", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::isPrintingOrExporting";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("isPrintingOrExporting", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isPrintingOrExporting();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.isPrintingOrExporting().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::isPrintingOrExporting", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setPrinting
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setPrinting", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setPrinting";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setPrinting", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setPrinting(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setPrinting().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setPrinting", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::isPrinting
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::isPrinting", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::isPrinting";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("isPrinting", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isPrinting();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.isPrinting().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::isPrinting", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setPrintPreview
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setPrintPreview", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setPrintPreview";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setPrintPreview", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setPrintPreview(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setPrintPreview().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setPrintPreview", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::isPrintPreview
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::isPrintPreview", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::isPrintPreview";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("isPrintPreview", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isPrintPreview();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.isPrintPreview().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::isPrintPreview", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setPrintPointSize
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setPrintPointSize", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setPrintPointSize";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setPrintPointSize", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setPrintPointSize(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setPrintPointSize().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setPrintPointSize", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setTextHeightThresholdOverride
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setTextHeightThresholdOverride", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setTextHeightThresholdOverride";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setTextHeightThresholdOverride", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setTextHeightThresholdOverride(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setTextHeightThresholdOverride().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setTextHeightThresholdOverride", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getTextHeightThresholdOverride
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getTextHeightThresholdOverride", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getTextHeightThresholdOverride";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getTextHeightThresholdOverride", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getTextHeightThresholdOverride();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getTextHeightThresholdOverride().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getTextHeightThresholdOverride", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::isGridVisible
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::isGridVisible", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::isGridVisible";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("isGridVisible", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isGridVisible();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.isGridVisible().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::isGridVisible", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setGridVisible
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setGridVisible", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setGridVisible";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setGridVisible", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setGridVisible(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setGridVisible().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setGridVisible", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setScene
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setScene", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setScene";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setScene", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RGraphicsSceneQt * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RGraphicsSceneQt * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RGraphicsSceneQt >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type RGraphicsSceneQt *RGraphicsSceneQt *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setScene(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RGraphicsSceneQt * */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RGraphicsSceneQt * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RGraphicsSceneQt >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type RGraphicsSceneQt *RGraphicsSceneQt *.", context);                    
                    }
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setScene(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setScene().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setScene", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setBackgroundColor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setBackgroundColor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setBackgroundColor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setBackgroundColor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QColor */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    QColor*
                    ap0 =
                    qscriptvalue_cast<
                    QColor*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type QColor.",
                               context);                    
                    }
                    QColor 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setBackgroundColor(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setBackgroundColor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setBackgroundColor", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::regenerate
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::regenerate", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::regenerate";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("regenerate", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->regenerate();
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->regenerate(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.regenerate().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::regenerate", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::updateImage
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::updateImage", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::updateImage";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("updateImage", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->updateImage();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.updateImage().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::updateImage", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::saveViewport
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::saveViewport", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::saveViewport";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("saveViewport", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->saveViewport();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.saveViewport().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::saveViewport", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::restoreViewport
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::restoreViewport", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::restoreViewport";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("restoreViewport", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->restoreViewport();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.restoreViewport().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::restoreViewport", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::mapFromView
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::mapFromView", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::mapFromView";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("mapFromView", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->mapFromView(a0);
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->mapFromView(a0
        ,
    a1);
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.mapFromView().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::mapFromView", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::mapToView
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::mapToView", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::mapToView";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("mapToView", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->mapToView(a0);
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.mapToView().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::mapToView", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::mapDistanceFromView
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::mapDistanceFromView", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::mapDistanceFromView";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("mapDistanceFromView", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->mapDistanceFromView(a0);
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.mapDistanceFromView().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::mapDistanceFromView", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::mapDistanceToView
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::mapDistanceToView", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::mapDistanceToView";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("mapDistanceToView", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->mapDistanceToView(a0);
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.mapDistanceToView().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::mapDistanceToView", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::resizeImage
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::resizeImage", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::resizeImage";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("resizeImage", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: int */
     && (
            context->argument(1).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->resizeImage(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.resizeImage().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::resizeImage", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::paintGridPoint
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::paintGridPoint", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::paintGridPoint";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("paintGridPoint", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->paintGridPoint(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.paintGridPoint().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::paintGridPoint", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::paintGridLine
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::paintGridLine", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::paintGridLine";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("paintGridLine", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RLine */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RLine*
                    ap0 =
                    qscriptvalue_cast<
                    RLine*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type RLine.",
                               context);                    
                    }
                    RLine 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->paintGridLine(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.paintGridLine().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::paintGridLine", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setPaintOrigin
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setPaintOrigin", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setPaintOrigin";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setPaintOrigin", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setPaintOrigin(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setPaintOrigin().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setPaintOrigin", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setPanOptimization
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setPanOptimization", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setPanOptimization";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setPanOptimization", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setPanOptimization(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setPanOptimization().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setPanOptimization", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getPanOptimization
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getPanOptimization", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getPanOptimization";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getPanOptimization", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getPanOptimization();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getPanOptimization().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getPanOptimization", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::paintEntities
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::paintEntities", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::paintEntities";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("paintEntities", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QPainter * */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RBox */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QPainter * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QPainter >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type QPainter *QPainter *.", context);                    
                    }
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RBox*
                    ap1 =
                    qscriptvalue_cast<
                    RBox*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if (ap1 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewImage: Argument 1 is not of type RBox.",
                               context);                    
                    }
                    RBox 
                    a1 = 
                    *ap1;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->paintEntities(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.paintEntities().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::paintEntities", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::paintEntitiesMulti
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::paintEntitiesMulti", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::paintEntitiesMulti";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("paintEntitiesMulti", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RBox */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RBox*
                    ap0 =
                    qscriptvalue_cast<
                    RBox*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type RBox.",
                               context);                    
                    }
                    RBox 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->paintEntitiesMulti(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.paintEntitiesMulti().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::paintEntitiesMulti", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::paintEntitiesThread
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::paintEntitiesThread", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::paintEntitiesThread";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("paintEntitiesThread", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    4 && (
            context->argument(0).isNumber()
        ) /* type: int */
     && (
            context->argument(1).isArray()
        ) /* type: QList < REntity::Id > */
     && (
            context->argument(2).isNumber()
        ) /* type: int */
     && (
            context->argument(3).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isArray
                    QList < REntity::Id >
                    a1;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(1),
                        a1
                    );
                
                    // argument isStandardType
                    int
                    a2 =
                    (int)
                    
                    context->argument( 2 ).
                    toNumber();
                
                    // argument isStandardType
                    int
                    a3 =
                    (int)
                    
                    context->argument( 3 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->paintEntitiesThread(a0
        ,
    a1
        ,
    a2
        ,
    a3);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.paintEntitiesThread().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::paintEntitiesThread", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::paintEntityThread
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::paintEntityThread", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::paintEntityThread";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("paintEntityThread", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: int */
     && (
            context->argument(1).isNumber()
        ) /* type: REntity::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    REntity::Id
                    a1 =
                    (REntity::Id)
                    (int)
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->paintEntityThread(a0
        ,
    a1);
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isNumber()
        ) /* type: int */
     && (
            context->argument(1).isNumber()
        ) /* type: REntity::Id */
     && (
            context->argument(2).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    REntity::Id
                    a1 =
                    (REntity::Id)
                    (int)
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    bool
                    a2 =
                    (bool)
                    
                    context->argument( 2 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->paintEntityThread(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.paintEntityThread().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::paintEntityThread", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::paintOverlay
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::paintOverlay", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::paintOverlay";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("paintOverlay", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QPainter * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QPainter * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QPainter >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type QPainter *QPainter *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->paintOverlay(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.paintOverlay().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::paintOverlay", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getBuffer
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getBuffer", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getBuffer";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getBuffer", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QImage'
    QImage cppResult =
        
               self->getBuffer();
        // return type: QImage
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getBuffer().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getBuffer", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getTransform
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getTransform", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getTransform";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getTransform", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QTransform'
    QTransform cppResult =
        
               self->getTransform();
        // return type: QTransform
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getTransform().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getTransform", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::clearBackground
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::clearBackground", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::clearBackground";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("clearBackground", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->clearBackground();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.clearBackground().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::clearBackground", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::addToBackground
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::addToBackground", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::addToBackground";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("addToBackground", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RGraphicsSceneDrawable */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RGraphicsSceneDrawable*
                    ap0 =
                    qscriptvalue_cast<
                    RGraphicsSceneDrawable*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type RGraphicsSceneDrawable.",
                               context);                    
                    }
                    RGraphicsSceneDrawable 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addToBackground(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.addToBackground().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::addToBackground", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setBackgroundTransform
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setBackgroundTransform", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setBackgroundTransform";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setBackgroundTransform", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: double */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap1 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if (ap1 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewImage: Argument 1 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a1 = 
                    *ap1;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setBackgroundTransform(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setBackgroundTransform().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setBackgroundTransform", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::clearOverlay
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::clearOverlay", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::clearOverlay";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("clearOverlay", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->clearOverlay(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: int */
     && (
            context->argument(1).isNumber()
        ) /* type: RObject::Id */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    RObject::Id
                    a1 =
                    (RObject::Id)
                    (int)
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->clearOverlay(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.clearOverlay().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::clearOverlay", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::addToOverlay
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::addToOverlay", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::addToOverlay";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("addToOverlay", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isNumber()
        ) /* type: int */
     && (
            context->argument(1).isNumber()
        ) /* type: RObject::Id */
     && (
            context->argument(2).isVariant() || 
            context->argument(2).isQObject() || 
            context->argument(2).isNull()
        ) /* type: RGraphicsSceneDrawable */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    RObject::Id
                    a1 =
                    (RObject::Id)
                    (int)
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RGraphicsSceneDrawable*
                    ap2 =
                    qscriptvalue_cast<
                    RGraphicsSceneDrawable*
                        >(
                        context->argument(
                        2
                        )
                    );
                    if (ap2 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewImage: Argument 2 is not of type RGraphicsSceneDrawable.",
                               context);                    
                    }
                    RGraphicsSceneDrawable 
                    a2 = 
                    *ap2;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addToOverlay(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.addToOverlay().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::addToOverlay", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setColorCorrectionOverride
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setColorCorrectionOverride", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setColorCorrectionOverride";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setColorCorrectionOverride", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setColorCorrectionOverride(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setColorCorrectionOverride().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setColorCorrectionOverride", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getColorCorrectionOverride
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getColorCorrectionOverride", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getColorCorrectionOverride";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getColorCorrectionOverride", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getColorCorrectionOverride();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getColorCorrectionOverride().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getColorCorrectionOverride", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setMinimumLineweight
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setMinimumLineweight", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setMinimumLineweight";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setMinimumLineweight", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setMinimumLineweight(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setMinimumLineweight().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setMinimumLineweight", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getMinimumLineweight
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getMinimumLineweight", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getMinimumLineweight";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getMinimumLineweight", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getMinimumLineweight();
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getMinimumLineweight().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getMinimumLineweight", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setMaximumLineweight
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setMaximumLineweight", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setMaximumLineweight";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setMaximumLineweight", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setMaximumLineweight(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setMaximumLineweight().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setMaximumLineweight", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getMaximumLineweight
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getMaximumLineweight", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getMaximumLineweight";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getMaximumLineweight", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getMaximumLineweight();
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getMaximumLineweight().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getMaximumLineweight", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setPaintOffset
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setPaintOffset", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setPaintOffset";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setPaintOffset", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewImage: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setPaintOffset(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setPaintOffset().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setPaintOffset", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getPaintOffset
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getPaintOffset", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getPaintOffset";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getPaintOffset", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->getPaintOffset();
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getPaintOffset().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getPaintOffset", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::isAlphaEnabled
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::isAlphaEnabled", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::isAlphaEnabled";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("isAlphaEnabled", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isAlphaEnabled();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.isAlphaEnabled().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::isAlphaEnabled", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setAlphaEnabled
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setAlphaEnabled", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setAlphaEnabled";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setAlphaEnabled", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setAlphaEnabled(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setAlphaEnabled().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setAlphaEnabled", context, engine);
            return result;
        }
        

    // properties:
    

    // public methods:
     QScriptValue
        REcmaGraphicsViewQt::disableGestures
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::disableGestures", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::disableGestures";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("disableGestures", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->disableGestures();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.disableGestures().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::disableGestures", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::repaintView
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::repaintView", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::repaintView";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("repaintView", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->repaintView();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.repaintView().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::repaintView", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::repaintNow
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::repaintNow", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::repaintNow";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("repaintNow", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->repaintNow();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.repaintNow().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::repaintNow", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::giveFocus
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::giveFocus", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::giveFocus";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("giveFocus", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->giveFocus();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.giveFocus().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::giveFocus", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::hasFocus
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::hasFocus", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::hasFocus";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("hasFocus", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->hasFocus();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.hasFocus().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::hasFocus", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::removeFocus
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::removeFocus", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::removeFocus";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("removeFocus", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeFocus();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.removeFocus().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::removeFocus", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getWidth
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getWidth", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getWidth";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getWidth", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getWidth();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getWidth().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getWidth", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getHeight
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getHeight", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getHeight";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getHeight", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getHeight();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getHeight().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getHeight", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getRect
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getRect", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getRect";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getRect", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QRect'
    QRect cppResult =
        
               self->getRect();
        // return type: QRect
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getRect().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getRect", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getSignalsBlocked
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getSignalsBlocked", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getSignalsBlocked";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getSignalsBlocked", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getSignalsBlocked();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getSignalsBlocked().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getSignalsBlocked", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setSignalsBlocked
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setSignalsBlocked", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setSignalsBlocked";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setSignalsBlocked", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setSignalsBlocked(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setSignalsBlocked().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setSignalsBlocked", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getCursor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getCursor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getCursor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getCursor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QCursor'
    QCursor cppResult =
        
               self->getCursor();
        // return type: QCursor
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getCursor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getCursor", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setCursor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setCursor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setCursor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setCursor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: Qt::CursorShape */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    Qt::CursorShape
                    a0 =
                    (Qt::CursorShape)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setCursor(a0);
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QCursor */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QCursor*
                    ap0 =
                    qscriptvalue_cast<
                    QCursor*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewQt: Argument 0 is not of type QCursor*.",
                               context);                    
                    }
                    QCursor& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setCursor(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setCursor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setCursor", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::setFocusFrameWidget
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::setFocusFrameWidget", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::setFocusFrameWidget";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("setFocusFrameWidget", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QFrame * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QFrame * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QFrame >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewQt: Argument 0 is not of type QFrame *QFrame *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setFocusFrameWidget(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.setFocusFrameWidget().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::setFocusFrameWidget", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::viewportChangeEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::viewportChangeEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::viewportChangeEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("viewportChangeEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->viewportChangeEvent();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.viewportChangeEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::viewportChangeEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::emitUpdateSnapInfo
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::emitUpdateSnapInfo", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::emitUpdateSnapInfo";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("emitUpdateSnapInfo", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RSnap * */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RSnapRestriction * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RSnap * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RSnap >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewQt: Argument 0 is not of type RSnap *RSnap *.", context);                    
                    }
                
                    // argument is pointer
                    RSnapRestriction * a1 = NULL;

                    a1 = 
                        REcmaHelper::scriptValueTo<RSnapRestriction >(
                            context->argument(1)
                        );
                    
                    if (a1==NULL && 
                        !context->argument(1).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewQt: Argument 1 is not of type RSnapRestriction *RSnapRestriction *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->emitUpdateSnapInfo(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.emitUpdateSnapInfo().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::emitUpdateSnapInfo", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::emitUpdateTextLabel
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::emitUpdateTextLabel", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::emitUpdateTextLabel";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("emitUpdateTextLabel", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RTextLabel */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RTextLabel*
                    ap0 =
                    qscriptvalue_cast<
                    RTextLabel*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewQt: Argument 0 is not of type RTextLabel.",
                               context);                    
                    }
                    RTextLabel 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->emitUpdateTextLabel(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.emitUpdateTextLabel().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::emitUpdateTextLabel", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::simulateMouseMoveEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::simulateMouseMoveEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::simulateMouseMoveEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("simulateMouseMoveEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->simulateMouseMoveEvent();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.simulateMouseMoveEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::simulateMouseMoveEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::getDevicePixelRatio
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::getDevicePixelRatio", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::getDevicePixelRatio";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("getDevicePixelRatio", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getDevicePixelRatio();
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.getDevicePixelRatio().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::getDevicePixelRatio", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewQt::registerForFocus
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewQt::registerForFocus", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewQt::registerForFocus";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewQt* self = 
                        getSelf("registerForFocus", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->registerForFocus();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.registerForFocus().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewQt::registerForFocus", context, engine);
            return result;
        }
         QScriptValue REcmaGraphicsViewQt::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RGraphicsViewQt* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RGraphicsViewQt(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaGraphicsViewQt::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RGraphicsViewQt* self = getSelf("RGraphicsViewQt", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RGraphicsViewQt* REcmaGraphicsViewQt::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RGraphicsViewQt* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RGraphicsViewQt >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RGraphicsViewQt.%1(): "
                        "This object is not a RGraphicsViewQt").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        REcmaShellGraphicsViewQt* REcmaGraphicsViewQt::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RGraphicsViewQt* selfBase = getSelf(fName, context);
                REcmaShellGraphicsViewQt* self = dynamic_cast<REcmaShellGraphicsViewQt*>(selfBase);
                //return REcmaHelper::scriptValueTo<REcmaShellGraphicsViewQt >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RGraphicsViewQt.%1(): "
                    "This object is not a RGraphicsViewQt").arg(fName),
                    context);
            }

            return self;
            


        }
         void fromScriptValue(const QScriptValue& value,
        RGraphicsViewQt*
        &out) {
            QObject* o = value.toQObject();
            out = qobject_cast<
            RGraphicsViewQt*>(o);
        }
     QScriptValue toScriptValue(QScriptEngine *engine,
        RGraphicsViewQt*
        const &in){
            QScriptValue s = engine->newQObject(in, QScriptEngine::QtOwnership,
            QScriptEngine::PreferExistingWrapperObject);
            /*
            if(s.isNull()){
               REcmaHelper::throwError("This object is null.", engine->currentContext());
            }
            */
            return s;
        }
    