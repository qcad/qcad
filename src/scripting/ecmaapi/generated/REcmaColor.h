// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is copyable.
        
        #ifndef RECMACOLOR_H
        #define RECMACOLOR_H

        #include "ecmaapi_global.h"

        #include <QScriptEngine>
        #include <QScriptValue>
        #include <QScriptContextInfo>
        #include <QDebug>

        
                #include "RColor.h"
            

        /**
         * \ingroup scripting_ecmaapi
         */
        class
        
        QCADECMAAPI_EXPORT
        REcmaColor {

        public:
      static  void initEcma(QScriptEngine& engine, QScriptValue* proto 
    =NULL
    ) 
    ;static  QScriptValue createEcma(QScriptContext* context, QScriptEngine* engine) 
    ;

    // conversion functions for base classes:
    static  QScriptValue getQColor(QScriptContext *context,
            QScriptEngine *engine)
        ;

    // returns class name:
    static  QScriptValue getClassName(QScriptContext *context, QScriptEngine *engine) 
        ;

    // returns all base classes (in case of multiple inheritance):
    static  QScriptValue getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        ;

    // properties:
    

    // public methods:
    static  QScriptValue
        getCustomColorCode
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getColorIndex
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        removeColor
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        addColor
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        createFromCadIndex
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        createFromCadCustom
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        createFromName
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getList
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getIcon
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getHash
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        isValid
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getName
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        isByLayer
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        isByBlock
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        isFixed
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        toCompat
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        setCompat
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getHighlighted
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        getFaded
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        equals
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        operator_not_assign
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue
        operator_less
        (QScriptContext* context, QScriptEngine* engine) 
        ;static  QScriptValue toString
    (QScriptContext *context, QScriptEngine *engine)
    ;static  QScriptValue copy
    (QScriptContext *context, QScriptEngine *engine)
    ;static  QScriptValue destroy(QScriptContext *context, QScriptEngine *engine)
    ;static RColor* getSelf(const QString& fName, QScriptContext* context)
    ;static RColor* getSelfShell(const QString& fName, QScriptContext* context)
    ;static  QScriptValue toScriptValueEnumMode(QScriptEngine* engine, const RColor::Mode& value)
    ;static  void fromScriptValueEnumMode(const QScriptValue& value, RColor::Mode& out)
    ;};
    #endif
    