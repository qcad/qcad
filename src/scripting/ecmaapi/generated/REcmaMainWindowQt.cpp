// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is not copyable.
        
        #include "REcmaMainWindowQt.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
                #include <QMdiArea>
            
                #include <QMdiSubWindow>
            
                #include "RBlockListener.h"
            
                #include "RCoordinateListener.h"
            
                #include "RDocument.h"
            
                #include "RDocumentInterface.h"
            
                #include "RFocusListener.h"
            
                #include "RGraphicsView.h"
            
                #include "RKeyListener.h"
            
                #include "RLayerListener.h"
            
                #include "RMdiArea.h"
            
                #include "RMdiChildQt.h"
            
                #include "RNewDocumentListener.h"
            
                #include "RPaletteListener.h"
            
                #include "RPenListener.h"
            
                #include "RPreferencesListener.h"
            
                #include "RPropertyListener.h"
            
                #include "RSelectionListener.h"
            
                #include "RSnapListener.h"
            
                #include "RUcsListener.h"
            
                #include "RViewFocusListener.h"
            
                #include "RViewListener.h"
            
            
        // includes for base ecma wrapper classes
        
                  #include "REcmaMainWindow.h"
                 void REcmaMainWindowQt::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RMainWindowQt*) 0)));
        protoCreated = true;
    }

    
        // primary base class QMainWindow:
        
            QScriptValue dpt = engine.defaultPrototype(
                qMetaTypeId<QMainWindow*>());

            if (dpt.isValid()) {
                proto->setPrototype(dpt);
            }
          
        /*
        REcmaMainWindow::initEcma(engine, proto);
          
        */
    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    
        // conversion for base class QMainWindow
        REcmaHelper::registerFunction(&engine, proto, getQMainWindow, "getQMainWindow");
        
        // conversion for base class RMainWindow
        REcmaHelper::registerFunction(&engine, proto, getRMainWindow, "getRMainWindow");
        
        // conversion for base class RProgressHandler
        REcmaHelper::registerFunction(&engine, proto, getRProgressHandler, "getRProgressHandler");
        
        // conversion for base class RMessageHandler
        REcmaHelper::registerFunction(&engine, proto, getRMessageHandler, "getRMessageHandler");
        

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

        // properties of secondary base class RMainWindow:
        

        // methods of secondary base class RMainWindow:
        
            REcmaHelper::registerFunction(&engine, proto, notifyListeners, "notifyListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addCoordinateListener, "addCoordinateListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeCoordinateListener, "removeCoordinateListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyCoordinateListeners, "notifyCoordinateListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addSelectionListener, "addSelectionListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeSelectionListener, "removeSelectionListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifySelectionListeners, "notifySelectionListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addPropertyListener, "addPropertyListener");
            
            REcmaHelper::registerFunction(&engine, proto, removePropertyListener, "removePropertyListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyPropertyListeners, "notifyPropertyListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addExportListener, "addExportListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeExportListener, "removeExportListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyExportListenersPre, "notifyExportListenersPre");
            
            REcmaHelper::registerFunction(&engine, proto, notifyExportListenersPost, "notifyExportListenersPost");
            
            REcmaHelper::registerFunction(&engine, proto, notifyExportListenersEnd, "notifyExportListenersEnd");
            
            REcmaHelper::registerFunction(&engine, proto, addEntityExportListener, "addEntityExportListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeEntityExportListener, "removeEntityExportListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyEntityExportListeners, "notifyEntityExportListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addImportListener, "addImportListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeImportListener, "removeImportListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyImportListenersPre, "notifyImportListenersPre");
            
            REcmaHelper::registerFunction(&engine, proto, notifyImportListenersPost, "notifyImportListenersPost");
            
            REcmaHelper::registerFunction(&engine, proto, addTransactionListener, "addTransactionListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeTransactionListener, "removeTransactionListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyTransactionListeners, "notifyTransactionListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addInterTransactionListener, "addInterTransactionListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeInterTransactionListener, "removeInterTransactionListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyInterTransactionListeners, "notifyInterTransactionListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addNewDocumentListener, "addNewDocumentListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeNewDocumentListener, "removeNewDocumentListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyNewDocumentListeners, "notifyNewDocumentListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addSnapListener, "addSnapListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeSnapListener, "removeSnapListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifySnapListeners, "notifySnapListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addFocusListener, "addFocusListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeFocusListener, "removeFocusListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyFocusListeners, "notifyFocusListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addKeyListener, "addKeyListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeKeyListener, "removeKeyListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyKeyListeners, "notifyKeyListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addViewFocusListener, "addViewFocusListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeViewFocusListener, "removeViewFocusListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyViewFocusListeners, "notifyViewFocusListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addPreferencesListener, "addPreferencesListener");
            
            REcmaHelper::registerFunction(&engine, proto, removePreferencesListener, "removePreferencesListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyPreferencesListeners, "notifyPreferencesListeners");
            
            REcmaHelper::registerFunction(&engine, proto, propertyChangeEvent, "propertyChangeEvent");
            
            REcmaHelper::registerFunction(&engine, proto, addUcsListener, "addUcsListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeUcsListener, "removeUcsListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyUcsListeners, "notifyUcsListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addLayerListener, "addLayerListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeLayerListener, "removeLayerListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyLayerListeners, "notifyLayerListeners");
            
            REcmaHelper::registerFunction(&engine, proto, notifyLayerListenersCurrentLayer, "notifyLayerListenersCurrentLayer");
            
            REcmaHelper::registerFunction(&engine, proto, addBlockListener, "addBlockListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeBlockListener, "removeBlockListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyBlockListeners, "notifyBlockListeners");
            
            REcmaHelper::registerFunction(&engine, proto, notifyBlockListenersCurrentBlock, "notifyBlockListenersCurrentBlock");
            
            REcmaHelper::registerFunction(&engine, proto, addViewListener, "addViewListener");
            
            REcmaHelper::registerFunction(&engine, proto, removeViewListener, "removeViewListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyViewListeners, "notifyViewListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addPenListener, "addPenListener");
            
            REcmaHelper::registerFunction(&engine, proto, removePenListener, "removePenListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyPenListeners, "notifyPenListeners");
            
            REcmaHelper::registerFunction(&engine, proto, addPaletteListener, "addPaletteListener");
            
            REcmaHelper::registerFunction(&engine, proto, removePaletteListener, "removePaletteListener");
            
            REcmaHelper::registerFunction(&engine, proto, notifyPaletteListeners, "notifyPaletteListeners");
            
            REcmaHelper::registerFunction(&engine, proto, ucsSetEvent, "ucsSetEvent");
            
            REcmaHelper::registerFunction(&engine, proto, eval, "eval");
            

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, getWidth, "getWidth");
            
            REcmaHelper::registerFunction(&engine, proto, getHeight, "getHeight");
            
            REcmaHelper::registerFunction(&engine, proto, getPositionX, "getPositionX");
            
            REcmaHelper::registerFunction(&engine, proto, getPositionY, "getPositionY");
            
            REcmaHelper::registerFunction(&engine, proto, resize, "resize");
            
            REcmaHelper::registerFunction(&engine, proto, move, "move");
            
            REcmaHelper::registerFunction(&engine, proto, disable, "disable");
            
            REcmaHelper::registerFunction(&engine, proto, enable, "enable");
            
            REcmaHelper::registerFunction(&engine, proto, getDocument, "getDocument");
            
            REcmaHelper::registerFunction(&engine, proto, getDocumentInterface, "getDocumentInterface");
            
            REcmaHelper::registerFunction(&engine, proto, handleUserMessage, "handleUserMessage");
            
            REcmaHelper::registerFunction(&engine, proto, handleUserInfo, "handleUserInfo");
            
            REcmaHelper::registerFunction(&engine, proto, handleUserWarning, "handleUserWarning");
            
            REcmaHelper::registerFunction(&engine, proto, handleUserCommand, "handleUserCommand");
            
            REcmaHelper::registerFunction(&engine, proto, postSelectionChangedEvent, "postSelectionChangedEvent");
            
            REcmaHelper::registerFunction(&engine, proto, postTransactionEvent, "postTransactionEvent");
            
            REcmaHelper::registerFunction(&engine, proto, postPropertyEvent, "postPropertyEvent");
            
            REcmaHelper::registerFunction(&engine, proto, postCloseEvent, "postCloseEvent");
            
            REcmaHelper::registerFunction(&engine, proto, getMdiChild, "getMdiChild");
            
            REcmaHelper::registerFunction(&engine, proto, getTabBar, "getTabBar");
            
            REcmaHelper::registerFunction(&engine, proto, getMdiArea, "getMdiArea");
            
            REcmaHelper::registerFunction(&engine, proto, cancelProgress, "cancelProgress");
            
            REcmaHelper::registerFunction(&engine, proto, setProgress, "setProgress");
            
            REcmaHelper::registerFunction(&engine, proto, setProgressEnd, "setProgressEnd");
            
            REcmaHelper::registerFunction(&engine, proto, setProgressText, "setProgressText");
            
            REcmaHelper::registerFunction(&engine, proto, setCommandPrompt, "setCommandPrompt");
            
            REcmaHelper::registerFunction(&engine, proto, setLeftMouseTip, "setLeftMouseTip");
            
            REcmaHelper::registerFunction(&engine, proto, setRightMouseTip, "setRightMouseTip");
            
            REcmaHelper::registerFunction(&engine, proto, showContextMenu, "showContextMenu");
            
            REcmaHelper::registerFunction(&engine, proto, escapeEvent, "escapeEvent");
            
            REcmaHelper::registerFunction(&engine, proto, setGraphicsViewCursor, "setGraphicsViewCursor");
            
            REcmaHelper::registerFunction(&engine, proto, readSettings, "readSettings");
            
            REcmaHelper::registerFunction(&engine, proto, writeSettings, "writeSettings");
            
            REcmaHelper::registerFunction(&engine, proto, createPopupMenu, "createPopupMenu");
            
            REcmaHelper::registerFunction(&engine, proto, getChildWidget, "getChildWidget");
            
            REcmaHelper::registerFunction(&engine, proto, getDockWidgets, "getDockWidgets");
            
            REcmaHelper::registerFunction(&engine, proto, getToolBars, "getToolBars");
            
            REcmaHelper::registerFunction(&engine, proto, clearKeyLog, "clearKeyLog");
            
            REcmaHelper::registerFunction(&engine, proto, getKeyLog, "getKeyLog");
            
            REcmaHelper::registerFunction(&engine, proto, quit, "quit");
            
            REcmaHelper::registerFunction(&engine, proto, currentTabChanged, "currentTabChanged");
            
            REcmaHelper::registerFunction(&engine, proto, subWindowActivated, "subWindowActivated");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RMainWindowQt*>(), *proto);

        
                        qScriptRegisterMetaType<
                        RMainWindowQt*>(
                        &engine, toScriptValue, fromScriptValue, *proto);
                    
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    
            REcmaHelper::registerFunction(&engine, &ctor, getMainWindow, "getMainWindow");
            

    // static properties:
    

    // enum values:
    

    // enum conversions:
    
        
    // init class:
    engine.globalObject().setProperty("RMainWindowQt",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaMainWindowQt::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
    if (context->thisObject().strictlyEquals(
       engine->globalObject())) {
       return REcmaHelper::throwError(
       QString::fromLatin1("RMainWindowQt(): Did you forget to construct with 'new'?"),
           context);
    }

    QScriptValue result;
        
            // generate constructor variants:
            
    if( context->argumentCount() ==
        0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ constructor:
    
            // non-copyable class:
            RMainWindowQt
                    * cppResult =
                    new
                    RMainWindowQt
                    ();
                
                    result = engine->newQObject(context->thisObject(), cppResult, QScriptEngine::QtOwnership);
                
    } else 

    if( context->argumentCount() ==
        1
                && (
                
                        context->argument(
                        0
                        ).isQObject()
                        ||
                    
                        context->argument(
                        0
                        ).isNull()
                ) /* type: QWidget * */
            
    ){
    // prepare arguments:
    
            // argument isQObject
            QWidget *
            a0 =
            qobject_cast<
            QWidget *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
    // end of arguments

    // call C++ constructor:
    
            // non-copyable class:
            RMainWindowQt
                    * cppResult =
                    new
                    RMainWindowQt
                    (
                    a0
                    );
                
                    result = engine->newQObject(context->thisObject(), cppResult, QScriptEngine::QtOwnership);
                
    } else 

    if( context->argumentCount() ==
        2
                && (
                
                        context->argument(
                        0
                        ).isQObject()
                        ||
                    
                        context->argument(
                        0
                        ).isNull()
                ) /* type: QWidget * */
            
                && (
                
                        context->argument(
                        1
                        ).isBool()
                ) /* type: bool */
            
    ){
    // prepare arguments:
    
            // argument isQObject
            QWidget *
            a0 =
            qobject_cast<
            QWidget *>
            ( context->argument(
            0
            ).
            toQObject()
            );
        
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ constructor:
    
            // non-copyable class:
            RMainWindowQt
                    * cppResult =
                    new
                    RMainWindowQt
                    (
                    a0
        ,
    a1
                    );
                
                    result = engine->newQObject(context->thisObject(), cppResult, QScriptEngine::QtOwnership);
                
    } else 

    {
       return REcmaHelper::throwError(
       QString::fromLatin1("RMainWindowQt(): no matching constructor found."),
           context);
    }
    
    return result;
    }
    

    // conversion functions for base classes:
     QScriptValue REcmaMainWindowQt::getQMainWindow(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                QMainWindow* cppResult =
                    qscriptvalue_cast<RMainWindowQt*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
             QScriptValue REcmaMainWindowQt::getRMainWindow(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RMainWindow* cppResult =
                    qscriptvalue_cast<RMainWindowQt*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
             QScriptValue REcmaMainWindowQt::getRProgressHandler(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RProgressHandler* cppResult =
                    qscriptvalue_cast<RMainWindowQt*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
             QScriptValue REcmaMainWindowQt::getRMessageHandler(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RMessageHandler* cppResult =
                    qscriptvalue_cast<RMainWindowQt*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
            

    // returns class name:
     QScriptValue REcmaMainWindowQt::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RMainWindowQt"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaMainWindowQt::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        
        list.append("QMainWindow");
    
        list.append("RMainWindow");
    
        list.append("RProgressHandler");
    
        list.append("RMessageHandler");
    

        return qScriptValueFromSequence(engine, list);
    }
    
        // properties of secondary base class RMainWindow:
        

        // methods of secondary base class RMainWindow:
         QScriptValue
        REcmaMainWindowQt::hasMainWindow
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::hasMainWindow", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::hasMainWindow";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        RMainWindow::
       hasMainWindow();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.hasMainWindow().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::hasMainWindow", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::installMessageHandler
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::installMessageHandler", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::installMessageHandler";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    RMainWindow::
       installMessageHandler();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.installMessageHandler().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::installMessageHandler", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::getDocumentInterfaceStatic
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::getDocumentInterfaceStatic", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::getDocumentInterfaceStatic";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RDocumentInterface *'
    RDocumentInterface * cppResult =
        RMainWindow::
       getDocumentInterfaceStatic();
        // return type: RDocumentInterface *
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.getDocumentInterfaceStatic().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::getDocumentInterfaceStatic", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyListeners();
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::addCoordinateListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::addCoordinateListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::addCoordinateListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("addCoordinateListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RCoordinateListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RCoordinateListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RCoordinateListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RCoordinateListener *RCoordinateListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addCoordinateListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.addCoordinateListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::addCoordinateListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::removeCoordinateListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::removeCoordinateListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::removeCoordinateListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("removeCoordinateListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RCoordinateListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RCoordinateListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RCoordinateListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RCoordinateListener *RCoordinateListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeCoordinateListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.removeCoordinateListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::removeCoordinateListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyCoordinateListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyCoordinateListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyCoordinateListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyCoordinateListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyCoordinateListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyCoordinateListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyCoordinateListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::addSelectionListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::addSelectionListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::addSelectionListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("addSelectionListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RSelectionListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RSelectionListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RSelectionListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RSelectionListener *RSelectionListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addSelectionListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.addSelectionListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::addSelectionListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::removeSelectionListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::removeSelectionListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::removeSelectionListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("removeSelectionListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RSelectionListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RSelectionListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RSelectionListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RSelectionListener *RSelectionListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeSelectionListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.removeSelectionListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::removeSelectionListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifySelectionListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifySelectionListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifySelectionListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifySelectionListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifySelectionListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifySelectionListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifySelectionListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::addPropertyListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::addPropertyListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::addPropertyListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("addPropertyListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RPropertyListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RPropertyListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RPropertyListener *RPropertyListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addPropertyListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.addPropertyListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::addPropertyListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::removePropertyListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::removePropertyListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::removePropertyListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("removePropertyListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RPropertyListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RPropertyListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RPropertyListener *RPropertyListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removePropertyListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.removePropertyListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::removePropertyListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyPropertyListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyPropertyListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyPropertyListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyPropertyListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocument * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocument *RDocument *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyPropertyListeners(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument * */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocument * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocument *RDocument *.", context);                    
                    }
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyPropertyListeners(a0
        ,
    a1);
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument * */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
     && (
            context->argument(2).isNumber()
        ) /* type: RS::EntityType */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocument * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocument *RDocument *.", context);                    
                    }
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
                    // argument isStandardType
                    RS::EntityType
                    a2 =
                    (RS::EntityType)
                    (int)
                    context->argument( 2 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyPropertyListeners(a0
        ,
    a1
        ,
    a2);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: REntity */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RDocument*
                    ap0 =
                    qscriptvalue_cast<
                    RDocument*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocument*.",
                               context);                    
                    }
                    RDocument& a0 = *ap0;
                
                    // argument is reference
                    REntity*
                    ap1 =
                    qscriptvalue_cast<
                    REntity*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if( ap1 == NULL ){
                           return REcmaHelper::throwError("RMainWindow: Argument 1 is not of type REntity*.",
                               context);                    
                    }
                    REntity& a1 = *ap1;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyPropertyListeners(a0
        ,
    a1);
    } else


        
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyPropertyListeners();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyPropertyListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyPropertyListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::addExportListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::addExportListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::addExportListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("addExportListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RExportListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RExportListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RExportListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RExportListener *RExportListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addExportListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.addExportListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::addExportListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::removeExportListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::removeExportListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::removeExportListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("removeExportListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RExportListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RExportListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RExportListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RExportListener *RExportListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeExportListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.removeExportListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::removeExportListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyExportListenersPre
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyExportListenersPre", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyExportListenersPre";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyExportListenersPre", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyExportListenersPre(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyExportListenersPre().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyExportListenersPre", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyExportListenersPost
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyExportListenersPost", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyExportListenersPost";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyExportListenersPost", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyExportListenersPost(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyExportListenersPost().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyExportListenersPost", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyExportListenersEnd
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyExportListenersEnd", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyExportListenersEnd";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyExportListenersEnd", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RExporter * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RExporter * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RExporter >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RExporter *RExporter *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyExportListenersEnd(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyExportListenersEnd().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyExportListenersEnd", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::addEntityExportListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::addEntityExportListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::addEntityExportListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("addEntityExportListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: REntityExportListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    REntityExportListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<REntityExportListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type REntityExportListener *REntityExportListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addEntityExportListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.addEntityExportListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::addEntityExportListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::removeEntityExportListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::removeEntityExportListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::removeEntityExportListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("removeEntityExportListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: REntityExportListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    REntityExportListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<REntityExportListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type REntityExportListener *REntityExportListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeEntityExportListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.removeEntityExportListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::removeEntityExportListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyEntityExportListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyEntityExportListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyEntityExportListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyEntityExportListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RExporter * */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: REntity * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RExporter * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RExporter >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RExporter *RExporter *.", context);                    
                    }
                
                    // argument is pointer
                    REntity * a1 = NULL;

                    a1 = 
                        REcmaHelper::scriptValueTo<REntity >(
                            context->argument(1)
                        );
                    
                    if (a1==NULL && 
                        !context->argument(1).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 1 is not of type REntity *REntity *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyEntityExportListeners(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyEntityExportListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyEntityExportListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::addImportListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::addImportListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::addImportListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("addImportListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RImportListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RImportListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RImportListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RImportListener *RImportListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addImportListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.addImportListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::addImportListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::removeImportListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::removeImportListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::removeImportListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("removeImportListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RImportListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RImportListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RImportListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RImportListener *RImportListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeImportListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.removeImportListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::removeImportListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyImportListenersPre
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyImportListenersPre", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyImportListenersPre";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyImportListenersPre", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyImportListenersPre(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyImportListenersPre().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyImportListenersPre", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyImportListenersPost
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyImportListenersPost", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyImportListenersPost";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyImportListenersPost", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyImportListenersPost(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyImportListenersPost().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyImportListenersPost", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::addTransactionListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::addTransactionListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::addTransactionListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("addTransactionListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RTransactionListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RTransactionListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RTransactionListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RTransactionListener *RTransactionListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addTransactionListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.addTransactionListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::addTransactionListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::removeTransactionListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::removeTransactionListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::removeTransactionListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("removeTransactionListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RTransactionListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RTransactionListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RTransactionListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RTransactionListener *RTransactionListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeTransactionListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.removeTransactionListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::removeTransactionListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyTransactionListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyTransactionListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyTransactionListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyTransactionListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocument * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocument *RDocument *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyTransactionListeners(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument * */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RTransaction * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocument * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocument *RDocument *.", context);                    
                    }
                
                    // argument is pointer
                    RTransaction * a1 = NULL;

                    a1 = 
                        REcmaHelper::scriptValueTo<RTransaction >(
                            context->argument(1)
                        );
                    
                    if (a1==NULL && 
                        !context->argument(1).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 1 is not of type RTransaction *RTransaction *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyTransactionListeners(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyTransactionListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyTransactionListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::addInterTransactionListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::addInterTransactionListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::addInterTransactionListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("addInterTransactionListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RInterTransactionListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RInterTransactionListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RInterTransactionListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RInterTransactionListener *RInterTransactionListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addInterTransactionListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.addInterTransactionListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::addInterTransactionListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::removeInterTransactionListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::removeInterTransactionListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::removeInterTransactionListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("removeInterTransactionListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RInterTransactionListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RInterTransactionListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RInterTransactionListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RInterTransactionListener *RInterTransactionListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeInterTransactionListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.removeInterTransactionListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::removeInterTransactionListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyInterTransactionListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyInterTransactionListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyInterTransactionListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyInterTransactionListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocument * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocument *RDocument *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyInterTransactionListeners(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument * */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RTransaction * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocument * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocument *RDocument *.", context);                    
                    }
                
                    // argument is pointer
                    RTransaction * a1 = NULL;

                    a1 = 
                        REcmaHelper::scriptValueTo<RTransaction >(
                            context->argument(1)
                        );
                    
                    if (a1==NULL && 
                        !context->argument(1).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 1 is not of type RTransaction *RTransaction *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyInterTransactionListeners(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyInterTransactionListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyInterTransactionListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::addNewDocumentListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::addNewDocumentListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::addNewDocumentListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("addNewDocumentListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RNewDocumentListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RNewDocumentListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RNewDocumentListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RNewDocumentListener *RNewDocumentListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addNewDocumentListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.addNewDocumentListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::addNewDocumentListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::removeNewDocumentListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::removeNewDocumentListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::removeNewDocumentListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("removeNewDocumentListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RNewDocumentListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RNewDocumentListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RNewDocumentListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RNewDocumentListener *RNewDocumentListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeNewDocumentListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.removeNewDocumentListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::removeNewDocumentListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyNewDocumentListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyNewDocumentListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyNewDocumentListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyNewDocumentListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocument * */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RTransaction * */
     && (
            context->argument(2).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocument * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocument >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocument *RDocument *.", context);                    
                    }
                
                    // argument is pointer
                    RTransaction * a1 = NULL;

                    a1 = 
                        REcmaHelper::scriptValueTo<RTransaction >(
                            context->argument(1)
                        );
                    
                    if (a1==NULL && 
                        !context->argument(1).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 1 is not of type RTransaction *RTransaction *.", context);                    
                    }
                
                    // argument isStandardType
                    bool
                    a2 =
                    (bool)
                    
                    context->argument( 2 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyNewDocumentListeners(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyNewDocumentListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyNewDocumentListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::addSnapListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::addSnapListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::addSnapListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("addSnapListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RSnapListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RSnapListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RSnapListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RSnapListener *RSnapListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addSnapListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.addSnapListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::addSnapListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::removeSnapListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::removeSnapListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::removeSnapListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("removeSnapListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RSnapListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RSnapListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RSnapListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RSnapListener *RSnapListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeSnapListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.removeSnapListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::removeSnapListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifySnapListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifySnapListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifySnapListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifySnapListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifySnapListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifySnapListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifySnapListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::addFocusListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::addFocusListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::addFocusListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("addFocusListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RFocusListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RFocusListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RFocusListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RFocusListener *RFocusListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addFocusListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.addFocusListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::addFocusListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::removeFocusListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::removeFocusListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::removeFocusListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("removeFocusListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RFocusListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RFocusListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RFocusListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RFocusListener *RFocusListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeFocusListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.removeFocusListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::removeFocusListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyFocusListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyFocusListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyFocusListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyFocusListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyFocusListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyFocusListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyFocusListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::addKeyListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::addKeyListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::addKeyListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("addKeyListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RKeyListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RKeyListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RKeyListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RKeyListener *RKeyListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addKeyListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.addKeyListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::addKeyListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::removeKeyListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::removeKeyListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::removeKeyListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("removeKeyListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RKeyListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RKeyListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RKeyListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RKeyListener *RKeyListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeKeyListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.removeKeyListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::removeKeyListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyKeyListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyKeyListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyKeyListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyKeyListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QKeyEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QKeyEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QKeyEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type QKeyEvent *QKeyEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyKeyListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyKeyListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyKeyListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::addViewFocusListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::addViewFocusListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::addViewFocusListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("addViewFocusListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RViewFocusListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RViewFocusListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RViewFocusListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RViewFocusListener *RViewFocusListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addViewFocusListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.addViewFocusListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::addViewFocusListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::removeViewFocusListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::removeViewFocusListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::removeViewFocusListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("removeViewFocusListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RViewFocusListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RViewFocusListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RViewFocusListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RViewFocusListener *RViewFocusListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeViewFocusListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.removeViewFocusListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::removeViewFocusListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyViewFocusListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyViewFocusListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyViewFocusListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyViewFocusListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RGraphicsView * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RGraphicsView * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RGraphicsView >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RGraphicsView *RGraphicsView *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyViewFocusListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyViewFocusListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyViewFocusListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::addPreferencesListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::addPreferencesListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::addPreferencesListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("addPreferencesListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPreferencesListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RPreferencesListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RPreferencesListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RPreferencesListener *RPreferencesListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addPreferencesListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.addPreferencesListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::addPreferencesListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::removePreferencesListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::removePreferencesListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::removePreferencesListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("removePreferencesListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPreferencesListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RPreferencesListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RPreferencesListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RPreferencesListener *RPreferencesListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removePreferencesListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.removePreferencesListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::removePreferencesListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyPreferencesListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyPreferencesListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyPreferencesListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyPreferencesListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyPreferencesListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyPreferencesListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyPreferencesListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::propertyChangeEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::propertyChangeEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::propertyChangeEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("propertyChangeEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyEvent */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RPropertyEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RPropertyEvent.",
                               context);                    
                    }
                    RPropertyEvent 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->propertyChangeEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.propertyChangeEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::propertyChangeEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::addUcsListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::addUcsListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::addUcsListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("addUcsListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RUcsListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RUcsListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RUcsListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RUcsListener *RUcsListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addUcsListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.addUcsListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::addUcsListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::removeUcsListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::removeUcsListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::removeUcsListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("removeUcsListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RUcsListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RUcsListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RUcsListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RUcsListener *RUcsListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeUcsListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.removeUcsListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::removeUcsListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyUcsListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyUcsListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyUcsListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyUcsListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyUcsListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyUcsListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyUcsListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::addLayerListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::addLayerListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::addLayerListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("addLayerListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RLayerListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RLayerListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RLayerListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RLayerListener *RLayerListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addLayerListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.addLayerListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::addLayerListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::removeLayerListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::removeLayerListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::removeLayerListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("removeLayerListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RLayerListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RLayerListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RLayerListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RLayerListener *RLayerListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeLayerListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.removeLayerListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::removeLayerListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyLayerListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyLayerListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyLayerListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyLayerListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
     && (
            context->argument(1).isArray()
        ) /* type: QList < RLayer::Id > */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
                    // argument isArray
                    QList < RLayer::Id >
                    a1;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(1),
                        a1
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyLayerListeners(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyLayerListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyLayerListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyLayerListenersCurrentLayer
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyLayerListenersCurrentLayer", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyLayerListenersCurrentLayer";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyLayerListenersCurrentLayer", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
     && (
            context->argument(1).isNumber()
        ) /* type: RLayer::Id */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
                    // argument isStandardType
                    RLayer::Id
                    a1 =
                    (RLayer::Id)
                    (int)
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyLayerListenersCurrentLayer(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyLayerListenersCurrentLayer().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyLayerListenersCurrentLayer", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::addBlockListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::addBlockListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::addBlockListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("addBlockListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RBlockListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RBlockListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RBlockListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RBlockListener *RBlockListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addBlockListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.addBlockListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::addBlockListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::removeBlockListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::removeBlockListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::removeBlockListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("removeBlockListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RBlockListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RBlockListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RBlockListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RBlockListener *RBlockListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeBlockListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.removeBlockListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::removeBlockListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyBlockListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyBlockListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyBlockListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyBlockListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyBlockListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyBlockListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyBlockListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyBlockListenersCurrentBlock
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyBlockListenersCurrentBlock", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyBlockListenersCurrentBlock";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyBlockListenersCurrentBlock", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyBlockListenersCurrentBlock(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyBlockListenersCurrentBlock().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyBlockListenersCurrentBlock", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::addViewListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::addViewListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::addViewListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("addViewListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RViewListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RViewListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RViewListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RViewListener *RViewListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addViewListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.addViewListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::addViewListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::removeViewListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::removeViewListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::removeViewListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("removeViewListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RViewListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RViewListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RViewListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RViewListener *RViewListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removeViewListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.removeViewListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::removeViewListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyViewListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyViewListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyViewListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyViewListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyViewListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyViewListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyViewListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::addPenListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::addPenListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::addPenListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("addPenListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPenListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RPenListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RPenListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RPenListener *RPenListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addPenListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.addPenListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::addPenListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::removePenListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::removePenListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::removePenListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("removePenListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPenListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RPenListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RPenListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RPenListener *RPenListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removePenListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.removePenListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::removePenListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyPenListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyPenListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyPenListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyPenListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RDocumentInterface * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RDocumentInterface * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RDocumentInterface >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RDocumentInterface *RDocumentInterface *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyPenListeners(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyPenListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyPenListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::addPaletteListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::addPaletteListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::addPaletteListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("addPaletteListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPaletteListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RPaletteListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RPaletteListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RPaletteListener *RPaletteListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->addPaletteListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.addPaletteListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::addPaletteListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::removePaletteListener
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::removePaletteListener", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::removePaletteListener";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("removePaletteListener", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPaletteListener * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RPaletteListener * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RPaletteListener >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindow: Argument 0 is not of type RPaletteListener *RPaletteListener *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->removePaletteListener(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.removePaletteListener().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::removePaletteListener", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::notifyPaletteListeners
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::notifyPaletteListeners", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::notifyPaletteListeners";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("notifyPaletteListeners", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->notifyPaletteListeners();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.notifyPaletteListeners().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::notifyPaletteListeners", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::ucsSetEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::ucsSetEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::ucsSetEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("ucsSetEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->ucsSetEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.ucsSetEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::ucsSetEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::eval
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::eval", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::eval";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("eval", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    QString
                    a1 =
                    (QString)
                    
                    context->argument( 1 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QVariant'
    QVariant cppResult =
        
               self->eval(a0
        ,
    a1);
        // return type: QVariant
                // QVariant:
                result = REcmaHelper::toScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.eval().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::eval", context, engine);
            return result;
        }
        

    // properties:
    

    // public methods:
     QScriptValue
        REcmaMainWindowQt::getMainWindow
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::getMainWindow", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::getMainWindow";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RMainWindowQt *'
    RMainWindowQt * cppResult =
        RMainWindowQt::
       getMainWindow();
        // return type: RMainWindowQt *
                // QObject
                result = engine->newQObject(cppResult, QScriptEngine::QtOwnership);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.getMainWindow().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::getMainWindow", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::getWidth
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::getWidth", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::getWidth";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("getWidth", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getWidth();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.getWidth().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::getWidth", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::getHeight
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::getHeight", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::getHeight";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("getHeight", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getHeight();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.getHeight().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::getHeight", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::getPositionX
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::getPositionX", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::getPositionX";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("getPositionX", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getPositionX();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.getPositionX().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::getPositionX", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::getPositionY
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::getPositionY", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::getPositionY";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("getPositionY", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getPositionY();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.getPositionY().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::getPositionY", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::resize
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::resize", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::resize";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("resize", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: int */
     && (
            context->argument(1).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->resize(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.resize().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::resize", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::move
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::move", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::move";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("move", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: int */
     && (
            context->argument(1).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->move(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.move().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::move", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::disable
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::disable", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::disable";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("disable", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->disable();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.disable().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::disable", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::enable
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::enable", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::enable";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("enable", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->enable();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.enable().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::enable", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::getDocument
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::getDocument", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::getDocument";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("getDocument", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RDocument *'
    RDocument * cppResult =
        
               self->getDocument();
        // return type: RDocument *
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.getDocument().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::getDocument", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::getDocumentInterface
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::getDocumentInterface", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::getDocumentInterface";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("getDocumentInterface", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RDocumentInterface *'
    RDocumentInterface * cppResult =
        
               self->getDocumentInterface();
        // return type: RDocumentInterface *
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.getDocumentInterface().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::getDocumentInterface", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::handleUserMessage
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::handleUserMessage", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::handleUserMessage";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("handleUserMessage", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleUserMessage(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleUserMessage(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.handleUserMessage().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::handleUserMessage", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::handleUserInfo
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::handleUserInfo", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::handleUserInfo";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("handleUserInfo", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleUserInfo(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleUserInfo(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.handleUserInfo().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::handleUserInfo", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::handleUserWarning
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::handleUserWarning", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::handleUserWarning";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("handleUserWarning", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleUserWarning(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleUserWarning(a0
        ,
    a1);
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
     && (
            context->argument(2).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
                    // argument isStandardType
                    bool
                    a2 =
                    (bool)
                    
                    context->argument( 2 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleUserWarning(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.handleUserWarning().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::handleUserWarning", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::handleUserCommand
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::handleUserCommand", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::handleUserCommand";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("handleUserCommand", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleUserCommand(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isString()
        ) /* type: QString */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->handleUserCommand(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.handleUserCommand().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::handleUserCommand", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::postSelectionChangedEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::postSelectionChangedEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::postSelectionChangedEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("postSelectionChangedEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->postSelectionChangedEvent();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.postSelectionChangedEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::postSelectionChangedEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::postTransactionEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::postTransactionEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::postTransactionEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("postTransactionEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RTransaction */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RTransaction*
                    ap0 =
                    qscriptvalue_cast<
                    RTransaction*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RMainWindowQt: Argument 0 is not of type RTransaction.",
                               context);                    
                    }
                    RTransaction 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->postTransactionEvent(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RTransaction */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RTransaction*
                    ap0 =
                    qscriptvalue_cast<
                    RTransaction*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RMainWindowQt: Argument 0 is not of type RTransaction.",
                               context);                    
                    }
                    RTransaction 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->postTransactionEvent(a0
        ,
    a1);
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RTransaction */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
     && (
            context->argument(2).isNumber()
        ) /* type: RS::EntityType */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RTransaction*
                    ap0 =
                    qscriptvalue_cast<
                    RTransaction*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RMainWindowQt: Argument 0 is not of type RTransaction.",
                               context);                    
                    }
                    RTransaction 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
                    // argument isStandardType
                    RS::EntityType
                    a2 =
                    (RS::EntityType)
                    (int)
                    context->argument( 2 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->postTransactionEvent(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.postTransactionEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::postTransactionEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::postPropertyEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::postPropertyEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::postPropertyEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("postPropertyEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyTypeId */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNumber() || 
            context->argument(1).isString() || 
            context->argument(1).isBool() || 
            context->argument(1).isArray() || 
            context->argument(1).isNull() || 
            context->argument(1).isUndefined()
        ) /* type: QVariant */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyTypeId*
                    ap0 =
                    qscriptvalue_cast<
                    RPropertyTypeId*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RMainWindowQt: Argument 0 is not of type RPropertyTypeId.",
                               context);                    
                    }
                    RPropertyTypeId 
                    a0 = 
                    *ap0;
                
                    // argument isCopyable or pointer
                    QVariant
                    a1 =
                    qscriptvalue_cast<
                    QVariant
                        >(
                        context->argument(
                        1
                        )
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->postPropertyEvent(a0
        ,
    a1);
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyTypeId */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNumber() || 
            context->argument(1).isString() || 
            context->argument(1).isBool() || 
            context->argument(1).isArray() || 
            context->argument(1).isNull() || 
            context->argument(1).isUndefined()
        ) /* type: QVariant */
     && (
            context->argument(2).isNumber()
        ) /* type: RS::EntityType */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyTypeId*
                    ap0 =
                    qscriptvalue_cast<
                    RPropertyTypeId*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RMainWindowQt: Argument 0 is not of type RPropertyTypeId.",
                               context);                    
                    }
                    RPropertyTypeId 
                    a0 = 
                    *ap0;
                
                    // argument isCopyable or pointer
                    QVariant
                    a1 =
                    qscriptvalue_cast<
                    QVariant
                        >(
                        context->argument(
                        1
                        )
                    );
                
                    // argument isStandardType
                    RS::EntityType
                    a2 =
                    (RS::EntityType)
                    (int)
                    context->argument( 2 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->postPropertyEvent(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.postPropertyEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::postPropertyEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::postCloseEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::postCloseEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::postCloseEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("postCloseEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->postCloseEvent();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.postCloseEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::postCloseEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::getMdiChild
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::getMdiChild", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::getMdiChild";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("getMdiChild", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RMdiChildQt *'
    RMdiChildQt * cppResult =
        
               self->getMdiChild();
        // return type: RMdiChildQt *
                // QObject
                result = engine->newQObject(cppResult, QScriptEngine::QtOwnership);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.getMdiChild().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::getMdiChild", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::getTabBar
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::getTabBar", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::getTabBar";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("getTabBar", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QTabBar *'
    QTabBar * cppResult =
        
               self->getTabBar();
        // return type: QTabBar *
                // QObject
                result = engine->newQObject(cppResult, QScriptEngine::QtOwnership);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.getTabBar().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::getTabBar", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::getMdiArea
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::getMdiArea", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::getMdiArea";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("getMdiArea", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RMdiArea *'
    RMdiArea * cppResult =
        
               self->getMdiArea();
        // return type: RMdiArea *
                // QObject
                result = engine->newQObject(cppResult, QScriptEngine::QtOwnership);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.getMdiArea().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::getMdiArea", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::cancelProgress
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::cancelProgress", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::cancelProgress";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("cancelProgress", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->cancelProgress();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.cancelProgress().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::cancelProgress", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::setProgress
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::setProgress", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::setProgress";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("setProgress", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setProgress(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.setProgress().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::setProgress", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::setProgressEnd
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::setProgressEnd", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::setProgressEnd";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("setProgressEnd", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setProgressEnd();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.setProgressEnd().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::setProgressEnd", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::setProgressText
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::setProgressText", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::setProgressText";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("setProgressText", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setProgressText();
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setProgressText(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.setProgressText().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::setProgressText", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::setCommandPrompt
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::setCommandPrompt", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::setCommandPrompt";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("setCommandPrompt", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setCommandPrompt();
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setCommandPrompt(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.setCommandPrompt().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::setCommandPrompt", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::setLeftMouseTip
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::setLeftMouseTip", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::setLeftMouseTip";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("setLeftMouseTip", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setLeftMouseTip();
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setLeftMouseTip(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.setLeftMouseTip().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::setLeftMouseTip", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::setRightMouseTip
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::setRightMouseTip", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::setRightMouseTip";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("setRightMouseTip", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setRightMouseTip();
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setRightMouseTip(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.setRightMouseTip().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::setRightMouseTip", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::showContextMenu
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::showContextMenu", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::showContextMenu";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("showContextMenu", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: RObject::Id */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RObject::Id
                    a0 =
                    (RObject::Id)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap1 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if (ap1 == NULL) {
                           return REcmaHelper::throwError("RMainWindowQt: Argument 1 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a1 = 
                    *ap1;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->showContextMenu(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.showContextMenu().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::showContextMenu", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::escapeEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::escapeEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::escapeEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("escapeEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->escapeEvent();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.escapeEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::escapeEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::setGraphicsViewCursor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::setGraphicsViewCursor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::setGraphicsViewCursor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("setGraphicsViewCursor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QCursor */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QCursor*
                    ap0 =
                    qscriptvalue_cast<
                    QCursor*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RMainWindowQt: Argument 0 is not of type QCursor*.",
                               context);                    
                    }
                    QCursor& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setGraphicsViewCursor(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.setGraphicsViewCursor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::setGraphicsViewCursor", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::readSettings
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::readSettings", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::readSettings";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("readSettings", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->readSettings();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.readSettings().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::readSettings", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::writeSettings
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::writeSettings", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::writeSettings";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("writeSettings", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->writeSettings();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.writeSettings().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::writeSettings", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::createPopupMenu
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::createPopupMenu", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::createPopupMenu";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("createPopupMenu", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QMenu *'
    QMenu * cppResult =
        
               self->createPopupMenu();
        // return type: QMenu *
                // QObject
                result = engine->newQObject(cppResult, QScriptEngine::QtOwnership);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.createPopupMenu().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::createPopupMenu", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::getChildWidget
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::getChildWidget", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::getChildWidget";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("getChildWidget", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'QWidget *'
    QWidget * cppResult =
        
               self->getChildWidget(a0);
        // return type: QWidget *
                // QObject
                result = engine->newQObject(cppResult, QScriptEngine::QtOwnership);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.getChildWidget().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::getChildWidget", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::getDockWidgets
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::getDockWidgets", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::getDockWidgets";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("getDockWidgets", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QList < QDockWidget * >'
    QList < QDockWidget * > cppResult =
        
               self->getDockWidgets();
        // return type: QList < QDockWidget * >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.getDockWidgets().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::getDockWidgets", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::getToolBars
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::getToolBars", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::getToolBars";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("getToolBars", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QList < QToolBar * >'
    QList < QToolBar * > cppResult =
        
               self->getToolBars();
        // return type: QList < QToolBar * >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.getToolBars().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::getToolBars", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::clearKeyLog
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::clearKeyLog", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::clearKeyLog";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("clearKeyLog", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->clearKeyLog();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.clearKeyLog().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::clearKeyLog", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::getKeyLog
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::getKeyLog", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::getKeyLog";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("getKeyLog", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getKeyLog();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.getKeyLog().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::getKeyLog", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::quit
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::quit", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::quit";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("quit", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->quit();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.quit().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::quit", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::currentTabChanged
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::currentTabChanged", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::currentTabChanged";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("currentTabChanged", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->currentTabChanged(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.currentTabChanged().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::currentTabChanged", context, engine);
            return result;
        }
         QScriptValue
        REcmaMainWindowQt::subWindowActivated
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMainWindowQt::subWindowActivated", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMainWindowQt::subWindowActivated";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMainWindowQt* self = 
                        getSelf("subWindowActivated", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QMdiSubWindow * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QMdiSubWindow * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QMdiSubWindow >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RMainWindowQt: Argument 0 is not of type QMdiSubWindow *QMdiSubWindow *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->subWindowActivated(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMainWindowQt.subWindowActivated().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMainWindowQt::subWindowActivated", context, engine);
            return result;
        }
         QScriptValue REcmaMainWindowQt::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RMainWindowQt* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RMainWindowQt(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaMainWindowQt::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RMainWindowQt* self = getSelf("RMainWindowQt", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RMainWindowQt* REcmaMainWindowQt::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RMainWindowQt* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RMainWindowQt >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RMainWindowQt.%1(): "
                        "This object is not a RMainWindowQt").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RMainWindowQt* REcmaMainWindowQt::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RMainWindowQt* selfBase = getSelf(fName, context);
                RMainWindowQt* self = dynamic_cast<RMainWindowQt*>(selfBase);
                //return REcmaHelper::scriptValueTo<RMainWindowQt >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RMainWindowQt.%1(): "
                    "This object is not a RMainWindowQt").arg(fName),
                    context);
            }

            return self;
            


        }
         void fromScriptValue(const QScriptValue& value,
        RMainWindowQt*
        &out) {
            QObject* o = value.toQObject();
            out = qobject_cast<
            RMainWindowQt*>(o);
        }
     QScriptValue toScriptValue(QScriptEngine *engine,
        RMainWindowQt*
        const &in){
            QScriptValue s = engine->newQObject(in, QScriptEngine::QtOwnership,
            QScriptEngine::PreferExistingWrapperObject);
            /*
            if(s.isNull()){
               REcmaHelper::throwError("This object is null.", engine->currentContext());
            }
            */
            return s;
        }
    