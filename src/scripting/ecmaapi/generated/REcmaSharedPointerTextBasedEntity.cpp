// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is not copyable.
        
        #include "REcmaSharedPointerTextBasedEntity.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
                #include "RDocument.h"
            
                #include "RExporter.h"
            
            
        // includes for base ecma wrapper classes
        
                  #include "REcmaSharedPointerEntity.h"
                 void REcmaSharedPointerTextBasedEntity::init(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RTextBasedEntityPointer*) 0)));
        protoCreated = true;
    }

    
        // primary base class REntity:
        
            proto->setPrototype(engine.defaultPrototype(
            qMetaTypeId<REntityPointer>()));
          
        /*
        
        */
    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    
        // shared pointer support:
        REcmaHelper::registerFunction(&engine, proto, data, "data");
        

        REcmaHelper::registerFunction(&engine, proto, isNull, "isNull");
        

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    
        // conversion for base class REntity
        REcmaHelper::registerFunction(&engine, proto, getREntity, "getREntity");
        
        // conversion for base class RObject
        REcmaHelper::registerFunction(&engine, proto, getRObject, "getRObject");
        

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, getType, "getType");
            
            REcmaHelper::registerFunction(&engine, proto, getData, "getData");
            
            REcmaHelper::registerFunction(&engine, proto, setProperty, "setProperty");
            
            REcmaHelper::registerFunction(&engine, proto, getProperty, "getProperty");
            
            REcmaHelper::registerFunction(&engine, proto, exportEntity, "exportEntity");
            
            REcmaHelper::registerFunction(&engine, proto, getPainterPaths, "getPainterPaths");
            
            REcmaHelper::registerFunction(&engine, proto, getShapes, "getShapes");
            
            REcmaHelper::registerFunction(&engine, proto, getExploded, "getExploded");
            
            REcmaHelper::registerFunction(&engine, proto, getTextData, "getTextData");
            
            REcmaHelper::registerFunction(&engine, proto, isBold, "isBold");
            
            REcmaHelper::registerFunction(&engine, proto, setBold, "setBold");
            
            REcmaHelper::registerFunction(&engine, proto, isItalic, "isItalic");
            
            REcmaHelper::registerFunction(&engine, proto, setItalic, "setItalic");
            
            REcmaHelper::registerFunction(&engine, proto, getPosition, "getPosition");
            
            REcmaHelper::registerFunction(&engine, proto, setPosition, "setPosition");
            
            REcmaHelper::registerFunction(&engine, proto, getAlignmentPoint, "getAlignmentPoint");
            
            REcmaHelper::registerFunction(&engine, proto, setAlignmentPoint, "setAlignmentPoint");
            
            REcmaHelper::registerFunction(&engine, proto, getTextHeight, "getTextHeight");
            
            REcmaHelper::registerFunction(&engine, proto, setTextHeight, "setTextHeight");
            
            REcmaHelper::registerFunction(&engine, proto, getTextWidth, "getTextWidth");
            
            REcmaHelper::registerFunction(&engine, proto, getWidth, "getWidth");
            
            REcmaHelper::registerFunction(&engine, proto, getHeight, "getHeight");
            
            REcmaHelper::registerFunction(&engine, proto, getVAlign, "getVAlign");
            
            REcmaHelper::registerFunction(&engine, proto, setVAlign, "setVAlign");
            
            REcmaHelper::registerFunction(&engine, proto, getHAlign, "getHAlign");
            
            REcmaHelper::registerFunction(&engine, proto, setHAlign, "setHAlign");
            
            REcmaHelper::registerFunction(&engine, proto, getFontName, "getFontName");
            
            REcmaHelper::registerFunction(&engine, proto, setFontName, "setFontName");
            
            REcmaHelper::registerFunction(&engine, proto, setDrawingDirection, "setDrawingDirection");
            
            REcmaHelper::registerFunction(&engine, proto, getDrawingDirection, "getDrawingDirection");
            
            REcmaHelper::registerFunction(&engine, proto, setLineSpacingStyle, "setLineSpacingStyle");
            
            REcmaHelper::registerFunction(&engine, proto, getLineSpacingStyle, "getLineSpacingStyle");
            
            REcmaHelper::registerFunction(&engine, proto, setLineSpacingFactor, "setLineSpacingFactor");
            
            REcmaHelper::registerFunction(&engine, proto, getLineSpacingFactor, "getLineSpacingFactor");
            
            REcmaHelper::registerFunction(&engine, proto, setAngle, "setAngle");
            
            REcmaHelper::registerFunction(&engine, proto, getAngle, "getAngle");
            
            REcmaHelper::registerFunction(&engine, proto, setXScale, "setXScale");
            
            REcmaHelper::registerFunction(&engine, proto, getXScale, "getXScale");
            
            REcmaHelper::registerFunction(&engine, proto, setSimple, "setSimple");
            
            REcmaHelper::registerFunction(&engine, proto, isSimple, "isSimple");
            
            REcmaHelper::registerFunction(&engine, proto, getEscapedText, "getEscapedText");
            
            REcmaHelper::registerFunction(&engine, proto, getPlainText, "getPlainText");
            
            REcmaHelper::registerFunction(&engine, proto, setText, "setText");
            
            REcmaHelper::registerFunction(&engine, proto, sync, "sync");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RTextBasedEntityPointer>(), *proto);
      
    

    QScriptValue ctor = engine.newFunction(create, *proto, 2);
    
    // static methods:
    
            REcmaHelper::registerFunction(&engine, &ctor, init, "init");
            
            REcmaHelper::registerFunction(&engine, &ctor, getStaticPropertyTypeIds, "getStaticPropertyTypeIds");
            

    // static properties:
    
            ctor.setProperty("PropertyCustom",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertyCustom),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyHandle",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertyHandle),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyType",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertyType),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyBlock",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertyBlock),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyLayer",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertyLayer),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyLinetype",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertyLinetype),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyLineweight",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertyLineweight),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyColor",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertyColor),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyDrawOrder",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertyDrawOrder),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertySimple",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertySimple),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyPositionX",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertyPositionX),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyPositionY",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertyPositionY),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyPositionZ",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertyPositionZ),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyText",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertyText),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyPlainText",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertyPlainText),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyFontName",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertyFontName),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyHeight",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertyHeight),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyAngle",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertyAngle),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyXScale",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertyXScale),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyBold",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertyBold),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyItalic",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertyItalic),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyLineSpacingFactor",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertyLineSpacingFactor),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyHAlign",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertyHAlign),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            
            ctor.setProperty("PropertyVAlign",
                qScriptValueFromValue(&engine, RTextBasedEntity::PropertyVAlign),
                QScriptValue::SkipInEnumeration | QScriptValue::ReadOnly);
            

    // enum values:
    

    // enum conversions:
    
        
    // init class:
    engine.globalObject().setProperty("RTextBasedEntityPointer",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaSharedPointerTextBasedEntity::create(QScriptContext* context, QScriptEngine* engine) 
    
    {
           return REcmaHelper::throwError("Abstract class RTextBasedEntity: Cannot be constructed.",
               context); 
    }
    

    // conversion functions for base classes:
     QScriptValue REcmaSharedPointerTextBasedEntity::getREntity(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                REntity* cppResult =
                    qscriptvalue_cast<RTextBasedEntity*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
             QScriptValue REcmaSharedPointerTextBasedEntity::getRObject(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RObject* cppResult =
                    qscriptvalue_cast<RTextBasedEntity*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
            

    // returns class name:
     QScriptValue REcmaSharedPointerTextBasedEntity::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RTextBasedEntity"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaSharedPointerTextBasedEntity::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        
        list.append("REntity");
    
        list.append("RObject");
    

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaSharedPointerTextBasedEntity::init
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::init", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::init";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    RTextBasedEntity::
       init();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.init().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::init", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getStaticPropertyTypeIds
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getStaticPropertyTypeIds", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getStaticPropertyTypeIds";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSet < RPropertyTypeId >'
    QSet < RPropertyTypeId > cppResult =
        RTextBasedEntity::
       getStaticPropertyTypeIds();
        // return type: QSet < RPropertyTypeId >
                // QSet (convert to QVariantList):
                result = REcmaHelper::setToScriptValue(engine, cppResult);

                
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getStaticPropertyTypeIds().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getStaticPropertyTypeIds", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getType
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getType", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getType";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("getType", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RS::EntityType'
    RS::EntityType cppResult =
        
               self->getType();
        // return type: RS::EntityType
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getType().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getType", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getData
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getData", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getData";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("getData", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RTextBasedData &'
    RTextBasedData & cppResult =
        
               self->getData();
        // return type: RTextBasedData &
                // reference
                result = engine->newVariant(
                QVariant::fromValue(&cppResult));
            
    } else


        
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'const RTextBasedData &'
    const RTextBasedData & cppResult =
        
               self->getData();
        // return type: const RTextBasedData &
                // reference
                result = engine->newVariant(
                QVariant::fromValue(&cppResult));
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getData().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getData", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::setProperty
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::setProperty", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::setProperty";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("setProperty", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyTypeId */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNumber() || 
            context->argument(1).isString() || 
            context->argument(1).isBool() || 
            context->argument(1).isArray() || 
            context->argument(1).isNull() || 
            context->argument(1).isUndefined()
        ) /* type: QVariant */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyTypeId*
                    ap0 =
                    qscriptvalue_cast<
                    RPropertyTypeId*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RTextBasedEntity: Argument 0 is not of type RPropertyTypeId.",
                               context);                    
                    }
                    RPropertyTypeId 
                    a0 = 
                    *ap0;
                
                    // argument isCopyable or pointer
                    QVariant
                    a1 =
                    qscriptvalue_cast<
                    QVariant
                        >(
                        context->argument(
                        1
                        )
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->setProperty(a0
        ,
    a1);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyTypeId */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNumber() || 
            context->argument(1).isString() || 
            context->argument(1).isBool() || 
            context->argument(1).isArray() || 
            context->argument(1).isNull() || 
            context->argument(1).isUndefined()
        ) /* type: QVariant */
     && (
            context->argument(2).isVariant() || 
            context->argument(2).isQObject() || 
            context->argument(2).isNull()
        ) /* type: RTransaction * */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyTypeId*
                    ap0 =
                    qscriptvalue_cast<
                    RPropertyTypeId*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RTextBasedEntity: Argument 0 is not of type RPropertyTypeId.",
                               context);                    
                    }
                    RPropertyTypeId 
                    a0 = 
                    *ap0;
                
                    // argument isCopyable or pointer
                    QVariant
                    a1 =
                    qscriptvalue_cast<
                    QVariant
                        >(
                        context->argument(
                        1
                        )
                    );
                
                    // argument is pointer
                    RTransaction * a2 = NULL;

                    a2 = 
                        REcmaHelper::scriptValueTo<RTransaction >(
                            context->argument(2)
                        );
                    
                    if (a2==NULL && 
                        !context->argument(2).isNull()) {
                        return REcmaHelper::throwError("RTextBasedEntity: Argument 2 is not of type RTransaction *RTransaction *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->setProperty(a0
        ,
    a1
        ,
    a2);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.setProperty().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::setProperty", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getProperty
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getProperty", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getProperty";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("getProperty", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyTypeId */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyTypeId*
                    ap0 =
                    qscriptvalue_cast<
                    RPropertyTypeId*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RTextBasedEntity: Argument 0 is not of type RPropertyTypeId.",
                               context);                    
                    }
                    RPropertyTypeId 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'QPair < QVariant , RPropertyAttributes >'
    QPair < QVariant , RPropertyAttributes > cppResult =
        
               self->getProperty(a0);
        // return type: QPair < QVariant , RPropertyAttributes >
                // Pair of ...:
                //result = REcmaHelper::pairToScriptValue(engine, cppResult);
                QVariantList vl;
                QVariant v;
                
                    // first type of pair is variant:
                    if (QString(cppResult.first.typeName())=="RLineweight::Lineweight") {
                        v.setValue((int)cppResult.first.value<RLineweight::Lineweight>());
                    }
                    else {
                        v.setValue(cppResult.first);
                    }
                  

                vl.append(v);
                v.setValue(cppResult.second);
                vl.append(v);
                result = qScriptValueFromValue(engine, vl);
            
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyTypeId */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyTypeId*
                    ap0 =
                    qscriptvalue_cast<
                    RPropertyTypeId*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RTextBasedEntity: Argument 0 is not of type RPropertyTypeId.",
                               context);                    
                    }
                    RPropertyTypeId 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'QPair < QVariant , RPropertyAttributes >'
    QPair < QVariant , RPropertyAttributes > cppResult =
        
               self->getProperty(a0
        ,
    a1);
        // return type: QPair < QVariant , RPropertyAttributes >
                // Pair of ...:
                //result = REcmaHelper::pairToScriptValue(engine, cppResult);
                QVariantList vl;
                QVariant v;
                
                    // first type of pair is variant:
                    if (QString(cppResult.first.typeName())=="RLineweight::Lineweight") {
                        v.setValue((int)cppResult.first.value<RLineweight::Lineweight>());
                    }
                    else {
                        v.setValue(cppResult.first);
                    }
                  

                vl.append(v);
                v.setValue(cppResult.second);
                vl.append(v);
                result = qScriptValueFromValue(engine, vl);
            
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyTypeId */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
     && (
            context->argument(2).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyTypeId*
                    ap0 =
                    qscriptvalue_cast<
                    RPropertyTypeId*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RTextBasedEntity: Argument 0 is not of type RPropertyTypeId.",
                               context);                    
                    }
                    RPropertyTypeId 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
                    // argument isStandardType
                    bool
                    a2 =
                    (bool)
                    
                    context->argument( 2 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'QPair < QVariant , RPropertyAttributes >'
    QPair < QVariant , RPropertyAttributes > cppResult =
        
               self->getProperty(a0
        ,
    a1
        ,
    a2);
        // return type: QPair < QVariant , RPropertyAttributes >
                // Pair of ...:
                //result = REcmaHelper::pairToScriptValue(engine, cppResult);
                QVariantList vl;
                QVariant v;
                
                    // first type of pair is variant:
                    if (QString(cppResult.first.typeName())=="RLineweight::Lineweight") {
                        v.setValue((int)cppResult.first.value<RLineweight::Lineweight>());
                    }
                    else {
                        v.setValue(cppResult.first);
                    }
                  

                vl.append(v);
                v.setValue(cppResult.second);
                vl.append(v);
                result = qScriptValueFromValue(engine, vl);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getProperty().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getProperty", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::exportEntity
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::exportEntity", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::exportEntity";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("exportEntity", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RExporter */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RExporter*
                    ap0 =
                    qscriptvalue_cast<
                    RExporter*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RTextBasedEntity: Argument 0 is not of type RExporter*.",
                               context);                    
                    }
                    RExporter& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportEntity(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RExporter */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RExporter*
                    ap0 =
                    qscriptvalue_cast<
                    RExporter*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RTextBasedEntity: Argument 0 is not of type RExporter*.",
                               context);                    
                    }
                    RExporter& a0 = *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->exportEntity(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.exportEntity().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::exportEntity", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getPainterPaths
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getPainterPaths", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getPainterPaths";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("getPainterPaths", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QList < RPainterPath >'
    QList < RPainterPath > cppResult =
        
               self->getPainterPaths();
        // return type: QList < RPainterPath >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'QList < RPainterPath >'
    QList < RPainterPath > cppResult =
        
               self->getPainterPaths(a0);
        // return type: QList < RPainterPath >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getPainterPaths().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getPainterPaths", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getShapes
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getShapes", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getShapes";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("getShapes", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QList < QSharedPointer < RShape > >'
    QList < QSharedPointer < RShape > > cppResult =
        
               self->getShapes();
        // return type: QList < QSharedPointer < RShape > >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RBox */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RBox*
                    ap0 =
                    qscriptvalue_cast<
                    RBox*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RTextBasedEntity: Argument 0 is not of type RBox.",
                               context);                    
                    }
                    RBox 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'QList < QSharedPointer < RShape > >'
    QList < QSharedPointer < RShape > > cppResult =
        
               self->getShapes(a0);
        // return type: QList < QSharedPointer < RShape > >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getShapes().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getShapes", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getExploded
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getExploded", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getExploded";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("getExploded", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QList < QSharedPointer < RShape > >'
    QList < QSharedPointer < RShape > > cppResult =
        
               self->getExploded();
        // return type: QList < QSharedPointer < RShape > >
                // List of ...:
                result = REcmaHelper::listToScriptValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getExploded().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getExploded", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getTextData
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getTextData", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getTextData";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("getTextData", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RTextBasedData &'
    RTextBasedData & cppResult =
        
               self->getTextData();
        // return type: RTextBasedData &
                // reference
                result = engine->newVariant(
                QVariant::fromValue(&cppResult));
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getTextData().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getTextData", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::isBold
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::isBold", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::isBold";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("isBold", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isBold();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.isBold().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::isBold", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::setBold
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::setBold", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::setBold";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("setBold", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setBold(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.setBold().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::setBold", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::isItalic
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::isItalic", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::isItalic";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("isItalic", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isItalic();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.isItalic().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::isItalic", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::setItalic
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::setItalic", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::setItalic";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("setItalic", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setItalic(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.setItalic().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::setItalic", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getPosition
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getPosition", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getPosition";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("getPosition", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->getPosition();
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getPosition().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getPosition", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::setPosition
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::setPosition", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::setPosition";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("setPosition", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RTextBasedEntity: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setPosition(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.setPosition().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::setPosition", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getAlignmentPoint
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getAlignmentPoint", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getAlignmentPoint";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("getAlignmentPoint", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->getAlignmentPoint();
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getAlignmentPoint().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getAlignmentPoint", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::setAlignmentPoint
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::setAlignmentPoint", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::setAlignmentPoint";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("setAlignmentPoint", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RTextBasedEntity: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setAlignmentPoint(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.setAlignmentPoint().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::setAlignmentPoint", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getTextHeight
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getTextHeight", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getTextHeight";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("getTextHeight", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getTextHeight();
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getTextHeight().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getTextHeight", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::setTextHeight
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::setTextHeight", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::setTextHeight";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("setTextHeight", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setTextHeight(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.setTextHeight().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::setTextHeight", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getTextWidth
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getTextWidth", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getTextWidth";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("getTextWidth", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getTextWidth();
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getTextWidth().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getTextWidth", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getWidth
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getWidth", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getWidth";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("getWidth", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getWidth();
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getWidth().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getWidth", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getHeight
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getHeight", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getHeight";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("getHeight", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getHeight();
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getHeight().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getHeight", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getVAlign
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getVAlign", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getVAlign";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("getVAlign", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RS::VAlign'
    RS::VAlign cppResult =
        
               self->getVAlign();
        // return type: RS::VAlign
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getVAlign().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getVAlign", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::setVAlign
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::setVAlign", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::setVAlign";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("setVAlign", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::VAlign */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::VAlign
                    a0 =
                    (RS::VAlign)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setVAlign(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.setVAlign().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::setVAlign", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getHAlign
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getHAlign", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getHAlign";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("getHAlign", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RS::HAlign'
    RS::HAlign cppResult =
        
               self->getHAlign();
        // return type: RS::HAlign
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getHAlign().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getHAlign", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::setHAlign
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::setHAlign", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::setHAlign";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("setHAlign", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::HAlign */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::HAlign
                    a0 =
                    (RS::HAlign)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setHAlign(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.setHAlign().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::setHAlign", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getFontName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getFontName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getFontName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("getFontName", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getFontName();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getFontName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getFontName", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::setFontName
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::setFontName", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::setFontName";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("setFontName", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setFontName(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.setFontName().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::setFontName", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::setDrawingDirection
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::setDrawingDirection", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::setDrawingDirection";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("setDrawingDirection", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::TextDrawingDirection */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::TextDrawingDirection
                    a0 =
                    (RS::TextDrawingDirection)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setDrawingDirection(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.setDrawingDirection().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::setDrawingDirection", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getDrawingDirection
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getDrawingDirection", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getDrawingDirection";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("getDrawingDirection", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RS::TextDrawingDirection'
    RS::TextDrawingDirection cppResult =
        
               self->getDrawingDirection();
        // return type: RS::TextDrawingDirection
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getDrawingDirection().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getDrawingDirection", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::setLineSpacingStyle
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::setLineSpacingStyle", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::setLineSpacingStyle";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("setLineSpacingStyle", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: RS::TextLineSpacingStyle */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    RS::TextLineSpacingStyle
                    a0 =
                    (RS::TextLineSpacingStyle)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setLineSpacingStyle(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.setLineSpacingStyle().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::setLineSpacingStyle", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getLineSpacingStyle
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getLineSpacingStyle", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getLineSpacingStyle";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("getLineSpacingStyle", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RS::TextLineSpacingStyle'
    RS::TextLineSpacingStyle cppResult =
        
               self->getLineSpacingStyle();
        // return type: RS::TextLineSpacingStyle
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getLineSpacingStyle().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getLineSpacingStyle", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::setLineSpacingFactor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::setLineSpacingFactor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::setLineSpacingFactor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("setLineSpacingFactor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setLineSpacingFactor(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.setLineSpacingFactor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::setLineSpacingFactor", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getLineSpacingFactor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getLineSpacingFactor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getLineSpacingFactor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("getLineSpacingFactor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getLineSpacingFactor();
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getLineSpacingFactor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getLineSpacingFactor", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::setAngle
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::setAngle", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::setAngle";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("setAngle", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setAngle(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.setAngle().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::setAngle", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getAngle
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getAngle", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getAngle";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("getAngle", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getAngle();
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getAngle().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getAngle", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::setXScale
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::setXScale", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::setXScale";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("setXScale", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setXScale(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.setXScale().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::setXScale", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getXScale
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getXScale", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getXScale";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("getXScale", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getXScale();
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getXScale().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getXScale", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::setSimple
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::setSimple", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::setSimple";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("setSimple", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setSimple(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.setSimple().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::setSimple", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::isSimple
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::isSimple", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::isSimple";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("isSimple", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isSimple();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.isSimple().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::isSimple", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getEscapedText
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getEscapedText", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getEscapedText";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("getEscapedText", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getEscapedText();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getEscapedText(a0);
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getEscapedText().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getEscapedText", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::getPlainText
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::getPlainText", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::getPlainText";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("getPlainText", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QString'
    QString cppResult =
        
               self->getPlainText();
        // return type: QString
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.getPlainText().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::getPlainText", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::setText
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::setText", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::setText";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("setText", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    QString
                    a0 =
                    (QString)
                    
                    context->argument( 0 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setText(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.setText().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::setText", context, engine);
            return result;
        }
         QScriptValue
        REcmaSharedPointerTextBasedEntity::sync
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaSharedPointerTextBasedEntity::sync", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaSharedPointerTextBasedEntity::sync";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RTextBasedEntity* self = 
                        getSelf("sync", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RTextBasedEntity */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RTextBasedEntity*
                    ap0 =
                    qscriptvalue_cast<
                    RTextBasedEntity*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RTextBasedEntity: Argument 0 is not of type RTextBasedEntity*.",
                               context);                    
                    }
                    RTextBasedEntity& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->sync(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RTextBasedEntity.sync().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaSharedPointerTextBasedEntity::sync", context, engine);
            return result;
        }
         QScriptValue REcmaSharedPointerTextBasedEntity::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RTextBasedEntity* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RTextBasedEntityPointer(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaSharedPointerTextBasedEntity::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RTextBasedEntity* self = getSelf("RTextBasedEntity", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RTextBasedEntity* REcmaSharedPointerTextBasedEntity::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RTextBasedEntity* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RTextBasedEntityPointer >(context->thisObject())
                
                    ->data()
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RTextBasedEntity.%1(): "
                        "This object is not a RTextBasedEntity").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RTextBasedEntity* REcmaSharedPointerTextBasedEntity::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RTextBasedEntity* selfBase = getSelf(fName, context);
                RTextBasedEntity* self = dynamic_cast<RTextBasedEntity*>(selfBase);
                //return REcmaHelper::scriptValueTo<RTextBasedEntity >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RTextBasedEntity.%1(): "
                    "This object is not a RTextBasedEntity").arg(fName),
                    context);
            }

            return self;
            


        }
         QScriptValue REcmaSharedPointerTextBasedEntity::data
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RTextBasedEntity* self = getSelf("data", context);
    return qScriptValueFromValue(engine, self);
    }
     QScriptValue REcmaSharedPointerTextBasedEntity::isNull
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RTextBasedEntityPointer* self = REcmaHelper::scriptValueTo<RTextBasedEntityPointer >(context->thisObject());

    //RTextBasedEntity* self = getSelf("isNull", context);
    //Q_ASSERT(self!=NULL);
    if (self==NULL) {
        return REcmaHelper::throwError("self is NULL", context);
    }
    return qScriptValueFromValue(engine, self->isNull());
    }
    