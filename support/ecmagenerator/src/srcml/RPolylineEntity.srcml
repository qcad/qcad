<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./entity" filename="RPolylineEntity.h"><comment type="block">/**
 * Copyright (c) 2011-2018 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RPOLYLINEENTITY_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RPOLYLINEENTITY_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"entity_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"REntity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RPolylineData.h"</cpp:file></cpp:include>

<class_decl>class <name>RDocument</name>;</class_decl>
<class_decl>class <name>RExporter</name>;</class_decl>
<class_decl>class <name>RArc</name>;</class_decl>
<class_decl>class <name>RLine</name>;</class_decl>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RDEFAULT_MIN1</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RDEFAULT_MIN1</name> -1</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/**
 * Polyline entity.
 *
 * \scriptable
 * \sharedPointerSupport
 * \ingroup entity
 */</comment>
<class>class <macro><name>QCADENTITY_EXPORT</name></macro> <name>RPolylineEntity</name><super>: <specifier>public</specifier> <name>REntity</name></super> <block>{<private type="default">

</private><public>public:
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyCustom</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyHandle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyProtected</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyWorkingSet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyBlock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyLayer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyLinetype</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyLinetypeScale</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyLineweight</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyColor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyDisplayedColor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyDrawOrder</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyClosed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyPolylineGen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyVertexNX</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyVertexNY</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyVertexNZ</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyBulgeN</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyAngleN</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyStartWidthN</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyEndWidthN</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyGlobalWidth</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyOrientation</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyLength</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyTotalLength</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyArea</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyTotalArea</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyBaseAngle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertySize1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertySize2</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyElevation</name></decl>;</decl_stmt>

<comment type="line">//    static QString TrClockwise;</comment>
<comment type="line">//    static QString TrCounterclockwise;</comment>

</public><public>public:
    <constructor_decl><name>RPolylineEntity</name><parameter_list>(<param><decl><type><name>RDocument</name>*</type> <name>document</name></decl></param>, <param><decl><type><name>const</name> <name>RPolylineData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</constructor_decl>
    <constructor_decl><name>RPolylineEntity</name><parameter_list>(<param><decl><type><name>const</name> <name>RPolylineEntity</name>&amp;</type> <name>other</name></decl></param>)</parameter_list>;</constructor_decl>
    <destructor_decl><specifier>virtual</specifier> <name>~RPolylineEntity</name><parameter_list>()</parameter_list>;</destructor_decl>

    <function_decl><type><name>static</name> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><name>static</name> <name>QSet<argument_list>&lt;<argument><name>RPropertyTypeId</name></argument>&gt;</argument_list></name></type> <name>getStaticPropertyTypeIds</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>RPropertyTypeId</name>::<name>getPropertyTypeIds</name></name><argument_list>(<argument><expr><call><name>typeid</name><argument_list>(<argument><expr><name>RPolylineEntity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>virtual</name> <name>RPolylineEntity</name>*</type> <name>clone</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr>new <call><name>RPolylineEntity</name><argument_list>(<argument><expr>*<name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><type><name>void</name></type> <name>setShape</name><parameter_list>(<param><decl><type><name>const</name> <name>RPolyline</name>&amp;</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>setProperty</name><parameter_list>(<param><decl><type><name>RPropertyTypeId</name></type> <name>propertyTypeId</name></decl></param>, <param><decl><type><name>const</name> <name>QVariant</name>&amp;</type> <name>value</name></decl></param>,
        <param><decl><type><name>RTransaction</name>*</type> <name>transaction</name>=<init><expr><name>NULL</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>QPair<argument_list>&lt;<argument><name>QVariant</name></argument>, <argument><name>RPropertyAttributes</name></argument>&gt;</argument_list></name></type> <name>getProperty</name><parameter_list>(
            <param><decl><type><name>RPropertyTypeId</name>&amp;</type> <name>propertyTypeId</name></decl></param>,
            <param><decl><type><name>bool</name></type> <name>humanReadable</name> =<init> <expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>noAttributes</name> =<init> <expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>showOnRequest</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportEntity</name><parameter_list>(<param><decl><type><name>RExporter</name>&amp;</type> <name>e</name></decl></param>, <param><decl><type><name>bool</name></type> <name>preview</name>=<init><expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>forceSelected</name>=<init><expr><name>false</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function><type><name>virtual</name> <name>RPolylineData</name>&amp;</type> <name>getData</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>data</name></expr>;</return>
    }</block></function>

    <function><type><name>virtual</name> <name>const</name> <name>RPolylineData</name>&amp;</type> <name>getData</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name></expr>;</return>
    }</block></function>

    <function><type><name>RPolyline</name></type> <name>getPolylineShape</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getPolylineShape</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>normalize</name><parameter_list>(<param><decl><type><name>double</name></type> <name>tolerance</name> =<init> <expr><name><name>RS</name>::<name>PointTolerance</name></name></expr></init></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>normalize</name><argument_list>(<argument><expr><name>tolerance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>int</name></type> <name>countVertices</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>countVertices</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>appendVertex</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>vertex</name></decl></param>, <param><decl><type><name>double</name></type> <name>bulge</name> =<init> <expr>0.0</expr></init></decl></param>, <param><decl><type><name>double</name></type> <name>w1</name> =<init> <expr>0.0</expr></init></decl></param>, <param><decl><type><name>double</name></type> <name>w2</name> =<init> <expr>0.0</expr></init></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>appendVertex</name><argument_list>(<argument><expr><name>vertex</name></expr></argument>, <argument><expr><name>bulge</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>prependVertex</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>vertex</name></decl></param>, <param><decl><type><name>double</name></type> <name>bulge</name> =<init> <expr>0.0</expr></init></decl></param>, <param><decl><type><name>double</name></type> <name>w1</name> =<init> <expr>0.0</expr></init></decl></param>, <param><decl><type><name>double</name></type> <name>w2</name> =<init> <expr>0.0</expr></init></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>prependVertex</name><argument_list>(<argument><expr><name>vertex</name></expr></argument>, <argument><expr><name>bulge</name></expr></argument>, <argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>insertVertex</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>vertex</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>insertVertex</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>vertex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>insertVertexAt</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>vertex</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>insertVertexAt</name><argument_list>(<argument><expr><name>vertex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>RVector</name></type> <name>getVertexAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getVertexAt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>removeLastVertex</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>removeLastVertex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>removeVertex</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>removeVertex</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>int</name></type> <name>countSegments</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>countSegments</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></type> <name>getSegmentAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getSegmentAt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>isArcSegmentAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>isArcSegmentAt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>hasArcSegments</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>hasArcSegments</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>getClosestSegment</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>point</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getClosestSegment</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>getClosestVertex</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>point</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getClosestVertex</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>double</name></type> <name>getBulgeAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getBulgeAt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setBulgeAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>double</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>setBulgeAt</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>stripWidths</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>stripWidths</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>setMinimumWidth</name><parameter_list>(<param><decl><type><name>double</name></type> <name>w</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>setMinimumWidth</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>setGlobalWidth</name><parameter_list>(<param><decl><type><name>double</name></type> <name>w</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>setGlobalWidth</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>setStartWidthAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>double</name></type> <name>w</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>setStartWidthAt</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>double</name></type> <name>getStartWidthAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getStartWidthAt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setEndWidthAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>double</name></type> <name>w</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>setEndWidthAt</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>double</name></type> <name>getEndWidthAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getEndWidthAt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>hasWidths</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>hasWidths</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setStartWidths</name><parameter_list>(<param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name>&amp;</type> <name>sw</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>setStartWidths</name><argument_list>(<argument><expr><name>sw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name></type> <name>getStartWidths</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getStartWidths</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setEndWidths</name><parameter_list>(<param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name>&amp;</type> <name>ew</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>setEndWidths</name><argument_list>(<argument><expr><name>ew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name></type> <name>getEndWidths</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getEndWidths</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>double</name></type> <name>getDirection1</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getDirection1</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>double</name></type> <name>getDirection2</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getDirection2</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>reverse</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>data</name>.<call><name>reverse</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name><name>RS</name>::<name>Side</name></name></type> <name>getSideOfPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>point</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getSideOfPoint</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>RVector</name></type> <name>getEndPoint</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getEndPoint</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>RVector</name></type> <name>getStartPoint</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getStartPoint</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setClosed</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>setClosed</name><argument_list>(<argument><expr><name>on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>bool</name></type> <name>isClosed</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>isClosed</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>isGeometricallyClosed</name><parameter_list>(<param><decl><type><name>double</name></type> <name>tolerance</name>=<init><expr><name><name>RS</name>::<name>PointTolerance</name></name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>isGeometricallyClosed</name><argument_list>(<argument><expr><name>tolerance</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>autoClose</name><parameter_list>(<param><decl><type><name>double</name></type> <name>tolerance</name>=<init><expr><name><name>RS</name>::<name>PointTolerance</name></name></expr></init></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>data</name>.<call><name>toLogicallyClosed</name><argument_list>(<argument><expr><name>tolerance</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>toLogicallyClosed</name><parameter_list>(<param><decl><type><name>double</name></type> <name>tolerance</name>=<init><expr><name><name>RS</name>::<name>PointTolerance</name></name></expr></init></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>data</name>.<call><name>toLogicallyClosed</name><argument_list>(<argument><expr><name>tolerance</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>toLogicallyOpen</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>data</name>.<call><name>toLogicallyOpen</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getSelfIntersectionPoints</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getSelfIntersectionPoints</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name><name>RS</name>::<name>Orientation</name></name></type> <name>getOrientation</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>implicitelyClosed</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getOrientation</name><argument_list>(<argument><expr><name>implicitelyClosed</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>double</name></type> <name>getArea</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getArea</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>double</name></type> <name>getLength</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getLength</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>double</name></type> <name>getLengthTo</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>p</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getLengthTo</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>limited</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>QList<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>getExploded</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getExploded</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>virtual</name> <name>int</name></type> <name>getComplexity</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><name>countSegments</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>RPainterPath</name></type> <name>toPainterPath</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>toPainterPath</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>simplify</name><parameter_list>(<param><decl><type><name>double</name></type> <name>angleTolerance</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>simplify</name><argument_list>(<argument><expr><name>angleTolerance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>verifyTangency</name><parameter_list>(<param><decl><type><name>double</name></type> <name>toleranceMin</name> =<init> <expr><name><name>RS</name>::<name>AngleTolerance</name></name></expr></init></decl></param>, <param><decl><type><name>double</name></type> <name>toleranceMax</name> =<init> <expr><name>M_PI_4</name></expr></init></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>data</name>.<call><name>verifyTangency</name><argument_list>(<argument><expr><name>toleranceMin</name></expr></argument>, <argument><expr><name>toleranceMax</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setPolylineGen</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>setPolylineGen</name><argument_list>(<argument><expr><name>on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>bool</name></type> <name>getPolylineGen</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getPolylineGen</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setElevation</name><parameter_list>(<param><decl><type><name>double</name></type> <name>v</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>setElevation</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>double</name></type> <name>getElevation</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getElevation</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>isFlat</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>isFlat</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name><name>RS</name>::<name>Ending</name></name></type> <name>getTrimEnd</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>trimPoint</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>clickPoint</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>data</name>.<call><name>getTrimEnd</name><argument_list>(<argument><expr><name>trimPoint</name></expr></argument>, <argument><expr><name>clickPoint</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>trimStartPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>trimPoint</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>clickPoint</name> =<init> <expr><name><name>RVector</name>::<name>invalid</name></name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>extend</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>data</name>.<call><name>trimStartPoint</name><argument_list>(<argument><expr><name>trimPoint</name></expr></argument>, <argument><expr><name>clickPoint</name></expr></argument>, <argument><expr><name>extend</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><type><name>bool</name></type> <name>trimEndPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>trimPoint</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>clickPoint</name> =<init> <expr><name><name>RVector</name>::<name>invalid</name></name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>extend</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>data</name>.<call><name>trimEndPoint</name><argument_list>(<argument><expr><name>trimPoint</name></expr></argument>, <argument><expr><name>clickPoint</name></expr></argument>, <argument><expr><name>extend</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>trimStartPoint</name><parameter_list>(<param><decl><type><name>double</name></type> <name>trimDist</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>data</name>.<call><name>trimStartPoint</name><argument_list>(<argument><expr><name>trimDist</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><type><name>bool</name></type> <name>trimEndPoint</name><parameter_list>(<param><decl><type><name>double</name></type> <name>trimDist</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>data</name>.<call><name>trimEndPoint</name><argument_list>(<argument><expr><name>trimDist</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>QList<argument_list>&lt;<argument><name>RPolyline</name></argument>&gt;</argument_list></name></type> <name>morph</name><parameter_list>(<param><decl><type><name>const</name> <name>RPolyline</name>&amp;</type> <name>target</name></decl></param>, <param><decl><type><name>int</name></type> <name>steps</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>morph</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>steps</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>contains</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>point</name></decl></param>, <param><decl><type><name>bool</name></type> <name>borderIsInside</name>=<init><expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>double</name></type> <name>tolerance</name>=<init><expr><name><name>RS</name>::<name>PointTolerance</name></name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>contains</name><argument_list>(<argument><expr><name>point</name></expr></argument>, <argument><expr><name>borderIsInside</name></expr></argument>, <argument><expr><name>tolerance</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><type><name>bool</name></type> <name>containsShape</name><parameter_list>(<param><decl><type><name>const</name> <name>RShape</name>&amp;</type> <name>shape</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>containsShape</name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

</public><protected>protected:
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>print</name><parameter_list>(<param><decl><type><name>QDebug</name></type> <name>dbg</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

</protected><protected>protected:
    <decl_stmt><decl><type><name>RPolylineData</name></type> <name>data</name></decl>;</decl_stmt>
</protected>}</block>;</class>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RPolylineEntity*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QSharedPointer&lt;RPolylineEntity&gt;</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QSharedPointer&lt;RPolylineEntity&gt;*</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
