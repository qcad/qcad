<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./core" filename="RDocumentVariables.h"><comment type="block">/**
 * Copyright (c) 2011-2018 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RDOCUMENTVARIABLES_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RDOCUMENTVARIABLES_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"core_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RLayer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RObject.h"</cpp:file></cpp:include>

<class_decl>class <name>RDocument</name>;</class_decl>

<comment type="block">/**
 * This type of object is used to store document wide variables.
 *
 * \ingroup core
 * \scriptable
 * \sharedPointerSupport
 */</comment>
<class>class <macro><name>QCADCORE_EXPORT</name></macro> <name>RDocumentVariables</name> <super>: <specifier>public</specifier> <name>RObject</name></super> <block>{<private type="default">
</private><public>public:
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyCustom</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyHandle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyProtected</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyCurrentLayerId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyUnit</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyLinetypeScale</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyDimensionFont</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyWorkingSetBlockReferenceId</name></decl>;</decl_stmt>

</public><public>public:
    <constructor_decl><name>RDocumentVariables</name><parameter_list>(<param><decl><type><name>RDocument</name>*</type> <name>document</name></decl></param>)</parameter_list>;</constructor_decl>
    <destructor_decl><specifier>virtual</specifier> <name>~RDocumentVariables</name><parameter_list>()</parameter_list>;</destructor_decl>

    <function_decl><type><name>static</name> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><name>virtual</name> <name><name>RS</name>::<name>EntityType</name></name></type> <name>getType</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name><name>RS</name>::<name>ObjectDocumentVariable</name></name></expr>;</return>
    }</block></function>

    <function><type><name>virtual</name> <name>RDocumentVariables</name>*</type> <name>clone</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr>new <call><name>RDocumentVariables</name><argument_list>(<argument><expr>*<name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><type><name>virtual</name> <name>QPair<argument_list>&lt;<argument><name>QVariant</name></argument>, <argument><name>RPropertyAttributes</name></argument>&gt;</argument_list></name></type>
            <name>getProperty</name><parameter_list>(<param><decl><type><name>RPropertyTypeId</name>&amp;</type> <name>propertyTypeId</name></decl></param>,
                    <param><decl><type><name>bool</name></type> <name>humanReadable</name> =<init> <expr><name>false</name></expr></init></decl></param>,
                    <param><decl><type><name>bool</name></type> <name>noAttributes</name> =<init> <expr><name>false</name></expr></init></decl></param>,
                    <param><decl><type><name>bool</name></type> <name>showOnRequest</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>setProperty</name><parameter_list>(<param><decl><type><name>RPropertyTypeId</name></type> <name>propertyTypeId</name></decl></param>,
        <param><decl><type><name>const</name> <name>QVariant</name>&amp;</type> <name>value</name></decl></param>, <param><decl><type><name>RTransaction</name>*</type> <name>transaction</name>=<init><expr><name>NULL</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>QSet<argument_list>&lt;<argument><name>RPropertyTypeId</name></argument>&gt;</argument_list></name></type> <name>getCustomPropertyTypeIds</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setKnownVariable</name><parameter_list>(<param><decl><type><name><name>RS</name>::<name>KnownVariable</name></name></type> <name>key</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>value</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setKnownVariable</name><parameter_list>(<param><decl><type><name><name>RS</name>::<name>KnownVariable</name></name></type> <name>key</name></decl></param>, <param><decl><type><name>const</name> <name>RColor</name>&amp;</type> <name>value</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setKnownVariable</name><parameter_list>(<param><decl><type><name><name>RS</name>::<name>KnownVariable</name></name></type> <name>key</name></decl></param>, <param><decl><type><name>const</name> <name>QVariant</name>&amp;</type> <name>value</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>QVariant</name></type> <name>getKnownVariable</name><parameter_list>(<param><decl><type><name><name>RS</name>::<name>KnownVariable</name></name></type> <name>key</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>hasKnownVariable</name><parameter_list>(<param><decl><type><name><name>RS</name>::<name>KnownVariable</name></name></type> <name>key</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function><type><name><name>RLayer</name>::<name>Id</name></name></type> <name>getCurrentLayerId</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>currentLayerId</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setCurrentLayerId</name><parameter_list>(<param><decl><type><name><name>RLayer</name>::<name>Id</name></name></type> <name>id</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>currentLayerId</name> = <name>id</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name><name>RS</name>::<name>Unit</name></name></type> <name>getUnit</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>unit</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setUnit</name><parameter_list>(<param><decl><type><name><name>RS</name>::<name>Unit</name></name></type> <name>u</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>QVariant</name></type> <name>v</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>v</name>.<call><name>setValue</name><argument_list>(<argument><expr>(<name>int</name>)<name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>knownVariables</name>.<call><name>insert</name><argument_list>(<argument><expr><name><name>RS</name>::<name>INSUNITS</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>unit</name> = <name>u</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name><name>RS</name>::<name>Measurement</name></name></type> <name>getMeasurement</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>measurement</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setMeasurement</name><parameter_list>(<param><decl><type><name><name>RS</name>::<name>Measurement</name></name></type> <name>m</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>m</name>!=<name><name>RS</name>::<name>Metric</name></name> &amp;&amp; <name>m</name>!=<name><name>RS</name>::<name>Imperial</name></name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>QVariant</name></type> <name>v</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>v</name>.<call><name>setValue</name><argument_list>(<argument><expr>(<name>int</name>)<name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>knownVariables</name>.<call><name>insert</name><argument_list>(<argument><expr><name><name>RS</name>::<name>MEASUREMENT</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>measurement</name> = <name>m</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>double</name></type> <name>getLinetypeScale</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>linetypeScale</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setLinetypeScale</name><parameter_list>(<param><decl><type><name>double</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>QVariant</name></type> <name>v</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>v</name>.<call><name>setValue</name><argument_list>(<argument><expr>(<name>double</name>)<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>knownVariables</name>.<call><name>insert</name><argument_list>(<argument><expr><name><name>RS</name>::<name>LTSCALE</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>linetypeScale</name> = <name>s</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>QString</name></type> <name>getDimensionFont</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>dimensionFont</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setDimensionFont</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>f</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>dimensionFont</name> = <name>f</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name><name>RObject</name>::<name>Id</name></name></type> <name>getWorkingSetBlockReferenceId</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>workingSetBlockReferenceId</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setWorkingSetBlockReferenceId</name><parameter_list>(<param><decl><type><name><name>RObject</name>::<name>Id</name></name></type> <name>id</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>workingSetBlockReferenceId</name> = <name>id</name></expr>;</expr_stmt>
    }</block></function>

    <function_decl><type><name>QString</name></type> <name>addAutoVariable</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>QStringList</name></type> <name>getAutoVariables</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>print</name><parameter_list>(<param><decl><type><name>QDebug</name></type> <name>dbg</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

</public><private>private:
    <decl_stmt><decl><type><name><name>RLayer</name>::<name>Id</name></name></type> <name>currentLayerId</name></decl>;</decl_stmt>
    <comment type="line">// TODO:</comment>
    <comment type="line">//RLayer::Id currentBlockId;</comment>
    <comment type="line">//...</comment>
    <decl_stmt><decl><type><name><name>RS</name>::<name>Unit</name></name></type> <name>unit</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>RS</name>::<name>Measurement</name></name></type> <name>measurement</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>linetypeScale</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>dimensionFont</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QHash<argument_list>&lt;<argument><name><name>RS</name>::<name>KnownVariable</name></name></argument>, <argument><name>QVariant</name></argument>&gt;</argument_list></name></type> <name>knownVariables</name></decl>;</decl_stmt>
    <comment type="line">// ID of block reference that we are currently editing in-place (current working set):</comment>
    <decl_stmt><decl><type><name><name>RObject</name>::<name>Id</name></name></type> <name>workingSetBlockReferenceId</name></decl>;</decl_stmt>
</private>}</block>;</class>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RDocumentVariables*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QSharedPointer&lt;RDocumentVariables&gt;</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QSharedPointer&lt;RDocumentVariables&gt;*</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
