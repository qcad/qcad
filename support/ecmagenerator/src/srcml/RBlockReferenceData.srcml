<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./core" filename="RBlockReferenceData.h"><comment type="block">/**
 * Copyright (c) 2011-2018 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RBLOCKREFERENCEDATA_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RBLOCKREFERENCEDATA_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"core_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RBlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RBox.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"REntity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RTransform.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RVector.h"</cpp:file></cpp:include>

<class_decl>class <name>RDocument</name>;</class_decl>
<class_decl>class <name>RExporter</name>;</class_decl>

<comment type="block">/**
 * Defines the geometry and appearance of a block reference entity.
 *
 * \scriptable
 * \copyable
 * \ingroup core
 */</comment>
<class>class <macro><name>QCADCORE_EXPORT</name></macro> <name>RBlockReferenceData</name><super>: <specifier>public</specifier> <name>REntityData</name></super> <block>{<private type="default">

<decl_stmt><decl><type><name>friend</name> class</type> <name>RBlockReferenceEntity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>friend</name> class</type> <name>RViewportEntity</name></decl>;</decl_stmt>

</private><protected>protected:
    <constructor_decl><name>RBlockReferenceData</name><parameter_list>(<param><decl><type><name>RDocument</name>*</type> <name>document</name></decl></param>, <param><decl><type><name>const</name> <name>RBlockReferenceData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</constructor_decl>

</protected><public>public:
    <constructor_decl><name>RBlockReferenceData</name><parameter_list>()</parameter_list>;</constructor_decl>
    <constructor_decl><name>RBlockReferenceData</name><parameter_list>(<param><decl><type><name><name>RBlock</name>::<name>Id</name></name></type> <name>referencedBlockId</name></decl></param>,
            <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>position</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>scaleFactors</name></decl></param>,
            <param><decl><type><name>double</name></type> <name>angle</name></decl></param>,
            <param><decl><type><name>int</name></type> <name>columnCount</name>=<init><expr>1</expr></init></decl></param>, <param><decl><type><name>int</name></type> <name>rowCount</name>=<init><expr>1</expr></init></decl></param>,
            <param><decl><type><name>double</name></type> <name>columnSpacing</name>=<init><expr>0</expr></init></decl></param>, <param><decl><type><name>double</name></type> <name>rowSpacing</name>=<init><expr>0</expr></init></decl></param>)</parameter_list>;</constructor_decl>

    <function><type><name>virtual</name> <name><name>RS</name>::<name>EntityType</name></name></type> <name>getType</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name><name>RS</name>::<name>EntityBlockRef</name></name></expr>;</return>
    }</block></function>

    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>isPointType</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>RBox</name></argument>&gt;</argument_list></name></type> <name>getBoundingBoxes</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>ignoreEmpty</name>=<init><expr><name>false</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>RBox</name></type> <name>getBoundingBox</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>ignoreEmpty</name>=<init><expr><name>false</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>to2D</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>RVector</name></type> <name>getPointOnEntity</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>RRefPoint</name></argument>&gt;</argument_list></name></type> <name>getInternalReferencePoints</name><parameter_list>(<param><decl><type><name><name>RS</name>::<name>ProjectionRenderingHint</name></name></type> <name>hint</name> =<init> <expr><name><name>RS</name>::<name>RenderTop</name></name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>RRefPoint</name></argument>&gt;</argument_list></name></type> <name>getReferencePoints</name><parameter_list>(<param><decl><type><name><name>RS</name>::<name>ProjectionRenderingHint</name></name></type> <name>hint</name> =<init> <expr><name><name>RS</name>::<name>RenderTop</name></name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>RVector</name></type> <name>getVectorTo</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>point</name></decl></param>,  <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>, <param><decl><type><name>double</name></type> <name>strictRange</name> =<init> <expr><name>RMAXDOUBLE</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>double</name></type> <name>getDistanceTo</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>point</name></decl></param>, <param><decl><type><name>bool</name></type> <name>limited</name> =<init> <expr><name>true</name></expr></init></decl></param>, <param><decl><type><name>double</name></type> <name>range</name> =<init> <expr>0.0</expr></init></decl></param>,
                                 <param><decl><type><name>bool</name></type> <name>draft</name> =<init> <expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>double</name></type> <name>strictRange</name> =<init> <expr><name>RMAXDOUBLE</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>RBox</name></type> <name>getQueryBoxInBlockCoordinates</name><parameter_list>(<param><decl><type><name>const</name> <name>RBox</name>&amp;</type> <name>box</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>getShapes</name><parameter_list>(<param><decl><type><name>const</name> <name>RBox</name>&amp;</type> <name>queryBox</name> =<init> <expr><name>RDEFAULT_RBOX</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>ignoreComplex</name> =<init> <expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>segment</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <comment type="line">//virtual void setSelected(bool on);</comment>

    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>moveReferencePoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>referencePoint</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>targetPoint</name></decl></param>, <param><decl><type><name><name>Qt</name>::<name>KeyboardModifiers</name></name></type> <name>modifiers</name> =<init> <expr><name><name>Qt</name>::<name>NoModifier</name></name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>move</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>offset</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>rotate</name><parameter_list>(<param><decl><type><name>double</name></type> <name>rotation</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>center</name> =<init> <expr><name>RDEFAULT_RVECTOR</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>mirror</name><parameter_list>(<param><decl><type><name>const</name> <name>RLine</name>&amp;</type> <name>axis</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>scale</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>scaleFactors</name></decl></param>,
                       <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>center</name> =<init> <expr><name>RDEFAULT_RVECTOR</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>scaleVisualProperties</name><parameter_list>(<param><decl><type><name>double</name></type> <name>scaleFactor</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>setReferencedBlockId</name><parameter_list>(<param><decl><type><name><name>RBlock</name>::<name>Id</name></name></type> <name>blockId</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>groundReferencedBlockId</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function><type><name><name>RBlock</name>::<name>Id</name></name></type> <name>getReferencedBlockId</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>referencedBlockId</name></expr>;</return>
    }</block></function>

    <function_decl><type><name>void</name></type> <name>setReferencedBlockName</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>blockName</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>QString</name></type> <name>getReferencedBlockName</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function><type><name>RVector</name></type> <name>getPosition</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>position</name></expr>;</return>
    }</block></function>
    <function_decl><type><name>void</name></type> <name>setPosition</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>p</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><name>RVector</name></type> <name>getScaleFactors</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>scaleFactors</name></expr>;</return>
    }</block></function>
    <function_decl><type><name>void</name></type> <name>setScaleFactors</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>sf</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><name>double</name></type> <name>getRotation</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>rotation</name></expr>;</return>
    }</block></function>
    <function_decl><type><name>void</name></type> <name>setRotation</name><parameter_list>(<param><decl><type><name>double</name></type> <name>r</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><name>int</name></type> <name>getColumnCount</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>columnCount</name></expr>;</return>
    }</block></function>
    <function><type><name>void</name></type> <name>setColumnCount</name><parameter_list>(<param><decl><type><name>int</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>columnCount</name> = <name>c</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>int</name></type> <name>getRowCount</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>rowCount</name></expr>;</return>
    }</block></function>
    <function><type><name>void</name></type> <name>setRowCount</name><parameter_list>(<param><decl><type><name>int</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>rowCount</name> = <name>c</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>double</name></type> <name>getColumnSpacing</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>columnSpacing</name></expr>;</return>
    }</block></function>
    <function><type><name>void</name></type> <name>setColumnSpacing</name><parameter_list>(<param><decl><type><name>double</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>columnSpacing</name> = <name>s</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>double</name></type> <name>getRowSpacing</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>rowSpacing</name></expr>;</return>
    }</block></function>
    <function><type><name>void</name></type> <name>setRowSpacing</name><parameter_list>(<param><decl><type><name>double</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>rowSpacing</name> = <name>s</name></expr>;</expr_stmt>
    }</block></function>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>update</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>update</name><parameter_list>(<param><decl><type><name><name>RObject</name>::<name>Id</name></name></type> <name>entityId</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>QSharedPointer<argument_list>&lt;<argument><name>REntity</name></argument>&gt;</argument_list></name></type> <name>queryEntity</name><parameter_list>(<param><decl><type><name><name>REntity</name>::<name>Id</name></name></type> <name>entityId</name></decl></param>, <param><decl><type><name>bool</name></type> <name>transform</name> =<init> <expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>ignoreAttDef</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>applyTransformationTo</name><parameter_list>(<param><decl><type><name>REntity</name>&amp;</type> <name>entity</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function_decl><type><name>bool</name></type> <name>applyTransformationTo</name><parameter_list>(<param><decl><type><name>QSharedPointer<argument_list>&lt;<argument><name>REntity</name></argument>&gt;</argument_list></name>&amp;</type> <name>entity</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>RTransform</name></type> <name>getTransform</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>RVector</name></type> <name>getColumnRowOffset</name><parameter_list>(<param><decl><type><name>int</name></type> <name>col</name></decl></param>, <param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>bool</name></type> <name>rotated</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>void</name></type> <name>applyColumnRowOffsetTo</name><parameter_list>(<param><decl><type><name>REntity</name>&amp;</type> <name>entity</name></decl></param>, <param><decl><type><name>int</name></type> <name>col</name></decl></param>, <param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>bool</name></type> <name>rotated</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>RVector</name></type> <name>mapToBlock</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>v</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>bool</name></type> <name>isPixelUnit</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

</public><private>private:
    <decl_stmt><decl><type><name>mutable</name> <name><name>RBlock</name>::<name>Id</name></name></type> <name>referencedBlockId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RVector</name></type> <name>position</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RVector</name></type> <name>scaleFactors</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>rotation</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>columnCount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rowCount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>columnSpacing</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>rowSpacing</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>visualPropertiesScale</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>mutable</name> <name>QList<argument_list>&lt;<argument><name>RBox</name></argument>&gt;</argument_list></name></type> <name>boundingBoxes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mutable</name> <name>QList<argument_list>&lt;<argument><name>RBox</name></argument>&gt;</argument_list></name></type> <name>boundingBoxesIgnoreEmpty</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mutable</name> <name>QMap<argument_list>&lt;<argument><name><name>REntity</name>::<name>Id</name></name></argument>, <argument><name>QSharedPointer<argument_list>&lt;<argument><name>REntity</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>cache</name></decl>;</decl_stmt>
</private>}</block>;</class>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RBlockReferenceData</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RBlockReferenceData*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>const RBlockReferenceData*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QSharedPointer&lt;RBlockReferenceData&gt;</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
