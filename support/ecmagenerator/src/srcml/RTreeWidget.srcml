<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src"
xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++"
dir="./gui" filename="RTreeWidget.h">
  <comment type="block">/** * Copyright (c) 2011-2013 by Andrew
  Mustun. All rights reserved. * * This file is part of the QCAD
  project. * * QCAD is free software: you can redistribute it
  and/or modify * it under the terms of the GNU General Public
  License as published by * the Free Software Foundation, either
  version 3 of the License, or * (at your option) any later
  version. * * QCAD is distributed in the hope that it will be
  useful, * but WITHOUT ANY WARRANTY; without even the implied
  warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR
  PURPOSE. See the * GNU General Public License for more details. *
  * You should have received a copy of the GNU General Public
  License * along with QCAD. */</comment>
  <cpp:ifndef>#
  <cpp:directive>ifndef</cpp:directive>
  <name>RTREEWIDGET_H_</name></cpp:ifndef>
  <cpp:define>#
  <cpp:directive>define</cpp:directive>
  <name>RTREEWIDGET_H_</name></cpp:define>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>"gui_global.h"</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QWidget&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QTreeWidget&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QTreeWidgetItem&gt;</cpp:file></cpp:include>
  <cpp:include>#
  <cpp:directive>include</cpp:directive>
  <cpp:file>&lt;QtDebug&gt;</cpp:file></cpp:include>
  <comment type="block">/** * Tree widget with some additional
  functionality for icons. * * \ingroup gui * \scriptable *
  \generateScriptShell */</comment>
  <class>class 
  <macro>
    <name>QCADGUI_EXPORT</name>
  </macro>
  <name>RTreeWidget</name>
  <super>: 
  <specifier>public</specifier>
  <name>QTreeWidget</name></super>
  <block>{
  <private type="default">
    <macro>
      <name>Q_OBJECT</name>
    </macro>
  </private>
  <public>public: 
  <constructor_decl>
  <name>RTreeWidget</name>
  <parameter_list>(
  <param>
    <decl>
    <type>
    <name>QWidget</name>*</type>
    <name>parent</name>=
    <init>
      <expr>0</expr>
    </init></decl>
  </param>)</parameter_list>;</constructor_decl>
  <destructor_decl>
  <specifier>virtual</specifier>
  <name>~RTreeWidget</name>
  <parameter_list>()</parameter_list>;</destructor_decl>
  <function>
    <type>
      <name>void</name>
    </type>
    <name>setSelectableColumn</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
          <name>int</name>
        </type>
        <name>c</name>
      </decl>
    </param>)</parameter_list>
    <block>{ 
    <expr_stmt>
    <expr>
    <name>selectableColumn</name>= 
    <name>c</name></expr>;</expr_stmt>}</block>
  </function>
  <function>
    <type>
      <name>QModelIndex</name>
    </type>
    <name>getIndex</name>
    <parameter_list>(
    <param>
      <decl>
        <type>
        <name>QTreeWidgetItem</name>*</type>
        <name>item</name>
      </decl>
    </param>, 
    <param>
      <decl>
      <type>
        <name>int</name>
      </type>
      <name>column</name>=
      <init>
        <expr>0</expr>
      </init></decl>
    </param>)</parameter_list>
    <block>{ 
    <return>return 
    <expr>
      <call>
        <name>indexFromItem</name>
        <argument_list>(
        <argument>
          <expr>
            <name>item</name>
          </expr>
        </argument>, 
        <argument>
          <expr>
            <name>column</name>
          </expr>
        </argument>)</argument_list>
      </call>
    </expr>;</return>}</block>
  </function>
  <comment type="line">//void scrollToItem(const QTreeWidgetItem*
  item, QAbstractItemView::ScrollHint hint =
  EnsureVisible);</comment>
  <comment type="line">// void setIconOffset(int o) {</comment>
  <comment type="line">// iconOffset = o;</comment>
  <comment type="line">// }</comment></public>
  <protected>protected: 
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>contextMenuEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QContextMenuEvent</name>*</type>
      <name>e</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>mousePressEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QMouseEvent</name>*</type>
      <name>e</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>mouseReleaseEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QMouseEvent</name>*</type>
      <name>e</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>mouseMoveEvent</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QMouseEvent</name>*</type>
      <name>e</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <label>
  <name>signals</name>:</label>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>itemColumnClicked</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QTreeWidgetItem</name>*</type>
      <name>item</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>column</name>
    </decl>
  </param>)</parameter_list>;</function_decl>
  <function_decl>
  <type>
    <name>void</name>
  </type>
  <name>contextMenuRequested</name>
  <parameter_list>(
  <param>
    <decl>
      <type>
      <name>QTreeWidgetItem</name>*</type>
      <name>item</name>
    </decl>
  </param>, 
  <param>
    <decl>
      <type>
        <name>int</name>
      </type>
      <name>column</name>
    </decl>
  </param>)</parameter_list>;</function_decl></protected>
  <private>private: 
  <decl_stmt>
  <decl>
    <type>
      <name>QVariant</name>
    </type>
    <name>itemPressedData</name>
  </decl>;</decl_stmt>
  <decl_stmt>
  <decl>
    <type>
      <name>int</name>
    </type>
    <name>indexPressed</name>
  </decl>;</decl_stmt>
  <comment type="line">// selectable column or -1 for
  all:</comment>
  <decl_stmt>
  <decl>
    <type>
      <name>int</name>
    </type>
    <name>selectableColumn</name>
  </decl>;</decl_stmt>
  <comment type="line">//int
  iconOffset;</comment></private>}</block>;</class>
  <macro>
    <name>Q_DECLARE_METATYPE</name>
    <argument_list>(
    <argument>RTreeWidget*</argument>)</argument_list>
  </macro>
  <cpp:endif>#
  <cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
