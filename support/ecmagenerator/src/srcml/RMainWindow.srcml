<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./core" filename="RMainWindow.h"><comment type="block">/**
 * Copyright (c) 2011-2018 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RMAINWINDOW_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RMAINWINDOW_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"core_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMutex&gt;</cpp:file></cpp:include>
<class_decl>class <name>QKeyEvent</name>;</class_decl>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"REntityExportListener.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RExportListener.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RImportListener.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RInterTransactionListener.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RTransactionListener.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RPropertyEvent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RMessageHandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RProgressHandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RS.h"</cpp:file></cpp:include>

<class_decl>class <name>RBlockListener</name>;</class_decl>
<class_decl>class <name>RCoordinateListener</name>;</class_decl>
<class_decl>class <name>RDocument</name>;</class_decl>
<class_decl>class <name>RDocumentInterface</name>;</class_decl>
<class_decl>class <name>REntity</name>;</class_decl>
<class_decl>class <name>RFocusListener</name>;</class_decl>
<class_decl>class <name>RGraphicsView</name>;</class_decl>
<class_decl>class <name>RKeyListener</name>;</class_decl>
<class_decl>class <name>RLayerListener</name>;</class_decl>
<class_decl>class <name>RNewDocumentListener</name>;</class_decl>
<class_decl>class <name>RPaletteListener</name>;</class_decl>
<class_decl>class <name>RPenListener</name>;</class_decl>
<class_decl>class <name>RPropertyListener</name>;</class_decl>
<class_decl>class <name>RPreferencesListener</name>;</class_decl>
<class_decl>class <name>RSelectionListener</name>;</class_decl>
<class_decl>class <name>RSnapListener</name>;</class_decl>
<class_decl>class <name>RTransaction</name>;</class_decl>
<class_decl>class <name>RUcsListener</name>;</class_decl>
<class_decl>class <name>RVector</name>;</class_decl>
<class_decl>class <name>RViewFocusListener</name>;</class_decl>
<class_decl>class <name>RViewListener</name>;</class_decl>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RDEFAULT_MINUS_ONE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RDEFAULT_MINUS_ONE</name> -1</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/**
 * \brief Base class for an MDI main application window.
 *
 * \ingroup core
 * \scriptable
 */</comment>
<class>class <macro><name>QCADCORE_EXPORT</name></macro> <name>RMainWindow</name> <super>: <specifier>public</specifier> <name>RProgressHandler</name>, <specifier>public</specifier> <name>RMessageHandler</name></super> <block>{<private type="default">

</private><public>public:
    <constructor_decl><name>RMainWindow</name><parameter_list>()</parameter_list>;</constructor_decl>
    <destructor_decl><specifier>virtual</specifier> <name>~RMainWindow</name><parameter_list>()</parameter_list>;</destructor_decl>

    <function_decl><type><name>static</name> <name>RMainWindow</name>*</type> <name>getMainWindow</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>bool</name></type> <name>hasMainWindow</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>static</name> <name>void</name></type> <name>installMessageHandler</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block">/**
     * \return Pointer to the document that is currently open and has
     *      the focus or NULL if no document is open.
     */</comment>
    <function_decl><type><name>virtual</name> <name>RDocument</name>*</type> <name>getDocument</name><parameter_list>()</parameter_list> <specifier>= 0</specifier>;</function_decl>

    <function><type><name>virtual</name> <name>void</name></type> <name>disable</name><parameter_list>()</parameter_list> <block>{}</block></function>
    <function><type><name>virtual</name> <name>void</name></type> <name>enable</name><parameter_list>()</parameter_list> <block>{}</block></function>

    <comment type="block">/**
     * \return Pointer to the document interface of the document that is
     *      currently open and has the focus or NULL if no document is open.
     */</comment>
    <function_decl><type><name>virtual</name> <name>RDocumentInterface</name>*</type> <name>getDocumentInterface</name><parameter_list>()</parameter_list> <specifier>= 0</specifier>;</function_decl>
    <function_decl><type><name>static</name> <name>RDocumentInterface</name>*</type> <name>getDocumentInterfaceStatic</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>notifyListeners</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>withNull</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addCoordinateListener</name><parameter_list>(<param><decl><type><name>RCoordinateListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>removeCoordinateListener</name><parameter_list>(<param><decl><type><name>RCoordinateListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyCoordinateListeners</name><parameter_list>(<param><decl><type><name>RDocumentInterface</name>*</type> <name>documentInterface</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addSelectionListener</name><parameter_list>(<param><decl><type><name>RSelectionListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>removeSelectionListener</name><parameter_list>(<param><decl><type><name>RSelectionListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifySelectionListeners</name><parameter_list>(<param><decl><type><name>RDocumentInterface</name>*</type> <name>documentInterface</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>postSelectionChangedEvent</name><parameter_list>()</parameter_list> <specifier>= 0</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>postTransactionEvent</name><parameter_list>(
        <param><decl><type><name>RTransaction</name>&amp;</type> <name>t</name></decl></param>,
        <param><decl><type><name>bool</name></type> <name>onlyChanges</name>=<init><expr><name>false</name></expr></init></decl></param>,
        <param><decl><type><name><name>RS</name>::<name>EntityType</name></name></type> <name>entityTypeFilter</name> =<init> <expr><name><name>RS</name>::<name>EntityAll</name></name></expr></init></decl></param>
    )</parameter_list> <specifier>= 0</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>postCloseEvent</name><parameter_list>()</parameter_list> <specifier>= 0</specifier>;</function_decl>
    <comment type="line">//virtual void postPropertyEvent() = 0;</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>postPropertyEvent</name><parameter_list>(<param><decl><type><name>RPropertyTypeId</name></type> <name>propertyTypeId</name></decl></param>,
        <param><decl><type><name>const</name> <name>QVariant</name>&amp;</type> <name>value</name></decl></param>,
        <param><decl><type><name><name>RS</name>::<name>EntityType</name></name></type> <name>entityTypeFilter</name> =<init> <expr><name><name>RS</name>::<name>EntityAll</name></name></expr></init></decl></param>
    )</parameter_list> <specifier>= 0</specifier>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addPropertyListener</name><parameter_list>(<param><decl><type><name>RPropertyListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>removePropertyListener</name><parameter_list>(<param><decl><type><name>RPropertyListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyPropertyListeners</name><parameter_list>(
        <param><decl><type><name>RDocument</name>*</type> <name>document</name></decl></param>,
        <param><decl><type><name>bool</name></type> <name>onlyChanges</name>=<init><expr><name>false</name></expr></init></decl></param>,
        <param><decl><type><name><name>RS</name>::<name>EntityType</name></name></type> <name>entityTypeFilter</name> =<init> <expr><name><name>RS</name>::<name>EntityUnknown</name></name></expr></init></decl></param>
    )</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyPropertyListeners</name><parameter_list>(<param><decl><type><name>RDocument</name>&amp;</type> <name>document</name></decl></param>, <param><decl><type><name>REntity</name>&amp;</type> <name>entity</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyPropertyListeners</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addExportListener</name><parameter_list>(<param><decl><type><name>RExportListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>removeExportListener</name><parameter_list>(<param><decl><type><name>RExportListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyExportListenersPre</name><parameter_list>(<param><decl><type><name>RDocumentInterface</name>*</type> <name>documentInterface</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyExportListenersPost</name><parameter_list>(<param><decl><type><name>RDocumentInterface</name>*</type> <name>documentInterface</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyExportListenersEnd</name><parameter_list>(<param><decl><type><name>RExporter</name>*</type> <name>exporter</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addEntityExportListener</name><parameter_list>(<param><decl><type><name>REntityExportListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>removeEntityExportListener</name><parameter_list>(<param><decl><type><name>REntityExportListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyEntityExportListeners</name><parameter_list>(<param><decl><type><name>RExporter</name>*</type> <name>exporter</name></decl></param>, <param><decl><type><name>REntity</name>*</type> <name>entity</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addImportListener</name><parameter_list>(<param><decl><type><name>RImportListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>removeImportListener</name><parameter_list>(<param><decl><type><name>RImportListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyImportListenersPre</name><parameter_list>(<param><decl><type><name>RDocumentInterface</name>*</type> <name>documentInterface</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyImportListenersPost</name><parameter_list>(<param><decl><type><name>RDocumentInterface</name>*</type> <name>documentInterface</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addTransactionListener</name><parameter_list>(<param><decl><type><name>RTransactionListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>removeTransactionListener</name><parameter_list>(<param><decl><type><name>RTransactionListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyTransactionListeners</name><parameter_list>(<param><decl><type><name>RDocument</name>*</type> <name>document</name></decl></param>, <param><decl><type><name>RTransaction</name>*</type> <name>transaction</name> =<init> <expr><name>NULL</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addInterTransactionListener</name><parameter_list>(<param><decl><type><name>RInterTransactionListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>removeInterTransactionListener</name><parameter_list>(<param><decl><type><name>RInterTransactionListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyInterTransactionListeners</name><parameter_list>(<param><decl><type><name>RDocument</name>*</type> <name>document</name></decl></param>, <param><decl><type><name>RTransaction</name>*</type> <name>transaction</name> =<init> <expr><name>NULL</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addNewDocumentListener</name><parameter_list>(<param><decl><type><name>RNewDocumentListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>removeNewDocumentListener</name><parameter_list>(<param><decl><type><name>RNewDocumentListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyNewDocumentListeners</name><parameter_list>(<param><decl><type><name>RDocument</name>*</type> <name>document</name></decl></param>, <param><decl><type><name>RTransaction</name>*</type> <name>transaction</name></decl></param>, <param><decl><type><name>bool</name></type> <name>beforeLoad</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addSnapListener</name><parameter_list>(<param><decl><type><name>RSnapListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>removeSnapListener</name><parameter_list>(<param><decl><type><name>RSnapListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifySnapListeners</name><parameter_list>(<param><decl><type><name>RDocumentInterface</name>*</type> <name>documentInterface</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addFocusListener</name><parameter_list>(<param><decl><type><name>RFocusListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>removeFocusListener</name><parameter_list>(<param><decl><type><name>RFocusListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyFocusListeners</name><parameter_list>(<param><decl><type><name>RDocumentInterface</name>*</type> <name>documentInterface</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addKeyListener</name><parameter_list>(<param><decl><type><name>RKeyListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>removeKeyListener</name><parameter_list>(<param><decl><type><name>RKeyListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyKeyListeners</name><parameter_list>(<param><decl><type><name>QKeyEvent</name>*</type> <name>event</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addViewFocusListener</name><parameter_list>(<param><decl><type><name>RViewFocusListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>removeViewFocusListener</name><parameter_list>(<param><decl><type><name>RViewFocusListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyViewFocusListeners</name><parameter_list>(<param><decl><type><name>RGraphicsView</name>*</type> <name>view</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addPreferencesListener</name><parameter_list>(<param><decl><type><name>RPreferencesListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>removePreferencesListener</name><parameter_list>(<param><decl><type><name>RPreferencesListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyPreferencesListeners</name><parameter_list>(<param><decl><type><name>RDocumentInterface</name>*</type> <name>documentInterface</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>propertyChangeEvent</name><parameter_list>(<param><decl><type><name>RPropertyEvent</name>&amp;</type> <name>event</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addUcsListener</name><parameter_list>(<param><decl><type><name>RUcsListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>removeUcsListener</name><parameter_list>(<param><decl><type><name>RUcsListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyUcsListeners</name><parameter_list>(<param><decl><type><name>RDocumentInterface</name>*</type> <name>documentInterface</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addLayerListener</name><parameter_list>(<param><decl><type><name>RLayerListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>removeLayerListener</name><parameter_list>(<param><decl><type><name>RLayerListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyLayerListeners</name><parameter_list>(<param><decl><type><name>RDocumentInterface</name>*</type> <name>documentInterface</name></decl></param>, <param><decl><type><name>QList<argument_list>&lt;<argument><name><name>RLayer</name>::<name>Id</name></name></argument>&gt;</argument_list></name>&amp;</type> <name>layerIds</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyLayerListenersCurrentLayer</name><parameter_list>(<param><decl><type><name>RDocumentInterface</name>*</type> <name>documentInterface</name></decl></param>, <param><decl><type><name><name>RLayer</name>::<name>Id</name></name></type> <name>previousLayerId</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addBlockListener</name><parameter_list>(<param><decl><type><name>RBlockListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>removeBlockListener</name><parameter_list>(<param><decl><type><name>RBlockListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyBlockListeners</name><parameter_list>(<param><decl><type><name>RDocumentInterface</name>*</type> <name>documentInterface</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyBlockListenersCurrentBlock</name><parameter_list>(<param><decl><type><name>RDocumentInterface</name>*</type> <name>documentInterface</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addViewListener</name><parameter_list>(<param><decl><type><name>RViewListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>removeViewListener</name><parameter_list>(<param><decl><type><name>RViewListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyViewListeners</name><parameter_list>(<param><decl><type><name>RDocumentInterface</name>*</type> <name>documentInterface</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addPenListener</name><parameter_list>(<param><decl><type><name>RPenListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>removePenListener</name><parameter_list>(<param><decl><type><name>RPenListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyPenListeners</name><parameter_list>(<param><decl><type><name>RDocumentInterface</name>*</type> <name>documentInterface</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>addPaletteListener</name><parameter_list>(<param><decl><type><name>RPaletteListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>removePaletteListener</name><parameter_list>(<param><decl><type><name>RPaletteListener</name>*</type> <name>l</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>notifyPaletteListeners</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>ucsSetEvent</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>ucsName</name></decl></param>)</parameter_list>;</function_decl>

    <comment type="line">//void commandEvent(const QString&amp; command);</comment>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>escapeEvent</name><parameter_list>()</parameter_list> <specifier>= 0</specifier>;</function_decl>

    <comment type="block">/**
     * Sets the cursor of all graphics views in all MDI children.
     * Necessary as workaround for Qt cursor bug (cursor inconsistent
     * with multiple widgets on top of each other in MDI area).
     */</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setGraphicsViewCursor</name><parameter_list>(<param><decl><type><name>const</name> <name>QCursor</name>&amp;</type> <name>cursor</name></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>

    <comment type="block">/**
     * \return Width of the main application window.
     */</comment>
    <function_decl><type><name>virtual</name> <name>int</name></type> <name>getWidth</name><parameter_list>()</parameter_list> <specifier>= 0</specifier>;</function_decl>
    <comment type="block">/**
     * \return Height of the main application window.
     */</comment>
    <function_decl><type><name>virtual</name> <name>int</name></type> <name>getHeight</name><parameter_list>()</parameter_list> <specifier>= 0</specifier>;</function_decl>
    <comment type="block">/**
     * \return X position of the main application window
     *      (distance from left of screen).
     */</comment>
    <function_decl><type><name>virtual</name> <name>int</name></type> <name>getPositionX</name><parameter_list>()</parameter_list> <specifier>= 0</specifier>;</function_decl>
    <comment type="block">/**
     * \return Y position of the main application window
     *      (distance from top of screen).
     */</comment>
    <function_decl><type><name>virtual</name> <name>int</name></type> <name>getPositionY</name><parameter_list>()</parameter_list> <specifier>= 0</specifier>;</function_decl>

    <comment type="block">/**
     * Resizes the application window to the given \c width and \c height.
     */</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>resize</name><parameter_list>(<param><decl><type><name>int</name></type> <name>width</name></decl></param>, <param><decl><type><name>int</name></type> <name>height</name></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>
    <comment type="block">/**
     * Moves the application window to the given \c x / \c y position.
     */</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>move</name><parameter_list>(<param><decl><type><name>int</name></type> <name>x</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>
    <comment type="block">/**
     * Closes the application window.
     */</comment>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>quit</name><parameter_list>()</parameter_list> <specifier>= 0</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>QWidget</name>*</type> <name>getChildWidget</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>name</name></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>

    <function><type><name>virtual</name> <name>void</name></type> <name>handleUserMessage</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>message</name></decl></param>, <param><decl><type><name>bool</name></type> <name>escape</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>Q_UNUSED</name><parameter_list>(<param><decl><type><name>escape</name></type></decl></param>)</parameter_list>;</constructor_decl>

        <expr_stmt><expr><call><name>qDebug</name><argument_list>()</argument_list></call> &lt;&lt; <name>message</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>virtual</name> <name>void</name></type> <name>handleUserInfo</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>message</name></decl></param>, <param><decl><type><name>bool</name></type> <name>escape</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>Q_UNUSED</name><parameter_list>(<param><decl><type><name>escape</name></type></decl></param>)</parameter_list>;</constructor_decl>

        <expr_stmt><expr><call><name>qDebug</name><argument_list>()</argument_list></call> &lt;&lt; <name>message</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>virtual</name> <name>void</name></type> <name>handleUserWarning</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>message</name></decl></param>, <param><decl><type><name>bool</name></type> <name>messageBox</name> =<init> <expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>escape</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>Q_UNUSED</name><parameter_list>(<param><decl><type><name>messageBox</name></type></decl></param>)</parameter_list>;</constructor_decl>
        <constructor_decl><name>Q_UNUSED</name><parameter_list>(<param><decl><type><name>escape</name></type></decl></param>)</parameter_list>;</constructor_decl>

        <expr_stmt><expr><call><name>qWarning</name><argument_list>()</argument_list></call> &lt;&lt; <name>message</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>virtual</name> <name>void</name></type> <name>handleUserCommand</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>message</name></decl></param>, <param><decl><type><name>bool</name></type> <name>escape</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>Q_UNUSED</name><parameter_list>(<param><decl><type><name>escape</name></type></decl></param>)</parameter_list>;</constructor_decl>

        <expr_stmt><expr><call><name>qDebug</name><argument_list>()</argument_list></call> &lt;&lt; "Command: " &lt;&lt; <name>message</name></expr>;</expr_stmt>
    }</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>QT_VERSION</name> &gt;= 0x050000</expr></cpp:if>
    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function_decl><type><name>static</name> <name>void</name></type> <name>messageHandler</name><parameter_list>(<param><decl><type><name>QtMsgType</name></type> <name>type</name></decl></param>, <param><decl><type><name>const</name> <name>QMessageLogContext</name>&amp;</type> <name>context</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>message</name></decl></param>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <function_decl><type><name>static</name> <name>void</name></type> <name>messageHandler</name><parameter_list>(<param><decl><type><name>QtMsgType</name></type> <name>type</name></decl></param>, <param><decl><type><name>const</name> <name>char</name>*</type> <name>msg</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setCommandPrompt</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>text</name> =<init> <expr>""</expr></init></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setLeftMouseTip</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>text</name> =<init> <expr>""</expr></init></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setRightMouseTip</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>text</name> =<init> <expr>""</expr></init></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>

    <function_decl><type><name>QVariant</name></type> <name>eval</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>ext</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>script</name></decl></param>)</parameter_list>;</function_decl>

</public><protected>protected:
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>readSettings</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>writeSettings</name><parameter_list>()</parameter_list>;</function_decl>

</protected><protected>protected:
    <decl_stmt><decl><type><name>static</name> <name>RMainWindow</name>*</type> <name>mainWindow</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RCoordinateListener</name>*</argument>&gt;</argument_list></name></type> <name>coordinateListeners</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RSelectionListener</name>*</argument>&gt;</argument_list></name></type> <name>selectionListeners</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RPropertyListener</name>*</argument>&gt;</argument_list></name></type> <name>propertyListeners</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RUcsListener</name>*</argument>&gt;</argument_list></name></type> <name>ucsListeners</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RLayerListener</name>*</argument>&gt;</argument_list></name></type> <name>layerListeners</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RBlockListener</name>*</argument>&gt;</argument_list></name></type> <name>blockListeners</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RViewListener</name>*</argument>&gt;</argument_list></name></type> <name>viewListeners</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RPenListener</name>*</argument>&gt;</argument_list></name></type> <name>penListeners</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RPaletteListener</name>*</argument>&gt;</argument_list></name></type> <name>paletteListeners</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>REntityExportListener</name>*</argument>&gt;</argument_list></name></type> <name>entityExportListeners</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RExportListener</name>*</argument>&gt;</argument_list></name></type> <name>exportListeners</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RImportListener</name>*</argument>&gt;</argument_list></name></type> <name>importListeners</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RTransactionListener</name>*</argument>&gt;</argument_list></name></type> <name>transactionListeners</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RInterTransactionListener</name>*</argument>&gt;</argument_list></name></type> <name>interTransactionListeners</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RNewDocumentListener</name>*</argument>&gt;</argument_list></name></type> <name>newDocumentListeners</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RSnapListener</name>*</argument>&gt;</argument_list></name></type> <name>snapListeners</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RKeyListener</name>*</argument>&gt;</argument_list></name></type> <name>keyListeners</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RFocusListener</name>*</argument>&gt;</argument_list></name></type> <name>focusListeners</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RViewFocusListener</name>*</argument>&gt;</argument_list></name></type> <name>viewFocusListeners</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RPreferencesListener</name>*</argument>&gt;</argument_list></name></type> <name>preferencesListeners</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>QMutex</name></type> <name>mutex</name></decl>;</decl_stmt>
</protected>}</block>;</class>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RMainWindow*</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
