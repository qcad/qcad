<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./entity" filename="RSplineEntity.h"><comment type="block">/**
 * Copyright (c) 2011-2018 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RSPLINEENTITY_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RSPLINEENTITY_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"entity_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"REntity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RSplineData.h"</cpp:file></cpp:include>

<class_decl>class <name>RDocument</name>;</class_decl>
<class_decl>class <name>RExporter</name>;</class_decl>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RDEFAULT_MIN1</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RDEFAULT_MIN1</name> -1</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/**
 * Spline entity.
 *
 * \scriptable
 * \sharedPointerSupport
 * \ingroup entity
 */</comment>
<class>class <macro><name>QCADENTITY_EXPORT</name></macro> <name>RSplineEntity</name><super>: <specifier>public</specifier> <name>REntity</name></super> <block>{<private type="default">

</private><public>public:
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyCustom</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyHandle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyProtected</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyWorkingSet</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyBlock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyLayer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyLinetype</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyLinetypeScale</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyLineweight</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyColor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyDisplayedColor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyDrawOrder</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyControlPointNX</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyControlPointNY</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyControlPointNZ</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyFitPointNX</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyFitPointNY</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyFitPointNZ</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyKnotN</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyPeriodic</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyDegree</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyUseStartTangent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyStartTangentX</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyStartTangentY</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyStartTangentZ</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyUseEndTangent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyEndTangentX</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyEndTangentY</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyEndTangentZ</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyLength</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>RPropertyTypeId</name></type> <name>PropertyTotalLength</name></decl>;</decl_stmt>

</public><public>public:
    <constructor_decl><name>RSplineEntity</name><parameter_list>(<param><decl><type><name>RDocument</name>*</type> <name>document</name></decl></param>, <param><decl><type><name>const</name> <name>RSplineData</name>&amp;</type> <name>data</name></decl></param>)</parameter_list>;</constructor_decl>
    <constructor_decl><name>RSplineEntity</name><parameter_list>(<param><decl><type><name>const</name> <name>RSplineEntity</name>&amp;</type> <name>other</name></decl></param>)</parameter_list>;</constructor_decl>
    <destructor_decl><specifier>virtual</specifier> <name>~RSplineEntity</name><parameter_list>()</parameter_list>;</destructor_decl>

    <function_decl><type><name>static</name> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list>;</function_decl>

    <function><type><name>static</name> <name>QSet<argument_list>&lt;<argument><name>RPropertyTypeId</name></argument>&gt;</argument_list></name></type> <name>getStaticPropertyTypeIds</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>RPropertyTypeId</name>::<name>getPropertyTypeIds</name></name><argument_list>(<argument><expr><call><name>typeid</name><argument_list>(<argument><expr><name>RSplineEntity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>virtual</name> <name>RSplineEntity</name>*</type> <name>clone</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr>new <call><name>RSplineEntity</name><argument_list>(<argument><expr>*<name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>setProperty</name><parameter_list>(<param><decl><type><name>RPropertyTypeId</name></type> <name>propertyTypeId</name></decl></param>, <param><decl><type><name>const</name> <name>QVariant</name>&amp;</type> <name>value</name></decl></param>,
        <param><decl><type><name>RTransaction</name>*</type> <name>transaction</name>=<init><expr><name>NULL</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>QPair<argument_list>&lt;<argument><name>QVariant</name></argument>, <argument><name>RPropertyAttributes</name></argument>&gt;</argument_list></name></type> <name>getProperty</name><parameter_list>(
            <param><decl><type><name>RPropertyTypeId</name>&amp;</type> <name>propertyTypeId</name></decl></param>,
            <param><decl><type><name>bool</name></type> <name>humanReadable</name> =<init> <expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>noAttributes</name> =<init> <expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>showOnRequest</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>exportEntity</name><parameter_list>(<param><decl><type><name>RExporter</name>&amp;</type> <name>e</name></decl></param>, <param><decl><type><name>bool</name></type> <name>preview</name>=<init><expr><name>false</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>forceSelected</name>=<init><expr><name>false</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function><type><name>virtual</name> <name>void</name></type> <name>setUndone</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list> <block>{
        <constructor_decl><name>REntity::setUndone</name><parameter_list>(<param><decl><type><name>on</name></type></decl></param>)</parameter_list>;</constructor_decl>
        <expr_stmt><expr><name>data</name>.<call><name>update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>virtual</name> <name>RSplineData</name>&amp;</type> <name>getData</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>data</name></expr>;</return>
    }</block></function>

    <function><type><name>virtual</name> <name>const</name> <name>RSplineData</name>&amp;</type> <name>getData</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name></expr>;</return>
    }</block></function>

    <function_decl><type><name>void</name></type> <name>setShape</name><parameter_list>(<param><decl><type><name>const</name> <name>RSpline</name>&amp;</type> <name>s</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><name>bool</name></type> <name>isValid</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>isValid</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>double</name></type> <name>getTDelta</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getTDelta</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>double</name></type> <name>getTMin</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getTMin</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>double</name></type> <name>getTMax</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getTMax</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>double</name></type> <name>getTAtPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>point</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getTAtPoint</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>double</name></type> <name>getTAtDistance</name><parameter_list>(<param><decl><type><name>double</name></type> <name>distance</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getTAtDistance</name><argument_list>(<argument><expr><name>distance</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>getDegree</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getDegree</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>double</name></type> <name>getDirection1</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getDirection1</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>double</name></type> <name>getDirection2</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getDirection2</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name><name>RS</name>::<name>Ending</name></name></type> <name>getTrimEnd</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>trimPoint</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>clickPoint</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>data</name>.<call><name>getTrimEnd</name><argument_list>(<argument><expr><name>trimPoint</name></expr></argument>, <argument><expr><name>clickPoint</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>trimStartPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>trimPoint</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>clickPoint</name> =<init> <expr><name><name>RVector</name>::<name>invalid</name></name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>extend</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>data</name>.<call><name>trimStartPoint</name><argument_list>(<argument><expr><name>trimPoint</name></expr></argument>, <argument><expr><name>clickPoint</name></expr></argument>, <argument><expr><name>extend</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><type><name>bool</name></type> <name>trimEndPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>trimPoint</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>clickPoint</name> =<init> <expr><name><name>RVector</name>::<name>invalid</name></name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>extend</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>data</name>.<call><name>trimEndPoint</name><argument_list>(<argument><expr><name>trimPoint</name></expr></argument>, <argument><expr><name>clickPoint</name></expr></argument>, <argument><expr><name>extend</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>QList<argument_list>&lt;<argument><name>RSpline</name></argument>&gt;</argument_list></name></type> <name>splitAtPoints</name><parameter_list>(<param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name>&amp;</type> <name>points</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>splitAtPoints</name><argument_list>(<argument><expr><name>points</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><type><name>QList<argument_list>&lt;<argument><name>RSpline</name></argument>&gt;</argument_list></name></type> <name>splitAtParams</name><parameter_list>(<param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name>&amp;</type> <name>params</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>splitAtParams</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>RVector</name></type> <name>getTangentAtStart</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getTangentAtStart</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>RVector</name></type> <name>getTangentAtEnd</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getTangentAtEnd</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>isClosed</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>isClosed</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>isGeometricallyClosed</name><parameter_list>(<param><decl><type><name>double</name></type> <name>tolerance</name>=<init><expr><name><name>RS</name>::<name>PointTolerance</name></name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>isGeometricallyClosed</name><argument_list>(<argument><expr><name>tolerance</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>isPeriodic</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>isPeriodic</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>appendControlPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>point</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>appendControlPoint</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>appendFitPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>point</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>appendFitPoint</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>prependFitPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>point</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>prependFitPoint</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>insertFitPointAt</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>point</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>insertFitPointAt</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>removeFitPointAt</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>point</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>removeFitPointAt</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>setPeriodic</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>setPeriodic</name><argument_list>(<argument><expr><name>on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getControlPoints</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getControlPoints</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getControlPointsWrapped</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getControlPointsWrapped</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>countControlPoints</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>countControlPoints</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>RVector</name></type> <name>getControlPointAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getControlPointAt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>getFitPoints</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getFitPoints</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>hasFitPoints</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>hasFitPoints</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>countFitPoints</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>countFitPoints</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>RVector</name></type> <name>getFitPointAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getFitPointAt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name></type> <name>getKnotVector</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getKnotVector</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name></type> <name>getActualKnotVector</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getActualKnotVector</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>QList<argument_list>&lt;<argument><name>double</name></argument>&gt;</argument_list></name></type> <name>getWeights</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getWeights</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">//RSpline getSubSpline(double d1, double d2) const {</comment>
    <comment type="line">//    return data.getSubSpline(d1, d2);</comment>
    <comment type="line">//}</comment>

    <function><type><name>double</name></type> <name>getLength</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getLength</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>RVector</name></type> <name>getPointAt</name><parameter_list>(<param><decl><type><name>double</name></type> <name>t</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getPointAt</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>RVector</name></type> <name>getPointAtDistance</name><parameter_list>(<param><decl><type><name>double</name></type> <name>distance</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getPointAtDistance</name><argument_list>(<argument><expr><name>distance</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>double</name></type> <name>getAngleAt</name><parameter_list>(<param><decl><type><name>double</name></type> <name>distance</name></decl></param>, <param><decl><type><name><name>RS</name>::<name>From</name></name></type> <name>from</name> =<init> <expr><name><name>RS</name>::<name>FromStart</name></name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getAngleAt</name><argument_list>(<argument><expr><name>distance</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>RVector</name></type> <name>getStartPoint</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getStartPoint</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>RVector</name></type> <name>getEndPoint</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getEndPoint</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setStartPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>sp</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>data</name>.<call><name>setStartPoint</name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setEndPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>ep</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>data</name>.<call><name>setEndPoint</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>RPolyline</name></type> <name>toPolyline</name><parameter_list>(<param><decl><type><name>int</name></type> <name>segments</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>toPolyline</name><argument_list>(<argument><expr><name>segments</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>RPolyline</name></type> <name>approximateWithArcs</name><parameter_list>(<param><decl><type><name>double</name></type> <name>tolerance</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>approximateWithArcs</name><argument_list>(<argument><expr><name>tolerance</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>reverse</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>data</name>.<call><name>reverse</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name><name>RS</name>::<name>Side</name></name></type> <name>getSideOfPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>point</name></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getSideOfPoint</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><type><name>virtual</name> <name>int</name></type> <name>getComplexity</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function><type><name>QList<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RShape</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>getExploded</name><parameter_list>(<param><decl><type><name>int</name></type> <name>segments</name> =<init> <expr><name>RDEFAULT_MIN1</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getExploded</name><argument_list>(<argument><expr><name>segments</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>simplify</name><parameter_list>(<param><decl><type><name>double</name></type> <name>tolerance</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>data</name>.<call><name>simplify</name><argument_list>(<argument><expr><name>tolerance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>QList<argument_list>&lt;<argument><name>RSpline</name></argument>&gt;</argument_list></name></type> <name>getBezierSegments</name><parameter_list>(<param><decl><type><name>const</name> <name>RBox</name>&amp;</type> <name>queryBox</name> =<init> <expr><name>RDEFAULT_RBOX</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>data</name>.<call><name>getBezierSegments</name><argument_list>(<argument><expr><name>queryBox</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block">/*
    double getAngle() const {
        return data.getAngle();
    }

    double getDirection1() const {
        return data.getDirection1();
    }

    double getDirection2() const {
        return data.getDirection2();
    }

    RS::Side getSideOfPoint(const RVector&amp; point) const {
        return data.getSideOfPoint(point);
    }
    */</comment>

</public><protected>protected:
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>print</name><parameter_list>(<param><decl><type><name>QDebug</name></type> <name>dbg</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

</protected><protected>protected:
    <decl_stmt><decl><type><name>RSplineData</name></type> <name>data</name></decl>;</decl_stmt>
</protected>}</block>;</class>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RSplineEntity*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QSharedPointer&lt;RSplineEntity&gt;</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QSharedPointer&lt;RSplineEntity&gt;*</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
