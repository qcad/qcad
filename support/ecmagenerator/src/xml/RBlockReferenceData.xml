<?xml version="1.0"?>
<unit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:rs="http://www.ribbonsoft.com">
  <class_decl name="RDocument" />
  <class_decl name="RExporter" />
  <class name="RBlockReferenceData"
  xsi:noNamespaceSchemaLocation="../class.xsd" isCopyable="true"
  hasShell="false" sharedPointerSupport="false" isQObject="false"
  hasStreamOperator="false" isAbstract="false" isScriptable="true">
    <baseClass name="REntityData" specifier="public" />
    <constructor>
      <variant />
      <variant>
        <arg type="RBlock::Id" typeName="RBlock::Id"
        name="referencedBlockId" isConst="false" />
        <arg type="RVector &amp;" typeName="RVector"
        name="position" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector"
        name="scaleFactors" isConst="true" />
        <arg type="double" typeName="double" name="angle"
        isConst="false" />
        <arg type="int" typeName="int" name="columnCount"
        hasDefault="true" default="1" isConst="false" />
        <arg type="int" typeName="int" name="rowCount"
        hasDefault="true" default="1" isConst="false" />
        <arg type="double" typeName="double" name="columnSpacing"
        hasDefault="true" default="0" isConst="false" />
        <arg type="double" typeName="double" name="rowSpacing"
        hasDefault="true" default="0" isConst="false" />
      </variant>
    </constructor>
    <method name="getType" cppName="getType" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="RS::EntityType" isPureVirtual="false" />
    </method>
    <method name="isPointType" cppName="isPointType"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="getBoundingBoxes" cppName="getBoundingBoxes"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RBox &gt;"
      isPureVirtual="false">
        <arg type="bool" typeName="bool" name="ignoreEmpty"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="getBoundingBox" cppName="getBoundingBox"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RBox" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="ignoreEmpty"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="to2D" cppName="to2D" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="getPointOnEntity" cppName="getPointOnEntity"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false" />
    </method>
    <method name="getInternalReferencePoints"
    cppName="getInternalReferencePoints" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="QList &lt; RRefPoint &gt;"
      isPureVirtual="false">
        <arg type="RS::ProjectionRenderingHint"
        typeName="RS::ProjectionRenderingHint" name="hint"
        hasDefault="true" default="RS :: RenderTop"
        isConst="false" />
      </variant>
    </method>
    <method name="getReferencePoints" cppName="getReferencePoints"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RRefPoint &gt;"
      isPureVirtual="false">
        <arg type="RS::ProjectionRenderingHint"
        typeName="RS::ProjectionRenderingHint" name="hint"
        hasDefault="true" default="RS :: RenderTop"
        isConst="false" />
      </variant>
    </method>
    <method name="getVectorTo" cppName="getVectorTo"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
        <arg type="bool" typeName="bool" name="limited"
        hasDefault="true" default="true" isConst="false" />
        <arg type="double" typeName="double" name="strictRange"
        hasDefault="true" default="RMAXDOUBLE" isConst="false" />
      </variant>
    </method>
    <method name="getDistanceTo" cppName="getDistanceTo"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
        <arg type="bool" typeName="bool" name="limited"
        hasDefault="true" default="true" isConst="false" />
        <arg type="double" typeName="double" name="range"
        hasDefault="true" default="0.0" isConst="false" />
        <arg type="bool" typeName="bool" name="draft"
        hasDefault="true" default="false" isConst="false" />
        <arg type="double" typeName="double" name="strictRange"
        hasDefault="true" default="RMAXDOUBLE" isConst="false" />
      </variant>
    </method>
    <method name="getQueryBoxInBlockCoordinates"
    cppName="getQueryBoxInBlockCoordinates" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="RBox" isPureVirtual="false">
        <arg type="RBox &amp;" typeName="RBox" name="box"
        isConst="true" />
      </variant>
    </method>
    <method name="getShapes" cppName="getShapes" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="QList &lt; QSharedPointer &lt; RShape &gt; &gt;"
      isPureVirtual="false">
        <arg type="RBox &amp;" typeName="RBox" name="queryBox"
        hasDefault="true" default="RDEFAULT_RBOX" isConst="true" />
        <arg type="bool" typeName="bool" name="ignoreComplex"
        hasDefault="true" default="false" isConst="false" />
        <arg type="bool" typeName="bool" name="segment"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="moveReferencePoint" cppName="moveReferencePoint"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="referencePoint" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector"
        name="targetPoint" isConst="true" />
        <arg type="Qt::KeyboardModifiers"
        typeName="Qt::KeyboardModifiers" name="modifiers"
        hasDefault="true" default="Qt :: NoModifier"
        isConst="false" />
      </variant>
    </method>
    <method name="move" cppName="move" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="offset"
        isConst="true" />
      </variant>
    </method>
    <method name="rotate" cppName="rotate" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="double" typeName="double" name="rotation"
        isConst="false" />
        <arg type="RVector &amp;" typeName="RVector" name="center"
        hasDefault="true" default="RDEFAULT_RVECTOR"
        isConst="true" />
      </variant>
    </method>
    <method name="mirror" cppName="mirror" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RLine &amp;" typeName="RLine" name="axis"
        isConst="true" />
      </variant>
    </method>
    <method name="scale" cppName="scale" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="scaleFactors" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector" name="center"
        hasDefault="true" default="RDEFAULT_RVECTOR"
        isConst="true" />
      </variant>
    </method>
    <method name="scaleVisualProperties"
    cppName="scaleVisualProperties" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="scaleFactor"
        isConst="false" />
      </variant>
    </method>
    <method name="setReferencedBlockId"
    cppName="setReferencedBlockId" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RBlock::Id" typeName="RBlock::Id" name="blockId"
        isConst="false" />
      </variant>
    </method>
    <method name="groundReferencedBlockId"
    cppName="groundReferencedBlockId" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="getReferencedBlockId"
    cppName="getReferencedBlockId" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="RBlock::Id" isPureVirtual="false" />
    </method>
    <method name="setReferencedBlockName"
    cppName="setReferencedBlockName" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="QString &amp;" typeName="QString"
        name="blockName" isConst="true" />
      </variant>
    </method>
    <method name="getReferencedBlockName"
    cppName="getReferencedBlockName" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="QString" isPureVirtual="false" />
    </method>
    <method name="getPosition" cppName="getPosition"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false" />
    </method>
    <method name="setPosition" cppName="setPosition"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="p"
        isConst="true" />
      </variant>
    </method>
    <method name="getScaleFactors" cppName="getScaleFactors"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false" />
    </method>
    <method name="setScaleFactors" cppName="setScaleFactors"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="sf"
        isConst="true" />
      </variant>
    </method>
    <method name="getRotation" cppName="getRotation"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="setRotation" cppName="setRotation"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="r"
        isConst="false" />
      </variant>
    </method>
    <method name="getColumnCount" cppName="getColumnCount"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="int" isPureVirtual="false" />
    </method>
    <method name="setColumnCount" cppName="setColumnCount"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="int" typeName="int" name="c" isConst="false" />
      </variant>
    </method>
    <method name="getRowCount" cppName="getRowCount"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="int" isPureVirtual="false" />
    </method>
    <method name="setRowCount" cppName="setRowCount"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="int" typeName="int" name="c" isConst="false" />
      </variant>
    </method>
    <method name="getColumnSpacing" cppName="getColumnSpacing"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="setColumnSpacing" cppName="setColumnSpacing"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="s"
        isConst="false" />
      </variant>
    </method>
    <method name="getRowSpacing" cppName="getRowSpacing"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="setRowSpacing" cppName="setRowSpacing"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="s"
        isConst="false" />
      </variant>
    </method>
    <method name="update" cppName="update" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
      <variant returnType="void" isPureVirtual="false">
        <arg type="RObject::Id" typeName="RObject::Id"
        name="entityId" isConst="false" />
      </variant>
    </method>
    <method name="queryEntity" cppName="queryEntity"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QSharedPointer &lt; REntity &gt;"
      isPureVirtual="false">
        <arg type="REntity::Id" typeName="REntity::Id"
        name="entityId" isConst="false" />
        <arg type="bool" typeName="bool" name="transform"
        hasDefault="true" default="false" isConst="false" />
        <arg type="bool" typeName="bool" name="ignoreAttDef"
        hasDefault="true" default="true" isConst="false" />
      </variant>
    </method>
    <method name="applyTransformationTo"
    cppName="applyTransformationTo" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="REntity &amp;" typeName="REntity" name="entity"
        isConst="false" />
      </variant>
    </method>
    <method name="getTransform" cppName="getTransform"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RTransform" isPureVirtual="false" />
    </method>
    <method name="getColumnRowOffset" cppName="getColumnRowOffset"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false">
        <arg type="int" typeName="int" name="col"
        isConst="false" />
        <arg type="int" typeName="int" name="row"
        isConst="false" />
        <arg type="bool" typeName="bool" name="rotated"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="applyColumnRowOffsetTo"
    cppName="applyColumnRowOffsetTo" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="REntity &amp;" typeName="REntity" name="entity"
        isConst="false" />
        <arg type="int" typeName="int" name="col"
        isConst="false" />
        <arg type="int" typeName="int" name="row"
        isConst="false" />
        <arg type="bool" typeName="bool" name="rotated"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="mapToBlock" cppName="mapToBlock"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="v"
        isConst="true" />
      </variant>
    </method>
    <method name="isPixelUnit" cppName="isPixelUnit"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
  </class>
</unit>
