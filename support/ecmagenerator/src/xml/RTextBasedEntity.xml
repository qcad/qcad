<?xml version="1.0"?>
<unit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:rs="http://www.ribbonsoft.com">
  <class_decl name="RDocument" />
  <class_decl name="RExporter" />
  <class name="RTextBasedEntity"
  xsi:noNamespaceSchemaLocation="../class.xsd" isCopyable="false"
  hasShell="false" sharedPointerSupport="true" isQObject="false"
  hasStreamOperator="false" isAbstract="true" isScriptable="true">
    <baseClass name="REntity" specifier="public" />
    <constructor>
      <variant>
        <arg type="RDocument *" typeName="RDocument *"
        name="document" isConst="false" />
        <arg type="RObject::Id" typeName="RObject::Id"
        name="objectId" hasDefault="true"
        default="RObject :: INVALID_ID" isConst="false" />
      </variant>
    </constructor>
    <method name="init" cppName="init" specifier="public"
    isStatic="true" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="getStaticPropertyTypeIds"
    cppName="getStaticPropertyTypeIds" specifier="public"
    isStatic="true" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="QSet &lt; RPropertyTypeId &gt;"
      isPureVirtual="false" />
    </method>
    <method name="getType" cppName="getType" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="RS::EntityType" isPureVirtual="false" />
    </method>
    <method name="getData" cppName="getData" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="RTextBasedData &amp;"
      isPureVirtual="true" />
      <variant returnType="const RTextBasedData &amp;"
      isPureVirtual="false" />
    </method>
    <method name="setProperty" cppName="setProperty"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RPropertyTypeId" typeName="RPropertyTypeId"
        name="propertyTypeId" isConst="false" />
        <arg type="QVariant &amp;" typeName="QVariant" name="value"
        isConst="true" />
        <arg type="RTransaction *" typeName="RTransaction *"
        name="transaction" hasDefault="true" default=" NULL"
        isConst="false" />
      </variant>
    </method>
    <method name="getProperty" cppName="getProperty"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QPair &lt; QVariant , RPropertyAttributes &gt;"
      isPureVirtual="false">
        <arg type="RPropertyTypeId &amp;"
        typeName="RPropertyTypeId" name="propertyTypeId"
        isConst="false" />
        <arg type="bool" typeName="bool" name="humanReadable"
        hasDefault="true" default=" false" isConst="false" />
        <arg type="bool" typeName="bool" name="noAttributes"
        hasDefault="true" default=" false" isConst="false" />
      </variant>
    </method>
    <method name="exportEntity" cppName="exportEntity"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RExporter &amp;" typeName="RExporter" name="e"
        isConst="false" />
        <arg type="bool" typeName="bool" name="preview"
        hasDefault="true" default=" false" isConst="false" />
      </variant>
    </method>
    <method name="getPainterPaths" cppName="getPainterPaths"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RPainterPath &gt;"
      isPureVirtual="false">
        <arg type="bool" typeName="bool" name="draft"
        hasDefault="true" default=" false" isConst="false" />
      </variant>
    </method>
    <method name="getShapes" cppName="getShapes" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="QList &lt; QSharedPointer &lt; RShape &gt; &gt;"
      isPureVirtual="false">
        <arg type="RBox &amp;" typeName="RBox" name="queryBox"
        hasDefault="true" default="RDEFAULT_RBOX" isConst="true" />
      </variant>
    </method>
    <method name="getExploded" cppName="getExploded"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; QSharedPointer &lt; RShape &gt; &gt;"
      isPureVirtual="false" />
    </method>
    <method name="getTextData" cppName="getTextData"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RTextBasedData &amp;"
      isPureVirtual="false" />
    </method>
    <method name="isBold" cppName="isBold" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setBold" cppName="setBold" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="isItalic" cppName="isItalic" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setItalic" cppName="setItalic" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="getPosition" cppName="getPosition"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false" />
    </method>
    <method name="setPosition" cppName="setPosition"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="position" isConst="true" />
      </variant>
    </method>
    <method name="getAlignmentPoint" cppName="getAlignmentPoint"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false" />
    </method>
    <method name="setAlignmentPoint" cppName="setAlignmentPoint"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="alignmentPoint" isConst="true" />
      </variant>
    </method>
    <method name="getTextHeight" cppName="getTextHeight"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="setTextHeight" cppName="setTextHeight"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="h"
        isConst="false" />
      </variant>
    </method>
    <method name="getTextWidth" cppName="getTextWidth"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="getWidth" cppName="getWidth" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="getHeight" cppName="getHeight" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="getVAlign" cppName="getVAlign" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="RS::VAlign" isPureVirtual="false" />
    </method>
    <method name="setVAlign" cppName="setVAlign" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RS::VAlign" typeName="RS::VAlign" name="va"
        isConst="false" />
      </variant>
    </method>
    <method name="getHAlign" cppName="getHAlign" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="RS::HAlign" isPureVirtual="false" />
    </method>
    <method name="setHAlign" cppName="setHAlign" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RS::HAlign" typeName="RS::HAlign" name="ha"
        isConst="false" />
      </variant>
    </method>
    <method name="getFontName" cppName="getFontName"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QString" isPureVirtual="false" />
    </method>
    <method name="setFontName" cppName="setFontName"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="QString &amp;" typeName="QString"
        name="fontName" isConst="true" />
      </variant>
    </method>
    <method name="setDrawingDirection"
    cppName="setDrawingDirection" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RS::TextDrawingDirection"
        typeName="RS::TextDrawingDirection" name="drawingDirection"
        isConst="false" />
      </variant>
    </method>
    <method name="getDrawingDirection"
    cppName="getDrawingDirection" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="RS::TextDrawingDirection"
      isPureVirtual="false" />
    </method>
    <method name="setLineSpacingStyle"
    cppName="setLineSpacingStyle" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RS::TextLineSpacingStyle"
        typeName="RS::TextLineSpacingStyle" name="lineSpacingStyle"
        isConst="false" />
      </variant>
    </method>
    <method name="getLineSpacingStyle"
    cppName="getLineSpacingStyle" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="RS::TextLineSpacingStyle"
      isPureVirtual="false" />
    </method>
    <method name="setLineSpacingFactor"
    cppName="setLineSpacingFactor" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double"
        name="lineSpacingFactor" isConst="false" />
      </variant>
    </method>
    <method name="getLineSpacingFactor"
    cppName="getLineSpacingFactor" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="setAngle" cppName="setAngle" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="angle"
        isConst="false" />
      </variant>
    </method>
    <method name="getAngle" cppName="getAngle" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="setXScale" cppName="setXScale" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="xScale"
        isConst="false" />
      </variant>
    </method>
    <method name="getXScale" cppName="getXScale" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="setSimple" cppName="setSimple" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="isSimple" cppName="isSimple" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="getEscapedText" cppName="getEscapedText"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QString" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="escapeUnicode"
        hasDefault="true" default=" false" isConst="false" />
      </variant>
    </method>
    <method name="getPlainText" cppName="getPlainText"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QString" isPureVirtual="false" />
    </method>
    <method name="setText" cppName="setText" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="QString &amp;" typeName="QString" name="text"
        isConst="true" />
      </variant>
    </method>
    <method name="sync" cppName="sync" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RTextBasedEntity &amp;"
        typeName="RTextBasedEntity" name="other" isConst="true" />
      </variant>
    </method>
    <method name="print" cppName="print" specifier="protected"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="QDebug" typeName="QDebug" name="dbg"
        isConst="false" />
      </variant>
    </method>
    <property name="PropertyCustom" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyHandle" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyType" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyBlock" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyLayer" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyLinetype" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyLineweight" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyColor" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyDrawOrder" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertySimple" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyPositionX" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyPositionY" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyPositionZ" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyText" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyPlainText" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyFontName" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyHeight" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyAngle" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyXScale" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyBold" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyItalic" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyLineSpacingFactor"
    type="RPropertyTypeId" isConst="false" isStatic="true" />
    <property name="PropertyHAlign" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyVAlign" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
  </class>
</unit>
