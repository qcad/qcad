<?xml version="1.0"?>
<unit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:rs="http://www.ribbonsoft.com">
  <class_decl name="RBlockReferenceEntity" />
  <class_decl name="RDocument" />
  <class_decl name="REntity" />
  <class_decl name="RExporter" />
  <class name="REntityData"
  xsi:noNamespaceSchemaLocation="../class.xsd" isCopyable="false"
  hasShell="false" sharedPointerSupport="true" isQObject="false"
  hasStreamOperator="false" isAbstract="true" isScriptable="true">
    <constructor>
      <variant>
        <arg type="RDocument *" typeName="RDocument *"
        name="document" hasDefault="true" default="NULL"
        isConst="false" />
      </variant>
    </constructor>
    <method name="getDocument" cppName="getDocument"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RDocument *" isPureVirtual="false" />
      <variant returnType="const RDocument *"
      isPureVirtual="false" />
    </method>
    <method name="setDocument" cppName="setDocument"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RDocument *" typeName="RDocument *"
        name="document" isConst="false" />
      </variant>
    </method>
    <method name="getType" cppName="getType" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="RS::EntityType" isPureVirtual="false" />
    </method>
    <method name="isPointType" cppName="isPointType"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="isValid" cppName="isValid" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="isSane" cppName="isSane" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="getShapes" cppName="getShapes" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="QList &lt; QSharedPointer &lt; RShape &gt; &gt;"
      isPureVirtual="false">
        <arg type="RBox &amp;" typeName="RBox" name="queryBox"
        hasDefault="true" default="RDEFAULT_RBOX" isConst="true" />
        <arg type="bool" typeName="bool" name="ignoreComplex"
        hasDefault="true" default="false" isConst="false" />
        <arg type="bool" typeName="bool" name="segment"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="getClosestShape" cppName="getClosestShape"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QSharedPointer &lt; RShape &gt;"
      isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="pos"
        isConst="true" />
        <arg type="double" typeName="double" name="range"
        hasDefault="true" default="RNANDOUBLE" isConst="false" />
        <arg type="bool" typeName="bool" name="ignoreComplex"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="castToShape" cppName="castToShape"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RShape *" isPureVirtual="false" />
    </method>
    <method name="getBoundingBox" cppName="getBoundingBox"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RBox" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="ignoreEmpty"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="copyAttributesFrom" cppName="copyAttributesFrom"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="REntityData &amp;" typeName="REntityData"
        name="entityData" isConst="true" />
        <arg type="bool" typeName="bool" name="copyBlockId"
        hasDefault="true" default="true" isConst="false" />
      </variant>
    </method>
    <method name="to2D" cppName="to2D" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="setZ" cppName="setZ" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="z"
        isConst="false" />
      </variant>
    </method>
    <method name="getBoundingBoxes" cppName="getBoundingBoxes"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RBox &gt;"
      isPureVirtual="false">
        <arg type="bool" typeName="bool" name="ignoreEmpty"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="getHull" cppName="getHull" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="RPolyline" isPureVirtual="false">
        <arg type="double" typeName="double" name="offset"
        isConst="false" />
      </variant>
    </method>
    <method name="isUpdatesEnabled" cppName="isUpdatesEnabled"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setUpdatesEnabled" cppName="setUpdatesEnabled"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="cloneOnChange" cppName="cloneOnChange"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="isSelected" cppName="isSelected"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setSelected" cppName="setSelected"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="isSelectedWorkingSet"
    cppName="isSelectedWorkingSet" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setSelectedWorkingSet"
    cppName="setSelectedWorkingSet" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="getDrawOrder" cppName="getDrawOrder"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="int" isPureVirtual="false" />
    </method>
    <method name="setDrawOrder" cppName="setDrawOrder"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="int" typeName="int" name="drawOrder"
        isConst="false" />
      </variant>
    </method>
    <method name="setLayerId" cppName="setLayerId"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RLayer::Id" typeName="RLayer::Id" name="layerId"
        isConst="false" />
      </variant>
    </method>
    <method name="getLayerId" cppName="getLayerId"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RLayer::Id" isPureVirtual="false" />
    </method>
    <method name="setLayerName" cppName="setLayerName"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="QString &amp;" typeName="QString"
        name="layerName" isConst="true" />
      </variant>
    </method>
    <method name="getLayerName" cppName="getLayerName"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QString" isPureVirtual="false" />
    </method>
    <method name="setBlockId" cppName="setBlockId"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RBlock::Id" typeName="RBlock::Id" name="blockId"
        isConst="false" />
      </variant>
    </method>
    <method name="getBlockId" cppName="getBlockId"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RBlock::Id" isPureVirtual="false" />
    </method>
    <method name="setParentId" cppName="setParentId"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RObject::Id" typeName="RObject::Id"
        name="parentId" isConst="false" />
      </variant>
    </method>
    <method name="getParentId" cppName="getParentId"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RObject::Id" isPureVirtual="false" />
    </method>
    <method name="getBlockName" cppName="getBlockName"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QString" isPureVirtual="false" />
    </method>
    <method name="setLinetypeId" cppName="setLinetypeId"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RLinetype::Id" typeName="RLinetype::Id"
        name="linetypeId" isConst="false" />
      </variant>
    </method>
    <method name="getLinetypeId" cppName="getLinetypeId"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RLinetype::Id" isPureVirtual="false" />
      <variant returnType="RLinetype::Id" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="resolve"
        isConst="false" />
        <arg type="QStack &lt; REntity * &gt; &amp;"
        typeName="QStack &lt; REntity * &gt;" name="blockRefStack"
        isConst="true" />
      </variant>
    </method>
    <method name="setLinetypePattern" cppName="setLinetypePattern"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RLinetypePattern &amp;"
        typeName="RLinetypePattern" name="p" isConst="true" />
      </variant>
    </method>
    <method name="getLinetypePattern" cppName="getLinetypePattern"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RLinetypePattern"
      isPureVirtual="false" />
    </method>
    <method name="setLinetypeScale" cppName="setLinetypeScale"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="linetypeScale"
        isConst="false" />
      </variant>
    </method>
    <method name="getLinetypeScale" cppName="getLinetypeScale"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="getLineweight" cppName="getLineweight"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RLineweight::Lineweight"
      isPureVirtual="false" />
      <variant returnType="RLineweight::Lineweight"
      isPureVirtual="false">
        <arg type="bool" typeName="bool" name="resolve"
        isConst="false" />
        <arg type="QStack &lt; REntity * &gt; &amp;"
        typeName="QStack &lt; REntity * &gt;" name="blockRefStack"
        isConst="true" />
      </variant>
    </method>
    <method name="getLineweightInUnits"
    cppName="getLineweightInUnits" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false">
        <arg type="QStack &lt; REntity * &gt; &amp;"
        typeName="QStack &lt; REntity * &gt;" name="blockRefStack"
        isConst="true" />
      </variant>
    </method>
    <method name="setLineweight" cppName="setLineweight"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RLineweight::Lineweight"
        typeName="RLineweight::Lineweight" name="lineweight"
        isConst="false" />
      </variant>
    </method>
    <method name="setColor" cppName="setColor" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RColor &amp;" typeName="RColor" name="color"
        isConst="true" />
      </variant>
    </method>
    <method name="getColor" cppName="getColor" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="RColor" isPureVirtual="false" />
      <variant returnType="RColor" isPureVirtual="false">
        <arg type="RColor &amp;" typeName="RColor"
        name="unresolvedColor" isConst="true" />
        <arg type="QStack &lt; REntity * &gt; &amp;"
        typeName="QStack &lt; REntity * &gt;" name="blockRefStack"
        isConst="true" />
      </variant>
      <variant returnType="RColor" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="resolve"
        isConst="false" />
        <arg type="QStack &lt; REntity * &gt; &amp;"
        typeName="QStack &lt; REntity * &gt;" name="blockRefStack"
        isConst="true" />
      </variant>
    </method>
    <method name="getDisplayColor" cppName="getDisplayColor"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RColor" isPureVirtual="false" />
    </method>
    <method name="getInternalReferencePoints"
    cppName="getInternalReferencePoints" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="QList &lt; RRefPoint &gt;"
      isPureVirtual="false">
        <arg type="RS::ProjectionRenderingHint"
        typeName="RS::ProjectionRenderingHint" name="hint"
        hasDefault="true" default="RS :: RenderTop"
        isConst="false" />
      </variant>
    </method>
    <method name="getReferencePoints" cppName="getReferencePoints"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RRefPoint &gt;"
      isPureVirtual="false">
        <arg type="RS::ProjectionRenderingHint"
        typeName="RS::ProjectionRenderingHint" name="hint"
        hasDefault="true" default="RS :: RenderTop"
        isConst="false" />
      </variant>
    </method>
    <method name="getPointOnEntity" cppName="getPointOnEntity"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false" />
    </method>
    <method name="getEndPoints" cppName="getEndPoints"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false">
        <arg type="RBox &amp;" typeName="RBox" name="queryBox"
        hasDefault="true" default="RDEFAULT_RBOX" isConst="true" />
      </variant>
    </method>
    <method name="getMiddlePoints" cppName="getMiddlePoints"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false">
        <arg type="RBox &amp;" typeName="RBox" name="queryBox"
        hasDefault="true" default="RDEFAULT_RBOX" isConst="true" />
      </variant>
    </method>
    <method name="getCenterPoints" cppName="getCenterPoints"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false">
        <arg type="RBox &amp;" typeName="RBox" name="queryBox"
        hasDefault="true" default="RDEFAULT_RBOX" isConst="true" />
      </variant>
    </method>
    <method name="getArcReferencePoints"
    cppName="getArcReferencePoints" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false">
        <arg type="RBox &amp;" typeName="RBox" name="queryBox"
        hasDefault="true" default="RDEFAULT_RBOX" isConst="true" />
      </variant>
    </method>
    <method name="getPointsWithDistanceToEnd"
    cppName="getPointsWithDistanceToEnd" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false">
        <arg type="double" typeName="double" name="distance"
        isConst="false" />
        <arg type="int" typeName="int" name="from"
        hasDefault="true" default="RS :: FromAny"
        isConst="false" />
        <arg type="RBox &amp;" typeName="RBox" name="queryBox"
        hasDefault="true" default="RDEFAULT_RBOX" isConst="true" />
      </variant>
    </method>
    <method name="getClosestPointOnEntity"
    cppName="getClosestPointOnEntity" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
        <arg type="double" typeName="double" name="range"
        hasDefault="true" default="RNANDOUBLE" isConst="false" />
        <arg type="bool" typeName="bool" name="limited"
        hasDefault="true" default="true" isConst="false" />
      </variant>
    </method>
    <method name="getIntersectionPoints"
    cppName="getIntersectionPoints" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false">
        <arg type="REntityData &amp;" typeName="REntityData"
        name="other" isConst="true" />
        <arg type="bool" typeName="bool" name="limited"
        hasDefault="true" default="true" isConst="false" />
        <arg type="bool" typeName="bool" name="same"
        hasDefault="true" default="false" isConst="false" />
        <arg type="RBox &amp;" typeName="RBox" name="queryBox"
        hasDefault="true" default="RDEFAULT_RBOX" isConst="true" />
        <arg type="bool" typeName="bool" name="ignoreComplex"
        hasDefault="true" default="true" isConst="false" />
      </variant>
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false">
        <arg type="RShape &amp;" typeName="RShape" name="shape"
        isConst="true" />
        <arg type="bool" typeName="bool" name="limited"
        hasDefault="true" default="true" isConst="false" />
        <arg type="RBox &amp;" typeName="RBox" name="queryBox"
        hasDefault="true" default="RDEFAULT_RBOX" isConst="true" />
        <arg type="bool" typeName="bool" name="ignoreComplex"
        hasDefault="true" default="true" isConst="false" />
      </variant>
    </method>
    <method name="getVectorTo" cppName="getVectorTo"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
        <arg type="bool" typeName="bool" name="limited"
        hasDefault="true" default="true" isConst="false" />
        <arg type="double" typeName="double" name="strictRange"
        hasDefault="true" default="RMAXDOUBLE" isConst="false" />
      </variant>
    </method>
    <method name="getDistanceTo" cppName="getDistanceTo"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
        <arg type="bool" typeName="bool" name="limited"
        hasDefault="true" default="true" isConst="false" />
        <arg type="double" typeName="double" name="range"
        hasDefault="true" default="0.0" isConst="false" />
        <arg type="bool" typeName="bool" name="draft"
        hasDefault="true" default="false" isConst="false" />
        <arg type="double" typeName="double" name="strictRange"
        hasDefault="true" default="RMAXDOUBLE" isConst="false" />
      </variant>
    </method>
    <method name="isInside" cppName="isInside" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RBox &amp;" typeName="RBox" name="box"
        isConst="true" />
      </variant>
    </method>
    <method name="isOnEntity" cppName="isOnEntity"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
        <arg type="bool" typeName="bool" name="limited"
        hasDefault="true" default="true" isConst="false" />
        <arg type="double" typeName="double" name="tolerance"
        hasDefault="true" default="RDEFAULT_TOLERANCE_1E_MIN4"
        isConst="false" />
      </variant>
    </method>
    <method name="intersectsWith" cppName="intersectsWith"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RShape &amp;" typeName="RShape" name="shape"
        isConst="true" />
      </variant>
    </method>
    <method name="clickReferencePoint"
    cppName="clickReferencePoint" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="referencePoint" isConst="true" />
      </variant>
    </method>
    <method name="moveReferencePoint" cppName="moveReferencePoint"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="true">
        <arg type="RVector &amp;" typeName="RVector"
        name="referencePoint" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector"
        name="targetPoint" isConst="true" />
        <arg type="Qt::KeyboardModifiers"
        typeName="Qt::KeyboardModifiers" name="modifiers"
        hasDefault="true" default="Qt :: NoModifier"
        isConst="false" />
      </variant>
    </method>
    <method name="move" cppName="move" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="offset"
        isConst="true" />
      </variant>
    </method>
    <method name="rotate" cppName="rotate" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="double" typeName="double" name="rotation"
        isConst="false" />
        <arg type="RVector &amp;" typeName="RVector" name="center"
        hasDefault="true" default="RDEFAULT_RVECTOR"
        isConst="true" />
      </variant>
    </method>
    <method name="scale" cppName="scale" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="scaleFactors" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector" name="center"
        hasDefault="true" default="RDEFAULT_RVECTOR"
        isConst="true" />
      </variant>
      <variant returnType="bool" isPureVirtual="false">
        <arg type="double" typeName="double" name="scaleFactor"
        isConst="false" />
        <arg type="RVector &amp;" typeName="RVector" name="center"
        hasDefault="true" default="RDEFAULT_RVECTOR"
        isConst="true" />
      </variant>
    </method>
    <method name="scaleVisualProperties"
    cppName="scaleVisualProperties" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="scaleFactor"
        isConst="false" />
      </variant>
    </method>
    <method name="mirror" cppName="mirror" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RLine &amp;" typeName="RLine" name="axis"
        isConst="true" />
      </variant>
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="axis1"
        isConst="true" />
        <arg type="RVector &amp;" typeName="RVector" name="axis2"
        isConst="true" />
      </variant>
    </method>
    <method name="flipHorizontal" cppName="flipHorizontal"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="flipVertical" cppName="flipVertical"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="stretch" cppName="stretch" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RPolyline &amp;" typeName="RPolyline"
        name="area" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector" name="offset"
        isConst="true" />
      </variant>
    </method>
    <method name="update" cppName="update" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="setAutoUpdatesBlocked"
    cppName="setAutoUpdatesBlocked" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="getDefaultDrawOrder"
    cppName="getDefaultDrawOrder" specifier="public"
    isStatic="true" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="int" isPureVirtual="false" />
    </method>
  </class>
</unit>
