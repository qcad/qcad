<?xml version="1.0"?>
<unit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:rs="http://www.ribbonsoft.com">
  <class_decl name="RDocument" />
  <class_decl name="RExporter" />
  <class_decl name="RArc" />
  <class_decl name="RLine" />
  <class name="RPolylineEntity"
  xsi:noNamespaceSchemaLocation="../class.xsd" isCopyable="false"
  hasShell="false" sharedPointerSupport="true" isQObject="false"
  hasStreamOperator="false" isAbstract="false" isScriptable="true">
    <baseClass name="REntity" specifier="public" />
    <constructor>
      <variant>
        <arg type="RDocument *" typeName="RDocument *"
        name="document" isConst="false" />
        <arg type="RPolylineData &amp;" typeName="RPolylineData"
        name="data" isConst="true" />
      </variant>
      <variant>
        <arg type="RPolylineEntity &amp;"
        typeName="RPolylineEntity" name="other" isConst="true" />
      </variant>
    </constructor>
    <method name="init" cppName="init" specifier="public"
    isStatic="true" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="getStaticPropertyTypeIds"
    cppName="getStaticPropertyTypeIds" specifier="public"
    isStatic="true" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="QSet &lt; RPropertyTypeId &gt;"
      isPureVirtual="false" />
    </method>
    <method name="clone" cppName="clone" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="RPolylineEntity *"
      isPureVirtual="false" />
    </method>
    <method name="setShape" cppName="setShape" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RPolyline &amp;" typeName="RPolyline" name="l"
        isConst="true" />
      </variant>
    </method>
    <method name="setProperty" cppName="setProperty"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RPropertyTypeId" typeName="RPropertyTypeId"
        name="propertyTypeId" isConst="false" />
        <arg type="QVariant &amp;" typeName="QVariant" name="value"
        isConst="true" />
        <arg type="RTransaction *" typeName="RTransaction *"
        name="transaction" hasDefault="true" default="NULL"
        isConst="false" />
      </variant>
    </method>
    <method name="getProperty" cppName="getProperty"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QPair &lt; QVariant , RPropertyAttributes &gt;"
      isPureVirtual="false">
        <arg type="RPropertyTypeId &amp;"
        typeName="RPropertyTypeId" name="propertyTypeId"
        isConst="false" />
        <arg type="bool" typeName="bool" name="humanReadable"
        hasDefault="true" default="false" isConst="false" />
        <arg type="bool" typeName="bool" name="noAttributes"
        hasDefault="true" default="false" isConst="false" />
        <arg type="bool" typeName="bool" name="showOnRequest"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="exportEntity" cppName="exportEntity"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RExporter &amp;" typeName="RExporter" name="e"
        isConst="false" />
        <arg type="bool" typeName="bool" name="preview"
        hasDefault="true" default="false" isConst="false" />
        <arg type="bool" typeName="bool" name="forceSelected"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="getData" cppName="getData" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="RPolylineData &amp;"
      isPureVirtual="false" />
      <variant returnType="const RPolylineData &amp;"
      isPureVirtual="false" />
    </method>
    <method name="getPolylineShape" cppName="getPolylineShape"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RPolyline" isPureVirtual="false" />
    </method>
    <method name="clear" cppName="clear" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="normalize" cppName="normalize" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="tolerance"
        hasDefault="true" default="RS :: PointTolerance"
        isConst="false" />
      </variant>
    </method>
    <method name="countVertices" cppName="countVertices"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="int" isPureVirtual="false" />
    </method>
    <method name="appendVertex" cppName="appendVertex"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="vertex"
        isConst="true" />
        <arg type="double" typeName="double" name="bulge"
        hasDefault="true" default="0.0" isConst="false" />
        <arg type="double" typeName="double" name="w1"
        hasDefault="true" default="0.0" isConst="false" />
        <arg type="double" typeName="double" name="w2"
        hasDefault="true" default="0.0" isConst="false" />
      </variant>
    </method>
    <method name="prependVertex" cppName="prependVertex"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="vertex"
        isConst="true" />
        <arg type="double" typeName="double" name="bulge"
        hasDefault="true" default="0.0" isConst="false" />
        <arg type="double" typeName="double" name="w1"
        hasDefault="true" default="0.0" isConst="false" />
        <arg type="double" typeName="double" name="w2"
        hasDefault="true" default="0.0" isConst="false" />
      </variant>
    </method>
    <method name="insertVertex" cppName="insertVertex"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="int" typeName="int" name="index"
        isConst="false" />
        <arg type="RVector &amp;" typeName="RVector" name="vertex"
        isConst="true" />
      </variant>
    </method>
    <method name="insertVertexAt" cppName="insertVertexAt"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="vertex"
        isConst="true" />
      </variant>
    </method>
    <method name="getVertexAt" cppName="getVertexAt"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false">
        <arg type="int" typeName="int" name="i" isConst="false" />
      </variant>
    </method>
    <method name="removeLastVertex" cppName="removeLastVertex"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="removeVertex" cppName="removeVertex"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="int" typeName="int" name="index"
        isConst="false" />
      </variant>
    </method>
    <method name="countSegments" cppName="countSegments"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="int" isPureVirtual="false" />
    </method>
    <method name="getSegmentAt" cppName="getSegmentAt"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QSharedPointer &lt; RShape &gt;"
      isPureVirtual="false">
        <arg type="int" typeName="int" name="i" isConst="false" />
      </variant>
    </method>
    <method name="isArcSegmentAt" cppName="isArcSegmentAt"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="int" typeName="int" name="i" isConst="false" />
      </variant>
    </method>
    <method name="hasArcSegments" cppName="hasArcSegments"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="getClosestSegment" cppName="getClosestSegment"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="int" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
      </variant>
    </method>
    <method name="getClosestVertex" cppName="getClosestVertex"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="int" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
      </variant>
    </method>
    <method name="getBulgeAt" cppName="getBulgeAt"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false">
        <arg type="int" typeName="int" name="i" isConst="false" />
      </variant>
    </method>
    <method name="setBulgeAt" cppName="setBulgeAt"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="int" typeName="int" name="i" isConst="false" />
        <arg type="double" typeName="double" name="b"
        isConst="false" />
      </variant>
    </method>
    <method name="stripWidths" cppName="stripWidths"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="setMinimumWidth" cppName="setMinimumWidth"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="w"
        isConst="false" />
      </variant>
    </method>
    <method name="setGlobalWidth" cppName="setGlobalWidth"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="w"
        isConst="false" />
      </variant>
    </method>
    <method name="setStartWidthAt" cppName="setStartWidthAt"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="int" typeName="int" name="i" isConst="false" />
        <arg type="double" typeName="double" name="w"
        isConst="false" />
      </variant>
    </method>
    <method name="getStartWidthAt" cppName="getStartWidthAt"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false">
        <arg type="int" typeName="int" name="i" isConst="false" />
      </variant>
    </method>
    <method name="setEndWidthAt" cppName="setEndWidthAt"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="int" typeName="int" name="i" isConst="false" />
        <arg type="double" typeName="double" name="w"
        isConst="false" />
      </variant>
    </method>
    <method name="getEndWidthAt" cppName="getEndWidthAt"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false">
        <arg type="int" typeName="int" name="i" isConst="false" />
      </variant>
    </method>
    <method name="hasWidths" cppName="hasWidths" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setStartWidths" cppName="setStartWidths"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="QList &lt; double &gt; &amp;"
        typeName="QList &lt; double &gt;" name="sw"
        isConst="true" />
      </variant>
    </method>
    <method name="getStartWidths" cppName="getStartWidths"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; double &gt;"
      isPureVirtual="false" />
    </method>
    <method name="setEndWidths" cppName="setEndWidths"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="QList &lt; double &gt; &amp;"
        typeName="QList &lt; double &gt;" name="ew"
        isConst="true" />
      </variant>
    </method>
    <method name="getEndWidths" cppName="getEndWidths"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; double &gt;"
      isPureVirtual="false" />
    </method>
    <method name="getDirection1" cppName="getDirection1"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="getDirection2" cppName="getDirection2"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="reverse" cppName="reverse" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="getSideOfPoint" cppName="getSideOfPoint"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RS::Side" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
      </variant>
    </method>
    <method name="getEndPoint" cppName="getEndPoint"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false" />
    </method>
    <method name="getStartPoint" cppName="getStartPoint"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false" />
    </method>
    <method name="setClosed" cppName="setClosed" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="isClosed" cppName="isClosed" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="isGeometricallyClosed"
    cppName="isGeometricallyClosed" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="double" typeName="double" name="tolerance"
        hasDefault="true" default="RS :: PointTolerance"
        isConst="false" />
      </variant>
    </method>
    <method name="autoClose" cppName="autoClose" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="double" typeName="double" name="tolerance"
        hasDefault="true" default="RS :: PointTolerance"
        isConst="false" />
      </variant>
    </method>
    <method name="toLogicallyClosed" cppName="toLogicallyClosed"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="double" typeName="double" name="tolerance"
        hasDefault="true" default="RS :: PointTolerance"
        isConst="false" />
      </variant>
    </method>
    <method name="toLogicallyOpen" cppName="toLogicallyOpen"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="getSelfIntersectionPoints"
    cppName="getSelfIntersectionPoints" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false" />
    </method>
    <method name="getOrientation" cppName="getOrientation"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RS::Orientation" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="implicitelyClosed"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="getArea" cppName="getArea" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="getLength" cppName="getLength" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="getLengthTo" cppName="getLengthTo"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="p"
        isConst="true" />
        <arg type="bool" typeName="bool" name="limited"
        hasDefault="true" default="true" isConst="false" />
      </variant>
    </method>
    <method name="getExploded" cppName="getExploded"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; QSharedPointer &lt; RShape &gt; &gt;"
      isPureVirtual="false" />
    </method>
    <method name="getComplexity" cppName="getComplexity"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="int" isPureVirtual="false" />
    </method>
    <method name="toPainterPath" cppName="toPainterPath"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RPainterPath" isPureVirtual="false" />
    </method>
    <method name="simplify" cppName="simplify" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="angleTolerance"
        isConst="false" />
      </variant>
    </method>
    <method name="verifyTangency" cppName="verifyTangency"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false">
        <arg type="double" typeName="double" name="toleranceMin"
        hasDefault="true" default="RS :: AngleTolerance"
        isConst="false" />
        <arg type="double" typeName="double" name="toleranceMax"
        hasDefault="true" default="M_PI_4" isConst="false" />
      </variant>
    </method>
    <method name="setPolylineGen" cppName="setPolylineGen"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="getPolylineGen" cppName="getPolylineGen"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="setElevation" cppName="setElevation"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="v"
        isConst="false" />
      </variant>
    </method>
    <method name="getElevation" cppName="getElevation"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="isFlat" cppName="isFlat" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="getTrimEnd" cppName="getTrimEnd"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RS::Ending" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="trimPoint" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector"
        name="clickPoint" isConst="true" />
      </variant>
    </method>
    <method name="trimStartPoint" cppName="trimStartPoint"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="trimPoint" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector"
        name="clickPoint" hasDefault="true"
        default="RVector :: invalid" isConst="true" />
        <arg type="bool" typeName="bool" name="extend"
        hasDefault="true" default="false" isConst="false" />
      </variant>
      <variant returnType="bool" isPureVirtual="false">
        <arg type="double" typeName="double" name="trimDist"
        isConst="false" />
      </variant>
    </method>
    <method name="trimEndPoint" cppName="trimEndPoint"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="trimPoint" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector"
        name="clickPoint" hasDefault="true"
        default="RVector :: invalid" isConst="true" />
        <arg type="bool" typeName="bool" name="extend"
        hasDefault="true" default="false" isConst="false" />
      </variant>
      <variant returnType="bool" isPureVirtual="false">
        <arg type="double" typeName="double" name="trimDist"
        isConst="false" />
      </variant>
    </method>
    <method name="morph" cppName="morph" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="QList &lt; RPolyline &gt;"
      isPureVirtual="false">
        <arg type="RPolyline &amp;" typeName="RPolyline"
        name="target" isConst="true" />
        <arg type="int" typeName="int" name="steps"
        isConst="false" />
      </variant>
    </method>
    <method name="contains" cppName="contains" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
        <arg type="bool" typeName="bool" name="borderIsInside"
        hasDefault="true" default="false" isConst="false" />
        <arg type="double" typeName="double" name="tolerance"
        hasDefault="true" default="RS :: PointTolerance"
        isConst="false" />
      </variant>
    </method>
    <method name="containsShape" cppName="containsShape"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RShape &amp;" typeName="RShape" name="shape"
        isConst="true" />
      </variant>
    </method>
    <method name="print" cppName="print" specifier="protected"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="QDebug" typeName="QDebug" name="dbg"
        isConst="false" />
      </variant>
    </method>
    <property name="PropertyCustom" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyHandle" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyProtected" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyWorkingSet" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyType" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyBlock" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyLayer" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyLinetype" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyLinetypeScale" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyLineweight" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyColor" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyDisplayedColor" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyDrawOrder" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyClosed" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyPolylineGen" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyVertexNX" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyVertexNY" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyVertexNZ" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyBulgeN" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyAngleN" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyStartWidthN" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyEndWidthN" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyGlobalWidth" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyOrientation" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyLength" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyTotalLength" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyArea" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyTotalArea" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyBaseAngle" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertySize1" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertySize2" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
    <property name="PropertyElevation" type="RPropertyTypeId"
    isConst="false" isStatic="true" />
  </class>
</unit>
