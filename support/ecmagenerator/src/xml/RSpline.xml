<?xml version="1.0"?>
<unit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:rs="http://www.ribbonsoft.com">
  <class name="RSpline"
  xsi:noNamespaceSchemaLocation="../class.xsd" isCopyable="true"
  hasShell="false" sharedPointerSupport="true" isQObject="false"
  hasStreamOperator="true" isAbstract="false" isScriptable="true">
    <baseClass name="RShape" specifier="public" />
    <baseClass name="RExplodable" specifier="public" />
    <constructor>
      <variant />
      <variant>
        <arg type="RSpline &amp;" typeName="RSpline" name="other"
        isConst="true" />
      </variant>
      <variant>
        <arg type="QList &lt; RVector &gt; &amp;"
        typeName="QList &lt; RVector &gt;" name="controlPoints"
        isConst="true" />
        <arg type="int" typeName="int" name="degree"
        isConst="false" />
      </variant>
    </constructor>
    <method name="operator =" cppName="operator ="
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RSpline &amp;" isPureVirtual="false">
        <arg type="RSpline &amp;" typeName="RSpline" name="other"
        isConst="true" />
      </variant>
    </method>
    <method name="getShapeType" cppName="getShapeType"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RShape::Type" isPureVirtual="false" />
    </method>
    <method name="clone" cppName="clone" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="RSpline *" isPureVirtual="false" />
    </method>
    <method name="isDirected" cppName="isDirected"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="copySpline" cppName="copySpline"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RSpline &amp;" typeName="RSpline" name="other"
        isConst="true" />
      </variant>
    </method>
    <method name="createSplinesFromArc"
    cppName="createSplinesFromArc" specifier="public"
    isStatic="true" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="QList &lt; RSpline &gt;"
      isPureVirtual="false">
        <arg type="RArc &amp;" typeName="RArc" name="arc"
        isConst="true" />
      </variant>
    </method>
    <method name="createBezierFromSmallArc"
    cppName="createBezierFromSmallArc" specifier="public"
    isStatic="true" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="RSpline" isPureVirtual="false">
        <arg type="double" typeName="double" name="r"
        isConst="false" />
        <arg type="double" typeName="double" name="a1"
        isConst="false" />
        <arg type="double" typeName="double" name="a2"
        isConst="false" />
      </variant>
    </method>
    <method name="setZ" cppName="setZ" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="z"
        isConst="false" />
      </variant>
    </method>
    <method name="getVectorProperties"
    cppName="getVectorProperties" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false" />
    </method>
    <method name="getIntProperties" cppName="getIntProperties"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; int &gt;"
      isPureVirtual="false" />
    </method>
    <method name="getDoubleProperties"
    cppName="getDoubleProperties" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="QList &lt; double &gt;"
      isPureVirtual="false" />
    </method>
    <method name="getBoolProperties" cppName="getBoolProperties"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; bool &gt;"
      isPureVirtual="false" />
    </method>
    <method name="isInterpolated" cppName="isInterpolated"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="appendControlPoint" cppName="appendControlPoint"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
      </variant>
    </method>
    <method name="appendControlPoints"
    cppName="appendControlPoints" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="QList &lt; RVector &gt; &amp;"
        typeName="QList &lt; RVector &gt;" name="points"
        isConst="true" />
      </variant>
    </method>
    <method name="removeLastControlPoint"
    cppName="removeLastControlPoint" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="setControlPoints" cppName="setControlPoints"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="QList &lt; RVector &gt; &amp;"
        typeName="QList &lt; RVector &gt;" name="points"
        isConst="true" />
      </variant>
    </method>
    <method name="getControlPoints" cppName="getControlPoints"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false" />
    </method>
    <method name="getControlPointsWrapped"
    cppName="getControlPointsWrapped" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false" />
    </method>
    <method name="countControlPoints" cppName="countControlPoints"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="int" isPureVirtual="false" />
    </method>
    <method name="getControlPointAt" cppName="getControlPointAt"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false">
        <arg type="int" typeName="int" name="i" isConst="false" />
      </variant>
    </method>
    <method name="appendFitPoint" cppName="appendFitPoint"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
      </variant>
    </method>
    <method name="prependFitPoint" cppName="prependFitPoint"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
      </variant>
    </method>
    <method name="insertFitPointAt" cppName="insertFitPointAt"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
      </variant>
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="t"
        isConst="false" />
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
      </variant>
    </method>
    <method name="removeFitPointAt" cppName="removeFitPointAt"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
      </variant>
    </method>
    <method name="removeFirstFitPoint"
    cppName="removeFirstFitPoint" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="removeLastFitPoint" cppName="removeLastFitPoint"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="setFitPoints" cppName="setFitPoints"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="QList &lt; RVector &gt; &amp;"
        typeName="QList &lt; RVector &gt;" name="points"
        isConst="true" />
      </variant>
    </method>
    <method name="getFitPoints" cppName="getFitPoints"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false" />
    </method>
    <method name="countFitPoints" cppName="countFitPoints"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="int" isPureVirtual="false" />
    </method>
    <method name="hasFitPoints" cppName="hasFitPoints"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="getFitPointAt" cppName="getFitPointAt"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false">
        <arg type="int" typeName="int" name="i" isConst="false" />
      </variant>
    </method>
    <method name="getKnotVector" cppName="getKnotVector"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; double &gt;"
      isPureVirtual="false" />
    </method>
    <method name="getActualKnotVector"
    cppName="getActualKnotVector" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="QList &lt; double &gt;"
      isPureVirtual="false" />
    </method>
    <method name="setKnotVector" cppName="setKnotVector"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="QList &lt; double &gt; &amp;"
        typeName="QList &lt; double &gt;" name="knots"
        isConst="true" />
      </variant>
    </method>
    <method name="appendKnot" cppName="appendKnot"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="double" typeName="double" name="k"
        isConst="false" />
      </variant>
    </method>
    <method name="getWeights" cppName="getWeights"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; double &gt;"
      isPureVirtual="false" />
    </method>
    <method name="setDegree" cppName="setDegree" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="int" typeName="int" name="d" isConst="false" />
      </variant>
    </method>
    <method name="getDegree" cppName="getDegree" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="int" isPureVirtual="false" />
    </method>
    <method name="getOrder" cppName="getOrder" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="int" isPureVirtual="false" />
    </method>
    <method name="setPeriodic" cppName="setPeriodic"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="bool" typeName="bool" name="on"
        isConst="false" />
      </variant>
    </method>
    <method name="isClosed" cppName="isClosed" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="isGeometricallyClosed"
    cppName="isGeometricallyClosed" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="double" typeName="double" name="tolerance"
        hasDefault="true" default="RS :: PointTolerance"
        isConst="false" />
      </variant>
    </method>
    <method name="isPeriodic" cppName="isPeriodic"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="getDirection1" cppName="getDirection1"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="getDirection2" cppName="getDirection2"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="getSideOfPoint" cppName="getSideOfPoint"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RS::Side" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
      </variant>
    </method>
    <method name="getStartPoint" cppName="getStartPoint"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false" />
    </method>
    <method name="getEndPoint" cppName="getEndPoint"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false" />
    </method>
    <method name="setStartPoint" cppName="setStartPoint"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="v"
        isConst="true" />
      </variant>
    </method>
    <method name="setEndPoint" cppName="setEndPoint"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="v"
        isConst="true" />
      </variant>
    </method>
    <method name="setTangents" cppName="setTangents"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="start"
        isConst="true" />
        <arg type="RVector &amp;" typeName="RVector" name="end"
        isConst="true" />
      </variant>
    </method>
    <method name="unsetTangents" cppName="unsetTangents"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="setTangentAtStart" cppName="setTangentAtStart"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="t"
        isConst="true" />
      </variant>
    </method>
    <method name="getTangentAtStart" cppName="getTangentAtStart"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false" />
    </method>
    <method name="unsetTangentAtStart"
    cppName="unsetTangentAtStart" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="setTangentAtEnd" cppName="setTangentAtEnd"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="t"
        isConst="true" />
      </variant>
    </method>
    <method name="getTangentAtEnd" cppName="getTangentAtEnd"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false" />
    </method>
    <method name="unsetTangentAtEnd" cppName="unsetTangentAtEnd"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="updateTangentsPeriodic"
    cppName="updateTangentsPeriodic" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="getBoundingBox" cppName="getBoundingBox"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RBox" isPureVirtual="false" />
    </method>
    <method name="getLength" cppName="getLength" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="getPointAt" cppName="getPointAt"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false">
        <arg type="double" typeName="double" name="t"
        isConst="false" />
      </variant>
    </method>
    <method name="getPointAtDistance" cppName="getPointAtDistance"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false">
        <arg type="double" typeName="double" name="distance"
        isConst="false" />
      </variant>
    </method>
    <method name="getAngleAt" cppName="getAngleAt"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false">
        <arg type="double" typeName="double" name="distance"
        isConst="false" />
        <arg type="RS::From" typeName="RS::From" name="from"
        hasDefault="true" default="RS :: FromStart"
        isConst="false" />
      </variant>
    </method>
    <method name="getEndPoints" cppName="getEndPoints"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false" />
    </method>
    <method name="getMiddlePoint" cppName="getMiddlePoint"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false" />
    </method>
    <method name="getMiddlePoints" cppName="getMiddlePoints"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false" />
    </method>
    <method name="getCenterPoints" cppName="getCenterPoints"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false" />
    </method>
    <method name="getPointsWithDistanceToEnd"
    cppName="getPointsWithDistanceToEnd" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false">
        <arg type="double" typeName="double" name="distance"
        isConst="false" />
        <arg type="int" typeName="int" name="from"
        hasDefault="true" default="RS :: FromAny"
        isConst="false" />
      </variant>
    </method>
    <method name="getPointCloud" cppName="getPointCloud"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false">
        <arg type="double" typeName="double" name="segmentLength"
        isConst="false" />
      </variant>
    </method>
    <method name="getVectorTo" cppName="getVectorTo"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RVector" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
        <arg type="bool" typeName="bool" name="limited"
        hasDefault="true" default="true" isConst="false" />
        <arg type="double" typeName="double" name="strictRange"
        hasDefault="true" default="RMAXDOUBLE" isConst="false" />
      </variant>
    </method>
    <method name="isOnShape" cppName="isOnShape" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
        <arg type="bool" typeName="bool" name="limited"
        hasDefault="true" default="true" isConst="false" />
        <arg type="double" typeName="double" name="tolerance"
        hasDefault="true" default="RDEFAULT_TOLERANCE_1E_MIN4"
        isConst="false" />
      </variant>
    </method>
    <method name="move" cppName="move" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="offset"
        isConst="true" />
      </variant>
    </method>
    <method name="rotate" cppName="rotate" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="double" typeName="double" name="rotation"
        isConst="false" />
        <arg type="RVector &amp;" typeName="RVector" name="center"
        hasDefault="true" default="RDEFAULT_RVECTOR"
        isConst="true" />
      </variant>
    </method>
    <method name="scale" cppName="scale" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="scaleFactors" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector" name="center"
        hasDefault="true" default="RDEFAULT_RVECTOR"
        isConst="true" />
      </variant>
    </method>
    <method name="mirror" cppName="mirror" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RLine &amp;" typeName="RLine" name="axis"
        isConst="true" />
      </variant>
    </method>
    <method name="flipHorizontal" cppName="flipHorizontal"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="flipVertical" cppName="flipVertical"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="reverse" cppName="reverse" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="stretch" cppName="stretch" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RPolyline &amp;" typeName="RPolyline"
        name="area" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector" name="offset"
        isConst="true" />
      </variant>
    </method>
    <method name="getTransformed" cppName="getTransformed"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QSharedPointer &lt; RShape &gt;"
      isPureVirtual="false">
        <arg type="QTransform &amp;" typeName="QTransform"
        name="transform" isConst="true" />
      </variant>
    </method>
    <method name="getTrimEnd" cppName="getTrimEnd"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="RS::Ending" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="trimPoint" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector"
        name="clickPoint" isConst="true" />
      </variant>
    </method>
    <method name="trimStartPoint" cppName="trimStartPoint"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="double" typeName="double" name="trimDist"
        isConst="false" />
      </variant>
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="trimPoint" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector"
        name="clickPoint" hasDefault="true"
        default="RVector :: invalid" isConst="true" />
        <arg type="bool" typeName="bool" name="extend"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="trimEndPoint" cppName="trimEndPoint"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false">
        <arg type="double" typeName="double" name="trimDist"
        isConst="false" />
      </variant>
      <variant returnType="bool" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector"
        name="trimPoint" isConst="true" />
        <arg type="RVector &amp;" typeName="RVector"
        name="clickPoint" hasDefault="true"
        default="RVector :: invalid" isConst="true" />
        <arg type="bool" typeName="bool" name="extend"
        hasDefault="true" default="false" isConst="false" />
      </variant>
    </method>
    <method name="getDistanceFromStart"
    cppName="getDistanceFromStart" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="p"
        isConst="true" />
      </variant>
    </method>
    <method name="splitAtPoints" cppName="splitAtPoints"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RSpline &gt;"
      isPureVirtual="false">
        <arg type="QList &lt; RVector &gt; &amp;"
        typeName="QList &lt; RVector &gt;" name="points"
        isConst="true" />
      </variant>
    </method>
    <method name="splitAtParams" cppName="splitAtParams"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RSpline &gt;"
      isPureVirtual="false">
        <arg type="QList &lt; double &gt; &amp;"
        typeName="QList &lt; double &gt;" name="params"
        isConst="true" />
      </variant>
    </method>
    <method name="toPolyline" cppName="toPolyline"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="RPolyline" isPureVirtual="false">
        <arg type="int" typeName="int" name="segments"
        isConst="false" />
      </variant>
    </method>
    <method name="approximateWithArcs"
    cppName="approximateWithArcs" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="RPolyline" isPureVirtual="false">
        <arg type="double" typeName="double" name="tolerance"
        isConst="false" />
      </variant>
    </method>
    <method name="getExploded" cppName="getExploded"
    specifier="public" isStatic="false" isVirtual="true"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; QSharedPointer &lt; RShape &gt; &gt;"
      isPureVirtual="false">
        <arg type="int" typeName="int" name="segments"
        hasDefault="true" default="RDEFAULT_MIN1"
        isConst="false" />
      </variant>
    </method>
    <method name="getExplodedBezier" cppName="getExplodedBezier"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; QSharedPointer &lt; RShape &gt; &gt;"
      isPureVirtual="false">
        <arg type="int" typeName="int" name="segments"
        isConst="false" />
      </variant>
    </method>
    <method name="getExplodedWithSegmentLength"
    cppName="getExplodedWithSegmentLength" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="QList &lt; QSharedPointer &lt; RShape &gt; &gt;"
      isPureVirtual="false">
        <arg type="double" typeName="double" name="segmentLength"
        isConst="false" />
      </variant>
    </method>
    <method name="getBezierSegments" cppName="getBezierSegments"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RSpline &gt;"
      isPureVirtual="false">
        <arg type="RBox &amp;" typeName="RBox" name="queryBox"
        hasDefault="true" default="RDEFAULT_RBOX" isConst="true" />
      </variant>
    </method>
    <method name="isValid" cppName="isValid" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="getTDelta" cppName="getTDelta" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="getTMin" cppName="getTMin" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="getTMax" cppName="getTMax" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false" />
    </method>
    <method name="getTAtPoint" cppName="getTAtPoint"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false">
        <arg type="RVector &amp;" typeName="RVector" name="point"
        isConst="true" />
      </variant>
    </method>
    <method name="getTAtDistance" cppName="getTAtDistance"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false">
        <arg type="double" typeName="double" name="distance"
        isConst="false" />
      </variant>
    </method>
    <method name="getDistanceAtT" cppName="getDistanceAtT"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="double" isPureVirtual="false">
        <arg type="double" typeName="double" name="t"
        isConst="false" />
      </variant>
    </method>
    <method name="getSegments" cppName="getSegments"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RSpline &gt;"
      isPureVirtual="false">
        <arg type="QList &lt; RVector &gt; &amp;"
        typeName="QList &lt; RVector &gt;" name="points"
        isConst="true" />
      </variant>
    </method>
    <method name="getDiscontinuities" cppName="getDiscontinuities"
    specifier="public" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false" />
    </method>
    <method name="simplify" cppName="simplify" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="RSpline" isPureVirtual="false">
        <arg type="double" typeName="double" name="tolerance"
        isConst="false" />
      </variant>
    </method>
    <method name="updateFromControlPoints"
    cppName="updateFromControlPoints" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="updateFromFitPoints"
    cppName="updateFromFitPoints" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="update" cppName="update" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="splitAt" cppName="splitAt" specifier="public"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="QList &lt; QSharedPointer &lt; RShape &gt; &gt;"
      isPureVirtual="false">
        <arg type="QList &lt; RVector &gt; &amp;"
        typeName="QList &lt; RVector &gt;" name="points"
        isConst="true" />
      </variant>
    </method>
    <method name="isDirty" cppName="isDirty" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="getSelfIntersectionPoints"
    cppName="getSelfIntersectionPoints" specifier="public"
    isStatic="false" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="QList &lt; RVector &gt;"
      isPureVirtual="false" />
    </method>
    <method name="hasProxy" cppName="hasProxy" specifier="public"
    isStatic="true" isVirtual="false" isScriptOverwritable="true">
      <variant returnType="bool" isPureVirtual="false" />
    </method>
    <method name="appendToExploded" cppName="appendToExploded"
    specifier="protected" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="RLine &amp;" typeName="RLine" name="line"
        isConst="true" />
      </variant>
    </method>
    <method name="invalidate" cppName="invalidate"
    specifier="protected" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="updateInternal" cppName="updateInternal"
    specifier="protected" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="updateBoundingBox" cppName="updateBoundingBox"
    specifier="protected" isStatic="false" isVirtual="false"
    isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false" />
    </method>
    <method name="print" cppName="print" specifier="protected"
    isStatic="false" isVirtual="true" isScriptOverwritable="true">
      <variant returnType="void" isPureVirtual="false">
        <arg type="QDebug" typeName="QDebug" name="dbg"
        isConst="false" />
      </variant>
    </method>
    <property name="controlPoints" type="QList &lt; RVector &gt;"
    cppGetter="getControlPoints" cppSetter="setControlPoints" />
    <property name="knotVector" type="QList &lt; double &gt;"
    cppGetter="getKnotVector" />
    <property name="weights" type="QList &lt; double &gt;"
    cppGetter="getWeights" />
    <property name="fitPoints" type="QList &lt; RVector &gt;"
    cppGetter="getFitPoints" cppSetter="setFitPoints" />
    <property name="degree" type="int" cppGetter="getDegree"
    cppSetter="setDegree" />
  </class>
</unit>
